{"name":"expo-linking","kind":1,"kindString":"Project","originalName":"","children":[{"name":"CreateURLOptions","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"isTripleSlashed","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Should the URI be triple slashed `scheme:///path` or double slashed `scheme://path`."},"type":{"type":"intrinsic","name":"boolean"}},{"name":"queryParams","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An object of parameters that will be converted into a query string."},"type":{"type":"reference","name":"QueryParams"}},{"name":"scheme","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"URI protocol `<scheme>://` that must be built into your native app."},"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"EventType","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"nativeEvent","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"MessageEvent"}},{"name":"url","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"string"}}]}}},{"name":"NativeURLListener","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","parameters":[{"name":"nativeEvent","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"MessageEvent"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"ParsedURL","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"hostname","kind":1024,"kindString":"Property","type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"path","kind":1024,"kindString":"Property","comment":{"shortText":"The path into the app specified by the URL."},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"queryParams","kind":1024,"kindString":"Property","comment":{"shortText":"The set of query parameters specified by the query string of the url used to open the app."},"type":{"type":"union","types":[{"type":"reference","name":"QueryParams"},{"type":"literal","value":null}]}},{"name":"scheme","kind":1024,"kindString":"Property","type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}}]}}},{"name":"QueryParams","kind":4194304,"kindString":"Type alias","type":{"type":"reference","name":"ParsedQs"}},{"name":"SendIntentExtras","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"key","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"string"}},{"name":"value","kind":1024,"kindString":"Property","type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"boolean"}]}}]}}},{"name":"URLListener","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","parameters":[{"name":"event","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"EventType"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"addEventListener","kind":64,"kindString":"Function","signatures":[{"name":"addEventListener","kind":4096,"kindString":"Call signature","comment":{"shortText":"Add a handler to `Linking` changes by listening to the `url` event type and providing the handler.\nIt is recommended to use the [`useURL()`](#useurl) hook instead.","tags":[{"tag":"see","text":"[React Native Docs Linking page](https://reactnative.dev/docs/linking#addeventlistener).\n"}]},"parameters":[{"name":"type","kind":32768,"kindString":"Parameter","comment":{"shortText":"The only valid type is `'url'`."},"type":{"type":"intrinsic","name":"string"}},{"name":"handler","kind":32768,"kindString":"Parameter","comment":{"shortText":"An [`URLListener`](#urllistener) function that takes an `event` object of the type\n[`EventType`](#eventype)."},"type":{"type":"reference","name":"URLListener"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"canOpenURL","kind":64,"kindString":"Function","signatures":[{"name":"canOpenURL","kind":4096,"kindString":"Call signature","comment":{"shortText":"Determine whether or not an installed app can handle a given URL.\nOn web this always returns `true` because there is no API for detecting what URLs can be opened.","returns":"A `Promise` object that is fulfilled with `true` if the URL can be handled, otherwise it\n`false` if not.\n\nThe `Promise` will reject on Android if it was impossible to check if the URL can be opened, and\non iOS if you didn't [add the specific scheme in the `LSApplicationQueriesSchemes` key inside **Info.plist**](/guides/linking#opening-links-to-other-apps).\n"},"parameters":[{"name":"url","kind":32768,"kindString":"Parameter","comment":{"shortText":"The URL that you want to test can be opened."},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise"}}]},{"name":"createURL","kind":64,"kindString":"Function","signatures":[{"name":"createURL","kind":4096,"kindString":"Call signature","comment":{"shortText":"Helper method for constructing a deep link into your app, given an optional path and set of query\nparameters. Creates a URI scheme with two slashes by default.","text":"The scheme in bare and standalone must be defined in the Expo config (`app.config.js` or `app.json`)\nunder `expo.scheme`.\n\n# Examples\n- Bare: `<scheme>://path` - uses provided scheme or scheme from Expo config `scheme`.\n- Standalone, Custom: `yourscheme://path`\n- Web (dev): `https://localhost:19006/path`\n- Web (prod): `https://myapp.com/path`\n- Expo Client (dev): `exp://128.0.0.1:19000/--/path`\n- Expo Client (prod): `exp://exp.host/@yourname/your-app/--/path`\n","returns":"A URL string which points to your app with the given deep link information.\n"},"parameters":[{"name":"path","kind":32768,"kindString":"Parameter","comment":{"shortText":"Addition path components to append to the base URL."},"type":{"type":"intrinsic","name":"string"}},{"name":"namedParameters","kind":32768,"kindString":"Parameter","comment":{"shortText":"Additional options object."},"originalName":"__namedParameters","type":{"type":"reference","name":"CreateURLOptions"},"defaultValue":"{}"}],"type":{"type":"intrinsic","name":"string"}}]},{"name":"getInitialURL","kind":64,"kindString":"Function","signatures":[{"name":"getInitialURL","kind":4096,"kindString":"Call signature","comment":{"shortText":"Get the URL that was used to launch the app if it was launched by a link.","returns":"The URL string that launched your app, or `null`.\n"},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}],"name":"Promise"}}]},{"name":"makeUrl","kind":64,"kindString":"Function","signatures":[{"name":"makeUrl","kind":4096,"kindString":"Call signature","comment":{"shortText":"Create a URL that works for the environment the app is currently running in.\nThe scheme in bare and standalone must be defined in the app.json under `expo.scheme`.","text":"# Examples\n- Bare: empty string\n- Standalone, Custom: `yourscheme:///path`\n- Web (dev): `https://localhost:19006/path`\n- Web (prod): `https://myapp.com/path`\n- Expo Client (dev): `exp://128.0.0.1:19000/--/path`\n- Expo Client (prod): `exp://exp.host/@yourname/your-app/--/path`\n","returns":"A URL string which points to your app with the given deep link information.","tags":[{"tag":"deprecated","text":"An alias for [`createURL()`](#linkingcreateurlpath-namedparameters). This method is\ndeprecated and will be removed in a future SDK version.\n"}]},"parameters":[{"name":"path","kind":32768,"kindString":"Parameter","comment":{"shortText":"addition path components to append to the base URL."},"type":{"type":"intrinsic","name":"string"},"defaultValue":"''"},{"name":"queryParams","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"An object with a set of query parameters. These will be merged with any\nExpo-specific parameters that are needed (e.g. release channel) and then appended to the URL\nas a query string."},"type":{"type":"reference","name":"ParsedQs"}},{"name":"scheme","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Optional URI protocol to use in the URL `<scheme>:///`, when `undefined` the scheme\nwill be chosen from the Expo config (`app.config.js` or `app.json`)."},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}]},{"name":"openSettings","kind":64,"kindString":"Function","signatures":[{"name":"openSettings","kind":4096,"kindString":"Call signature","comment":{"shortText":"Open the operating system settings app and displays the appâ€™s custom settings, if it has any.","tags":[{"tag":"platform","text":"ios\n"}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]},{"name":"openURL","kind":64,"kindString":"Function","signatures":[{"name":"openURL","kind":4096,"kindString":"Call signature","comment":{"shortText":"Attempt to open the given URL with an installed app. See the [Linking guide](/guides/linking)\nfor more information.","returns":"A `Promise` that is fulfilled with `true` if the link is opened operating system\nautomatically or the user confirms the prompt to open the link. The `Promise` rejects if there\nare no applications registered for the URL or the user cancels the dialog.\n"},"parameters":[{"name":"url","kind":32768,"kindString":"Parameter","comment":{"shortText":"A URL for the operating system to open, eg: `tel:5555555`, `exp://`."},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"literal","value":true}],"name":"Promise"}}]},{"name":"parse","kind":64,"kindString":"Function","signatures":[{"name":"parse","kind":4096,"kindString":"Call signature","comment":{"shortText":"Helper method for parsing out deep link information from a URL.","returns":"A `ParsedURL` object.\n"},"parameters":[{"name":"url","kind":32768,"kindString":"Parameter","comment":{"shortText":"A URL that points to the currently running experience (e.g. an output of `Linking.createURL()`)."},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"ParsedURL"}}]},{"name":"parseInitialURLAsync","kind":64,"kindString":"Function","signatures":[{"name":"parseInitialURLAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Helper method which wraps React Native's `Linking.getInitialURL()` in `Linking.parse()`.\nParses the deep link information out of the URL used to open the experience initially.\nIf no link opened the app, all the fields will be `null`.\n> On the web it parses the current window URL.","returns":"A promise that resolves with `ParsedURL` object.\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ParsedURL"}],"name":"Promise"}}]},{"name":"removeEventListener","kind":64,"kindString":"Function","signatures":[{"name":"removeEventListener","kind":4096,"kindString":"Call signature","comment":{"shortText":"Remove a handler by passing the `url` event type and the handler.","tags":[{"tag":"see","text":"[React Native Docs Linking page](https://reactnative.dev/docs/linking#removeeventlistener).\n"}]},"parameters":[{"name":"type","kind":32768,"kindString":"Parameter","comment":{"shortText":"The only valid type is `'url'`."},"type":{"type":"intrinsic","name":"string"}},{"name":"handler","kind":32768,"kindString":"Parameter","comment":{"shortText":"An [`URLListener`](#urllistener) function that takes an `event` object of the type\n[`EventType`](#eventype)."},"type":{"type":"reference","name":"URLListener"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"sendIntent","kind":64,"kindString":"Function","signatures":[{"name":"sendIntent","kind":4096,"kindString":"Call signature","comment":{"shortText":"Launch an Android intent with extras.\n> Use [IntentLauncher](./intent-launcher) instead, `sendIntent` is only included in\n> `Linking` for API compatibility with React Native's Linking API.","tags":[{"tag":"platform","text":"android\n"}]},"parameters":[{"name":"action","kind":32768,"kindString":"Parameter","type":{"type":"intrinsic","name":"string"}},{"name":"extras","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"reference","name":"SendIntentExtras"}}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]},{"name":"useURL","kind":64,"kindString":"Function","signatures":[{"name":"useURL","kind":4096,"kindString":"Call signature","comment":{"shortText":"Returns the initial URL followed by any subsequent changes to the URL.","returns":"Returns the initial URL or `null`.\n"},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}}]}]}