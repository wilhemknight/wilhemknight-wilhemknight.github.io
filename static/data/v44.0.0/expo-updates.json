{"name":"expo-updates","kind":1,"kindString":"Project","originalName":"","children":[{"name":"UpdateEventType","kind":8,"kindString":"Enumeration","comment":{"shortText":"The types of update-related events."},"children":[{"name":"ERROR","kind":16,"kindString":"Enumeration member","comment":{"shortText":"An error occurred trying to fetch the latest update."},"defaultValue":"\"error\""},{"name":"NO_UPDATE_AVAILABLE","kind":16,"kindString":"Enumeration member","comment":{"shortText":"No updates are available, and the most up-to-date update is already running."},"defaultValue":"\"noUpdateAvailable\""},{"name":"UPDATE_AVAILABLE","kind":16,"kindString":"Enumeration member","comment":{"shortText":"A new update has finished downloading to local storage. If you would like to start using this\nupdate at any point before the user closes and restarts the app on their own, you can call\n[`Updates.reloadAsync()`](#reloadasync) to launch this new update."},"defaultValue":"\"updateAvailable\""}]},{"name":"UpdateCheckResult","kind":4194304,"kindString":"Type alias","comment":{"shortText":"The result of checking for a new update."},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"isAvailable","kind":1024,"kindString":"Property","comment":{"shortText":"`true` if an update is available, `false` if the app is already running the latest available\nupdate."},"type":{"type":"intrinsic","name":"boolean"}},{"name":"manifest","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If `isAvailable` is `true`, the manifest of the available update, and `undefined` otherwise."},"type":{"type":"reference","name":"Manifest"}}]}}},{"name":"UpdateEvent","kind":4194304,"kindString":"Type alias","comment":{"shortText":"An object that is passed into each event listener when an auto-update check occurs."},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"manifest","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If `type` is `Updates.UpdateEventType.UPDATE_AVAILABLE`, the manifest of the newly downloaded\nupdate, and `undefined` otherwise."},"type":{"type":"reference","name":"Manifest"}},{"name":"message","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If `type` is `Updates.UpdateEventType.ERROR`, the error message, and `undefined` otherwise."},"type":{"type":"intrinsic","name":"string"}},{"name":"type","kind":1024,"kindString":"Property","comment":{"shortText":"Type of the event."},"type":{"type":"reference","name":"UpdateEventType"}}]}}},{"name":"UpdateFetchResult","kind":4194304,"kindString":"Type alias","comment":{"shortText":"The result of fetching a new update."},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"isNew","kind":1024,"kindString":"Property","comment":{"shortText":"`true` if the fetched bundle is new (that is, a different version than what's currently\nrunning), `false` otherwise."},"type":{"type":"intrinsic","name":"boolean"}},{"name":"manifest","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"If `isNew` is `true`, the manifest of the newly downloaded update, and `undefined` otherwise."},"type":{"type":"reference","name":"Manifest"}}]}}},{"name":"isEmergencyLaunch","kind":32,"kindString":"Variable","comment":{"shortText":"`expo-updates` does its very best to always launch monotonically newer versions of your app so\nyou don't need to worry about backwards compatibility when you put out an update. In very rare\ncases, it's possible that `expo-updates` may need to fall back to the update that's embedded in\nthe app binary, even after newer updates have been downloaded and run (an \"emergency launch\").\nThis boolean will be `true` if the app is launching under this fallback mechanism and `false`\notherwise. If you are concerned about backwards compatibility of future updates to your app, you\ncan use this constant to provide special behavior for this rare case."},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"..."},{"name":"manifest","kind":32,"kindString":"Variable","comment":{"shortText":"If `expo-updates` is enabled, this is the\n[manifest](/guides/how-expo-works#expo-development-server) object for the update that's currently\nrunning.","text":"In development mode, or any other environment in which `expo-updates` is disabled, this object is\nempty.\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Manifest"}],"name":"Partial"},"defaultValue":"..."},{"name":"releaseChannel","kind":32,"kindString":"Variable","comment":{"shortText":"The name of the release channel currently configured in this standalone or bare app when using\nclassic updates. When using Expo Updates, the value of this field is always `\"default\"`."},"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"name":"updateId","kind":32,"kindString":"Variable","comment":{"shortText":"The UUID that uniquely identifies the currently running update if `expo-updates` is enabled. The\nUUID is represented in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`) and\nwill always use lowercase letters. In development mode, or any other environment in which\n`expo-updates` is disabled, this value is `null`."},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]},"defaultValue":"..."},{"name":"addListener","kind":64,"kindString":"Function","signatures":[{"name":"addListener","kind":4096,"kindString":"Call signature","comment":{"shortText":"Adds a callback to be invoked when updates-related events occur (such as upon the initial app\nload) due to auto-update settings chosen at build-time.","returns":"An `EventSubscription` object on which you can call `remove()` to unsubscribe the\nlistener.\n"},"parameters":[{"name":"listener","kind":32768,"kindString":"Parameter","comment":{"shortText":"A function that will be invoked with an [`UpdateEvent`](#updateevent) instance\nand should not return any value."},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","parameters":[{"name":"event","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"UpdateEvent"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"reference","name":"EventSubscription"}}]},{"name":"checkForUpdateAsync","kind":64,"kindString":"Function","signatures":[{"name":"checkForUpdateAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Checks the server to see if a newly deployed update to your project is available. Does not\nactually download the update. This method cannot be used in development mode, and the returned\npromise will be rejected if you try to do so.","returns":"A promise that fulfills with an [`UpdateCheckResult`](#updatecheckresult) object.\n\nThe promise rejects if the app is in development mode, or if there is an unexpected error or\ntimeout communicating with the server.\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"UpdateCheckResult"}],"name":"Promise"}}]},{"name":"fetchUpdateAsync","kind":64,"kindString":"Function","signatures":[{"name":"fetchUpdateAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Downloads the most recently deployed update to your project from server to the device's local\nstorage. This method cannot be used in development mode, and the returned promise will be\nrejected if you try to do so.","returns":"A promise that fulfills with an [`UpdateFetchResult`](#updatefetchresult) object.\n\nThe promise rejects if the app is in development mode, or if there is an unexpected error or\ntimeout communicating with the server.\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"UpdateFetchResult"}],"name":"Promise"}}]},{"name":"reloadAsync","kind":64,"kindString":"Function","signatures":[{"name":"reloadAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Instructs the app to reload using the most recently downloaded version. This is useful for\ntriggering a newly downloaded update to launch without the user needing to manually restart the\napp.","text":"It is not recommended to place any meaningful logic after a call to `await\nUpdates.reloadAsync()`. This is because the promise is resolved after verifying that the app can\nbe reloaded, and immediately before posting an asynchronous task to the main thread to actually\nreload the app. It is unsafe to make any assumptions about whether any more JS code will be\nexecuted after the `Updates.reloadAsync` method call resolves, since that depends on the OS and\nthe state of the native module and main threads.\n\nThis method cannot be used in development mode, and the returned promise will be rejected if you\ntry to do so.\n","returns":"A promise that fulfills right before the reload instruction is sent to the JS runtime, or\nrejects if it cannot find a reference to the JS runtime. If the promise is rejected in production\nmode, it most likely means you have installed the module incorrectly. Double check you've\nfollowed the installation instructions. In particular, on iOS ensure that you set the `bridge`\nproperty on `EXUpdatesAppController` with a pointer to the `RCTBridge` you want to reload, and on\nAndroid ensure you either call `UpdatesController.initialize` with the instance of\n`ReactApplication` you want to reload, or call `UpdatesController.setReactNativeHost` with the\nproper instance of `ReactNativeHost`.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]}]}