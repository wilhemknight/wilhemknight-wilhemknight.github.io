{"name":"expo-crypto","kind":1,"kindString":"Project","originalName":"","children":[{"name":"CryptoDigestAlgorithm","kind":8,"kindString":"Enumeration","comment":{"shortText":"[`Cryptographic hash function`](https://developer.mozilla.org/en-US/docs/Glossary/Cryptographic_hash_function)"},"children":[{"name":"MD2","kind":16,"kindString":"Enumeration member","comment":{"shortText":"`128` bits.","tags":[{"tag":"platform","text":"ios\n"}]},"defaultValue":"\"MD2\""},{"name":"MD4","kind":16,"kindString":"Enumeration member","comment":{"shortText":"`128` bits.","tags":[{"tag":"platform","text":"ios\n"}]},"defaultValue":"\"MD4\""},{"name":"MD5","kind":16,"kindString":"Enumeration member","comment":{"shortText":"`128` bits.","tags":[{"tag":"platform","text":"android"},{"tag":"platform","text":"ios\n"}]},"defaultValue":"\"MD5\""},{"name":"SHA1","kind":16,"kindString":"Enumeration member","comment":{"shortText":"`160` bits."},"defaultValue":"\"SHA-1\""},{"name":"SHA256","kind":16,"kindString":"Enumeration member","comment":{"shortText":"`256` bits. Collision Resistant."},"defaultValue":"\"SHA-256\""},{"name":"SHA384","kind":16,"kindString":"Enumeration member","comment":{"shortText":"`384` bits. Collision Resistant."},"defaultValue":"\"SHA-384\""},{"name":"SHA512","kind":16,"kindString":"Enumeration member","comment":{"shortText":"`512` bits. Collision Resistant."},"defaultValue":"\"SHA-512\""}]},{"name":"CryptoEncoding","kind":8,"kindString":"Enumeration","children":[{"name":"BASE64","kind":16,"kindString":"Enumeration member","comment":{"shortText":"Has trailing padding. Does not wrap lines. Does not have a trailing newline."},"defaultValue":"\"base64\""},{"name":"HEX","kind":16,"kindString":"Enumeration member","defaultValue":"\"hex\""}]},{"name":"CryptoDigestOptions","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"encoding","kind":1024,"kindString":"Property","comment":{"shortText":"Format the digest is returned in."},"type":{"type":"reference","name":"CryptoEncoding"}}]}}},{"name":"Digest","kind":4194304,"kindString":"Type alias","type":{"type":"intrinsic","name":"string"}},{"name":"digestStringAsync","kind":64,"kindString":"Function","signatures":[{"name":"digestStringAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"The `digestStringAsync()` method of `Crypto` generates a digest of the supplied `data` string with the provided digest `algorithm`.\nA digest is a short fixed-length value derived from some variable-length input. **Cryptographic digests** should exhibit _collision-resistance_,\nmeaning that it's very difficult to generate multiple inputs that have equal digest values.\nYou can specify the returned string format as one of `CryptoEncoding`. By default, the resolved value will be formatted as a `HEX` string.\nOn web, this method can only be called from a secure origin (https) otherwise an error will be thrown.","returns":"Return a Promise which fulfills with a value representing the hashed input.\n","tags":[{"tag":"example","text":"\n```ts\nconst digest = await Crypto.digestStringAsync(\n  Crypto.CryptoDigestAlgorithm.SHA512,\n  'ðŸ¥“ Easy to Digest! ðŸ’™'\n);\n```\n"}]},"parameters":[{"name":"algorithm","kind":32768,"kindString":"Parameter","comment":{"shortText":"The cryptographic hash function to use to transform a block of data into a fixed-size output."},"type":{"type":"reference","name":"CryptoDigestAlgorithm"}},{"name":"data","kind":32768,"kindString":"Parameter","comment":{"shortText":"The value that will be used to generate a digest."},"type":{"type":"intrinsic","name":"string"}},{"name":"options","kind":32768,"kindString":"Parameter","comment":{"shortText":"Format of the digest string. Defaults to: `CryptoDigestOptions.HEX`."},"type":{"type":"reference","name":"CryptoDigestOptions"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Digest"}],"name":"Promise"}}]}]}