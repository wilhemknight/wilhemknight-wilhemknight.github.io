{"name":"expo-screen-capture","kind":1,"kindString":"Project","originalName":"","children":[{"name":"Subscription","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"remove","kind":2048,"kindString":"Method","signatures":[{"name":"remove","kind":4096,"kindString":"Call signature","comment":{"shortText":"A method to unsubscribe the listener."},"type":{"type":"intrinsic","name":"void"}}]}]}}},{"name":"addScreenshotListener","kind":64,"kindString":"Function","signatures":[{"name":"addScreenshotListener","kind":4096,"kindString":"Call signature","comment":{"shortText":"Adds a listener that will fire whenever the user takes a screenshot while the app is foregrounded.\nOn Android, this method requires the `READ_EXTERNAL_STORAGE` permission. You can request this\nwith [`MediaLibrary.requestPermissionsAsync()`](./media-library/#medialibraryrequestpermissionsasync).","returns":"A `Subscription` object that you can use to unregister the listener, either by calling\n`remove()` or passing it to `removeScreenshotListener`.\n"},"parameters":[{"name":"listener","kind":32768,"kindString":"Parameter","comment":{"shortText":"The function that will be executed when the user takes a screenshot.\nThis function accepts no arguments.\n"},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"reference","name":"Subscription"}}]},{"name":"allowScreenCaptureAsync","kind":64,"kindString":"Function","signatures":[{"name":"allowScreenCaptureAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Re-allows the user to screen record or screenshot your app. If you haven't called\n`preventScreenCapture()` yet, this method does nothing."},"parameters":[{"name":"key","kind":32768,"kindString":"Parameter","comment":{"shortText":"This will prevent multiple instances of the `preventScreenCaptureAsync` and\n`allowScreenCaptureAsync` methods from conflicting with each other. If provided, the value must\nbe the same as the key passed to `preventScreenCaptureAsync` in order to re-enable screen\ncapturing. Defaults to 'default'.\n"},"type":{"type":"intrinsic","name":"string"},"defaultValue":"'default'"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]},{"name":"isAvailableAsync","kind":64,"kindString":"Function","signatures":[{"name":"isAvailableAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Returns whether the Screen Capture API is available on the current device.","returns":"A promise that resolves to a `boolean` indicating whether the Screen Capture API is available on the current\ndevice. Currently, this resolves to `true` on Android and iOS only.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise"}}]},{"name":"preventScreenCaptureAsync","kind":64,"kindString":"Function","signatures":[{"name":"preventScreenCaptureAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Prevents screenshots and screen recordings until `allowScreenCaptureAsync` is called or the app is restarted. If you are\nalready preventing screen capture, this method does nothing (unless you pass a new and unique `key`).","text":"> Please note that on iOS, this will only prevent screen recordings, and is only available on\niOS 11 and newer. On older iOS versions, this method does nothing.\n"},"parameters":[{"name":"key","kind":32768,"kindString":"Parameter","comment":{"shortText":"Optional. If provided, this will help prevent multiple instances of the `preventScreenCaptureAsync`\nand `allowScreenCaptureAsync` methods (and `usePreventScreenCapture` hook) from conflicting with each other.\nWhen using multiple keys, you'll have to re-allow each one in order to re-enable screen capturing.\nDefaults to `'default'`.\n"},"type":{"type":"intrinsic","name":"string"},"defaultValue":"'default'"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]},{"name":"removeScreenshotListener","kind":64,"kindString":"Function","signatures":[{"name":"removeScreenshotListener","kind":4096,"kindString":"Call signature","comment":{"shortText":"Removes the subscription you provide, so that you are no longer listening for screenshots.","text":"If you prefer, you can also call `remove()` on that `Subscription` object, for example:\n\n```ts\nlet mySubscription = addScreenshotListener(() => {\n  console.log(\"You took a screenshot!\");\n});\n...\nmySubscription.remove();\n// OR\nremoveScreenshotListener(mySubscription);\n```\n"},"parameters":[{"name":"subscription","kind":32768,"kindString":"Parameter","comment":{"shortText":"Subscription returned by `addScreenshotListener`.\n"},"type":{"type":"reference","name":"Subscription"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"usePreventScreenCapture","kind":64,"kindString":"Function","signatures":[{"name":"usePreventScreenCapture","kind":4096,"kindString":"Call signature","comment":{"shortText":"A React hook to prevent screen capturing for as long as the owner component is mounted."},"parameters":[{"name":"key","kind":32768,"kindString":"Parameter","type":{"type":"intrinsic","name":"string"},"defaultValue":"'default'"}],"type":{"type":"intrinsic","name":"void"}}]}]}