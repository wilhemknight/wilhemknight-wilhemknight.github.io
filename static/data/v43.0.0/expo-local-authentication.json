{"name":"expo-local-authentication","kind":1,"kindString":"Project","originalName":"","children":[{"name":"AuthenticationType","kind":8,"kindString":"Enumeration","children":[{"name":"FACIAL_RECOGNITION","kind":16,"kindString":"Enumeration member","comment":{"shortText":"Indicates facial recognition support."},"defaultValue":"2"},{"name":"FINGERPRINT","kind":16,"kindString":"Enumeration member","comment":{"shortText":"Indicates fingerprint support."},"defaultValue":"1"},{"name":"IRIS","kind":16,"kindString":"Enumeration member","comment":{"shortText":"__Android-only.__ Indicates iris recognition support."},"defaultValue":"3"}]},{"name":"SecurityLevel","kind":8,"kindString":"Enumeration","children":[{"name":"BIOMETRIC","kind":16,"kindString":"Enumeration member","comment":{"shortText":"Indicates biometric authentication."},"defaultValue":"2"},{"name":"NONE","kind":16,"kindString":"Enumeration member","comment":{"shortText":"Indicates no enrolled authentication."},"defaultValue":"0"},{"name":"SECRET","kind":16,"kindString":"Enumeration member","comment":{"shortText":"Indicates non-biometric authentication (e.g. PIN, Pattern)."},"defaultValue":"1"}]},{"name":"LocalAuthenticationOptions","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"cancelLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allows to customize the default `Cancel` label shown."},"type":{"type":"intrinsic","name":"string"}},{"name":"disableDeviceFallback","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"After several failed attempts the system will fallback to the device passcode. This setting\nallows you to disable this option and instead handle the fallback yourself. This can be\npreferable in certain custom authentication workflows. This behaviour maps to using the iOS\n[LAPolicyDeviceOwnerAuthenticationWithBiometrics](https://developer.apple.com/documentation/localauthentication/lapolicy/lapolicydeviceownerauthenticationwithbiometrics?language=objc)\npolicy rather than the [LAPolicyDeviceOwnerAuthentication](https://developer.apple.com/documentation/localauthentication/lapolicy/lapolicydeviceownerauthentication?language=objc)\npolicy. Defaults to `false`."},"type":{"type":"intrinsic","name":"boolean"}},{"name":"fallbackLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":" **iOS only.** Allows to customize the default `Use Passcode` label shown after several failed\n authentication attempts. Setting this option to an empty string disables this button from\n showing in the prompt."},"type":{"type":"intrinsic","name":"string"}},{"name":"promptMessage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A message that is shown alongside the TouchID or FaceID prompt."},"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"LocalAuthenticationResult","kind":4194304,"kindString":"Type alias","type":{"type":"union","types":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"success","kind":1024,"kindString":"Property","type":{"type":"literal","value":true}}]}},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"error","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"string"}},{"name":"success","kind":1024,"kindString":"Property","type":{"type":"literal","value":false}},{"name":"warning","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}]}}]}},{"name":"authenticateAsync","kind":64,"kindString":"Function","signatures":[{"name":"authenticateAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Attempts to authenticate via Fingerprint/TouchID (or FaceID if available on the device).\n> **Note:** Apple requires apps which use FaceID to provide a description of why they use this API.\nIf you try to use FaceID on an iPhone with FaceID without providing `infoPlist.NSFaceIDUsageDescription`\nin `app.json`, the module will authenticate using device passcode. For more information about\nusage descriptions on iOS, see [Deploying to App Stores](/distribution/app-stores#system-permissions-dialogs-on-ios).","returns":"Returns a promise which fulfils with [`LocalAuthenticationResult`](#localauthenticationresult).\n"},"parameters":[{"name":"options","kind":32768,"kindString":"Parameter","comment":{},"type":{"type":"reference","name":"LocalAuthenticationOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"LocalAuthenticationResult"}],"name":"Promise"}}]},{"name":"cancelAuthenticate","kind":64,"kindString":"Function","signatures":[{"name":"cancelAuthenticate","kind":4096,"kindString":"Call signature","comment":{"shortText":"**(Android Only)** Cancels authentication flow."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]},{"name":"getEnrolledLevelAsync","kind":64,"kindString":"Function","signatures":[{"name":"getEnrolledLevelAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Determine what kind of authentication is enrolled on the device.","returns":"Returns a promise which fulfils with [`SecurityLevel`](#securitylevel).\n> **Note:** On Android devices prior to M, `SECRET` can be returned if only the SIM lock has been\nenrolled, which is not the method that [`authenticateAsync`](#localauthenticationauthenticateasyncoptions)\nprompts.\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"SecurityLevel"}],"name":"Promise"}}]},{"name":"hasHardwareAsync","kind":64,"kindString":"Function","signatures":[{"name":"hasHardwareAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Determine whether a face or fingerprint scanner is available on the device.","returns":"Returns a promise which fulfils with a `boolean` value indicating whether a face or\nfingerprint scanner is available on this device.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise"}}]},{"name":"isEnrolledAsync","kind":64,"kindString":"Function","signatures":[{"name":"isEnrolledAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Determine whether the device has saved fingerprints or facial data to use for authentication.","returns":"Returns a promise which fulfils to `boolean` value indicating whether the device has\nsaved fingerprints or facial data for authentication.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise"}}]},{"name":"supportedAuthenticationTypesAsync","kind":64,"kindString":"Function","signatures":[{"name":"supportedAuthenticationTypesAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Determine what kinds of authentications are available on the device.","returns":"Returns a promise which fulfils to an array containing [`AuthenticationType`s](#authenticationtype).\n\nDevices can support multiple authentication methods- i.e. `[1,2]` means the device supports both\nfingerprint and facial recognition. If none are supported, this method returns an empty array.\n"},"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"AuthenticationType"}}],"name":"Promise"}}]}]}