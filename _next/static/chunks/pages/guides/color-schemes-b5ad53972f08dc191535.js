_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[137],{"7ljp":function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n("q1tI"),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),s=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"===typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,m=u["".concat(i,".").concat(d)]||u[d]||b[d]||a;return n?o.a.createElement(m,c(c({ref:t},p),{},{components:n})):o.a.createElement(m,c({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"===typeof e?e:r,i[1]=c;for(var p=2;p<a;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},D3uB:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return l})),n.d(t,"headings",(function(){return p})),n.d(t,"default",(function(){return u}));var r=n("HALo"),o=n("dhJC"),a=(n("q1tI"),n("7ljp")),i=n("3iwL"),c=["components"],l={title:"Light and Dark modes"},p=[{depth:2,type:"text",title:"Configuration"},{depth:3,type:"text",title:"Managed projects"},{depth:3,type:"text",title:"Bare projects"},{depth:4,type:"text",title:"iOS configuration"},{depth:4,type:"text",title:"Android configuration"},{depth:2,type:"text",title:"Detecting the color scheme"},{depth:2,type:"text",title:"Example"},{depth:2,type:"text",title:"Tips"}],s={meta:l,headings:p};function u(e){var t=e.components,n=Object(o.a)(e,c);return Object(a.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Regardless of whether you are personally on team light or team dark, it's becoming increasingly common for apps to support these two color schemes. This guide explains how you can do that."),Object(a.b)(i.a,{file:"guides/color-schemes.mp4",spaceAfter:30,mdxType:"Video"}),Object(a.b)("h2",{id:"configuration"},"Configuration"),Object(a.b)("p",null,"Both managed and bare projects for iOS and Android require additional configuration to support switching between light and dark mode. No additional configuration is required for web."),Object(a.b)("h3",{id:"managed-projects"},"Managed projects"),Object(a.b)("p",null,"Configure your supported appearance styles in ",Object(a.b)("strong",{parentName:"p"},"app.json")," / ",Object(a.b)("strong",{parentName:"p"},"app.config.js")," with the ",Object(a.b)("inlineCode",{parentName:"p"},"userInterfaceStyle")," key. You can also configure specific platform to support different appearance styles by setting either ",Object(a.b)("inlineCode",{parentName:"p"},"android.userInterfaceStyle")," or ",Object(a.b)("inlineCode",{parentName:"p"},"ios.userInterfaceStyle")," to preferred value."),Object(a.b)("p",null,"The available options are: ",Object(a.b)("inlineCode",{parentName:"p"},"automatic")," (follow system appearance settings and notify about any change user makes), ",Object(a.b)("inlineCode",{parentName:"p"},"light")," (restrict app to support light theme only), and ",Object(a.b)("inlineCode",{parentName:"p"},"dark")," (restrict app to support dark theme only). If this key is absent, the app will default to the ",Object(a.b)("inlineCode",{parentName:"p"},"light")," style."),Object(a.b)("p",null,"Example ",Object(a.b)("strong",{parentName:"p"},"app.json")," configuration:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n  "expo": {\n    "userInterfaceStyle": "automatic"\n  }\n}\n')),Object(a.b)("p",null,"In EAS Build and custom development builds you'll need to install the native module ",Object(a.b)("inlineCode",{parentName:"p"},"expo-system-ui")," otherwise the ",Object(a.b)("inlineCode",{parentName:"p"},"userInterfaceStyle")," property will be ignored. Running ",Object(a.b)("inlineCode",{parentName:"p"},"expo config --type introspect")," will warn if the project is misconfigured:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"\xbb android: userInterfaceStyle: Install expo-system-ui in your project to enable this feature.\n")),Object(a.b)("h3",{id:"bare-projects"},"Bare projects"),Object(a.b)("h4",{id:"ios-configuration"},"iOS configuration"),Object(a.b)("p",null,"You can configure supported styles with the ",Object(a.b)("a",{parentName:"p",href:"https://developer.apple.com/documentation/bundleresources/information_property_list/uiuserinterfacestyle"},"UIUserInterfaceStyle")," key in your app ",Object(a.b)("strong",{parentName:"p"},"Info.plist"),". Use ",Object(a.b)("inlineCode",{parentName:"p"},"Automatic")," to support both light and dark modes."),Object(a.b)("h4",{id:"android-configuration"},"Android configuration"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Appearance locking requires ",Object(a.b)("inlineCode",{parentName:"p"},"react-native@0.63.3")," to work correctly.")),Object(a.b)("p",null,"Ensure that the ",Object(a.b)("inlineCode",{parentName:"p"},"uiMode")," flag is present on your ",Object(a.b)("inlineCode",{parentName:"p"},"MainActivity")," (and any other activities where this behavior is desired) in ",Object(a.b)("strong",{parentName:"p"},"AndroidManifest.xml"),":"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-xml"},'<activity\n...\nandroid:configChanges="keyboard|keyboardHidden|orientation|screenSize|uiMode">\n')),Object(a.b)("p",null,"Implement the ",Object(a.b)("inlineCode",{parentName:"p"},"onConfigurationChanged")," method in ",Object(a.b)("strong",{parentName:"p"},"MainActivity.java")," (",Object(a.b)("inlineCode",{parentName:"p"},"react-native@0.63.3")," don't need this):"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},'import android.content.Intent; // <--- import\nimport android.content.res.Configuration; // <--- import\npublic class MainActivity extends ReactActivity {\n  ......\n  @Override\n  public void onConfigurationChanged(Configuration newConfig) {\n    super.onConfigurationChanged(newConfig);\n    Intent intent = new Intent("onConfigurationChanged");\n    intent.putExtra("newConfig", newConfig);\n    sendBroadcast(intent);\n  }\n  ......\n}\n')),Object(a.b)("h2",{id:"detecting-the-color-scheme"},"Detecting the color scheme"),Object(a.b)("p",null,"To detect the color scheme in our application, we can use ",Object(a.b)("inlineCode",{parentName:"p"},"Appearance")," and/or ",Object(a.b)("inlineCode",{parentName:"p"},"useColorScheme")," from ",Object(a.b)("inlineCode",{parentName:"p"},"react-native"),":"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"import { Appearance, useColorScheme } from 'react-native';\n")),Object(a.b)("p",null,"You will probably want to use the ",Object(a.b)("inlineCode",{parentName:"p"},"useColorScheme()")," hook:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"function MyComponent() {\n  let colorScheme = useColorScheme();\n\n  if (colorScheme === 'dark') {\n    // render some dark thing\n  } else {\n    // render some light thing\n  }\n}\n")),Object(a.b)("p",null,"In some cases, you may find it helpful to get the current color scheme imperatively with ",Object(a.b)("inlineCode",{parentName:"p"},"Appearance.getColorScheme()")," and/or listen to changes with ",Object(a.b)("inlineCode",{parentName:"p"},"Appearance.addChangeListener"),". ",Object(a.b)("a",{parentName:"p",href:"/../../../../../../versions/latest/react-native/appearance/"},"Read more"),"."),Object(a.b)("h2",{id:"example"},"Example"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Don't forget to configure your project to support automatic color scheme as described above in ",Object(a.b)("a",{parentName:"p",href:"/guides/color-schemes/#configuration"},"Configuration"),".")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\nimport { Text, StyleSheet, View, useColorScheme } from 'react-native';\nimport { StatusBar } from 'expo-status-bar'; // automatically switches bar style based on theme!\n\nexport default function App() {\n  const colorScheme = useColorScheme();\n\n  const themeTextStyle = colorScheme === 'light' ? styles.lightThemeText : styles.darkThemeText;\n  const themeContainerStyle =\n    colorScheme === 'light' ? styles.lightContainer : styles.darkContainer;\n\n  return (\n    <View style={[styles.container, themeContainerStyle]}>\n      <Text style={[styles.text, themeTextStyle]}>Color scheme: {colorScheme}</Text>\n      <StatusBar />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  lightContainer: {\n    backgroundColor: '#d0d0c0',\n  },\n  darkContainer: {\n    backgroundColor: '#242c40',\n  },\n  lightThemeText: {\n    color: '#242c40',\n  },\n  darkThemeText: {\n    color: '#d0d0c0',\n  },\n});\n")),Object(a.b)("h2",{id:"tips"},"Tips"),Object(a.b)("p",null,"While you're developing, you may want to change your simulator's or device's appearance."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"If working with an iOS emulator locally, you can use the ",Object(a.b)("inlineCode",{parentName:"li"},"command")," + ",Object(a.b)("inlineCode",{parentName:"li"},"shift")," + ",Object(a.b)("inlineCode",{parentName:"li"},"a")," shortcut to toggle between light and dark mode."),Object(a.b)("li",{parentName:"ul"},"If using an Android emulator, you can run ",Object(a.b)("inlineCode",{parentName:"li"},'adb shell "cmd uimode night yes"')," to enable dark mode, and ",Object(a.b)("inlineCode",{parentName:"li"},'adb shell "cmd uimode night no"')," to disable dark mode."),Object(a.b)("li",{parentName:"ul"},"If using a real device or an Android emulator, you can toggle the system dark mode setting in the device's settings."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"https://snack.expo.dev"},"Snack")," is locked to light mode.")))}u.isMDXComponent=!0},HALo:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},Iqt6:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/color-schemes",function(){return n("D3uB")}])},dhJC:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}n.d(t,"a",(function(){return r}))}},[["Iqt6",1,0,2,15]]]);