_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[53],{"7ljp":function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return m}));var n=a("q1tI"),i=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var d=i.a.createContext({}),s=function(e){var t=i.a.useContext(d),a=t;return e&&(a="function"===typeof e?e(t):o(o({},t),e)),a},b=function(e){var t=s(e.components);return i.a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},c=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),b=s(a),c=n,m=b["".concat(l,".").concat(c)]||b[c]||u[c]||r;return a?i.a.createElement(m,o(o({ref:t},d),{},{components:a})):i.a.createElement(m,o({ref:t},d))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"===typeof e||n){var r=a.length,l=new Array(r);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"===typeof e?e:n,l[1]=o;for(var d=2;d<r;d++)l[d]=a[d];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,a)}c.displayName="MDXCreateElement"},B5du:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/bare/updating-your-app",function(){return a("RkLH")}])},HALo:function(e,t,a){"use strict";function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}a.d(t,"a",(function(){return n}))},Qetd:function(e,t,a){"use strict";var n=Object.assign.bind(Object);e.exports=n,e.exports.default=e.exports},RkLH:function(e,t,a){"use strict";a.r(t),a.d(t,"meta",(function(){return o})),a.d(t,"headings",(function(){return p})),a.d(t,"default",(function(){return s}));var n=a("HALo"),i=a("dhJC"),r=(a("q1tI"),a("7ljp")),l=["components"],o={title:"Updating your App",sidebar_title:"Updating your App"},p=[{depth:2,type:"text",title:"Setup"},{depth:2,type:"text",title:"Served Update Requirements"},{depth:2,type:"text",title:"Update Compatibility"},{depth:3,type:"text",title:"Runtime Version"},{depth:3,type:"text",title:"Release Channels"},{depth:3,type:"text",title:"Statically Hosted Updates"},{depth:2,type:"text",title:"Embedding Assets"},{depth:2,type:"text",title:"Including Assets in Updates"},{depth:2,type:"text",title:"Configuration Options"},{depth:3,type:"text",title:"Automatic Updates"},{depth:3,type:"text",title:"Manual Updates"}],d={meta:o,headings:p};function s(e){var t=e.components,a=Object(i.a)(e,l);return Object(r.b)("wrapper",Object(n.a)({},d,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," unimodule provides a client-side implementation for loading updates in bare workflow apps. Updates allow you to deploy new JavaScript and assets to existing builds of your app without building a new binary."),Object(r.b)("p",null,"In this guide, an ",Object(r.b)("strong",{parentName:"p"},"update")," refers to a single, atomic update, which may consist of a JavaScript bundle, other assets (such as images or fonts), and metadata about the update."),Object(r.b)("h2",{id:"setup"},"Setup"),Object(r.b)("p",null,"If possible, we highly recommend starting with a boilerplate project that has the ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," library already installed. Running ",Object(r.b)("inlineCode",{parentName:"p"},"expo init")," and choosing either of the bare workflow templates will give you such a template."),Object(r.b)("p",null,"To install the ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," module in an existing bare workflow app, follow the ",Object(r.b)("a",{parentName:"p",href:"https://github.com/expo/expo/tree/main/packages/expo-updates/README.md#installation"},"installation instructions in the package README"),"."),Object(r.b)("p",null,"Additionally, you'll need to host your updates and their respective assets (JavaScript bundles, images, fonts, etc.) on a server somewhere that deployed client apps can access. ",Object(r.b)("inlineCode",{parentName:"p"},"expo-cli")," provides a couple of easy options for this: (1) ",Object(r.b)("inlineCode",{parentName:"p"},"expo export")," creates prebuilt update packages that you can upload to any static hosting site (e.g. GitHub Pages), and (2) ",Object(r.b)("inlineCode",{parentName:"p"},"expo publish")," packages and deploys your updates to Expo's updates service, which is part of the services we offer."),Object(r.b)("p",null,"You can also run your own server to host your updates, provided it conforms to the protocol ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," expects. You can read more about these requirements below."),Object(r.b)("h2",{id:"served-update-requirements"},"Served Update Requirements"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"If you're using ",Object(r.b)("inlineCode",{parentName:"p"},"expo export")," or ",Object(r.b)("inlineCode",{parentName:"p"},"expo publish"),", you're welcome to skip this section as it will be taken care of for you!")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," implementation requires a single URL (provided at build-time) to which it will make requests for new updates. These requests may happen when users launch your app in production (depending on your app's configuration settings) and when your app calls ",Object(r.b)("a",{parentName:"p",href:"/versions/latest/sdk/updates/#updatesfetchupdateasync"},Object(r.b)("inlineCode",{parentName:"a"},"Updates.fetchUpdateAsync()")),". Requests will be sent with the following headers:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"'Accept': 'application/expo+json,application/json',\n'Expo-Platform': // either 'ios' or 'android',\n'Expo-Release-Channel': // Release Channel value, if configured,\n'Expo-Runtime-Version': // Runtime Version value, if configured,\n'Expo-SDK-Version': // SDK Version value, if configured,\n")),Object(r.b)("p",null,"The response to these requests should be a manifest JSON object with metadata about the latest update that's compatible with the requesting app binary. (More on compatibility below.) The manifest should have at least the following fields:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Key"),Object(r.b)("th",{parentName:"tr",align:null},"Type"),Object(r.b)("th",{parentName:"tr",align:null},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"releaseId")),Object(r.b)("td",{parentName:"tr",align:null},"string"),Object(r.b)("td",{parentName:"tr",align:null},"A UUID uniquely identifying this update.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"commitTime")),Object(r.b)("td",{parentName:"tr",align:null},"string"),Object(r.b)("td",{parentName:"tr",align:null},"A JavaScript Date string representing the time this update was committed/published. This is used to compare two updates to determine which is newest.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"runtimeVersion")),Object(r.b)("td",{parentName:"tr",align:null},"object"),Object(r.b)("td",{parentName:"tr",align:null},"An object with keys ",Object(r.b)("inlineCode",{parentName:"td"},"ios")," and ",Object(r.b)("inlineCode",{parentName:"td"},"android")," whose corresponding values are the ",Object(r.b)("a",{parentName:"td",href:"/bare/updating-your-app/#runtime-version"},"Runtime Version")," this update is compatible with. Required only if ",Object(r.b)("inlineCode",{parentName:"td"},"sdkVersion")," is not provided.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"sdkVersion")),Object(r.b)("td",{parentName:"tr",align:null},"string"),Object(r.b)("td",{parentName:"tr",align:null},"The Expo SDK version this update uses. Required only if ",Object(r.b)("inlineCode",{parentName:"td"},"runtimeVersion")," is not provided.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"bundleUrl")),Object(r.b)("td",{parentName:"tr",align:null},"string"),Object(r.b)("td",{parentName:"tr",align:null},"A URL pointing to the JavaScript bundle this metadata represents.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"bundledAssets")),Object(r.b)("td",{parentName:"tr",align:null},"array"),Object(r.b)("td",{parentName:"tr",align:null},"An array of asset filenames to download as part of this update.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"assetUrlOverride")),Object(r.b)("td",{parentName:"tr",align:null},"string"),Object(r.b)("td",{parentName:"tr",align:null},"Base URL from which to resolve all of the filenames listed in ",Object(r.b)("inlineCode",{parentName:"td"},"bundledAssets"),".")))),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," assumes that URLs for assets and JavaScript bundles are immutable; that is, if it has already downloaded an asset or bundle at a given URL, it will not attempt to re-download. Therefore, if you change any assets in your updates, you ",Object(r.b)("strong",{parentName:"p"},"must")," host them at a different URL."),Object(r.b)("p",null,"If you use ",Object(r.b)("inlineCode",{parentName:"p"},"expo export")," to create a prebuilt package of your update, the manifests in ",Object(r.b)("inlineCode",{parentName:"p"},"ios-index.json")," and ",Object(r.b)("inlineCode",{parentName:"p"},"android-index.json")," satisfy these requirements. Expo's update service, which you publish to if you use ",Object(r.b)("inlineCode",{parentName:"p"},"expo publish"),", dynamically creates these manifest objects upon each update request."),Object(r.b)("h2",{id:"update-compatibility"},"Update Compatibility"),Object(r.b)("p",null,"A critical consideration with updates is compatibility between the JavaScript bundle and the native runtime (i.e. the native modules present in a given binary and the methods they export). To illustrate, consider the following example:"),Object(r.b)("p",null,"Say you have an existing build, build A, of your app running in production. Build A runs JavaScript bundle version 1 and everything works smoothly. In the next version of your app, you need some new functionality, so in development you install a new native module like ",Object(r.b)("inlineCode",{parentName:"p"},"expo-media-library"),", and use some of its functions. You create build B of your app which includes the ",Object(r.b)("inlineCode",{parentName:"p"},"MediaLibrary")," native module. Build B runs JavaScript bundle version 2 which calls ",Object(r.b)("inlineCode",{parentName:"p"},"MediaLibrary.getAlbumsAsync()"),", and this works."),Object(r.b)("p",null,"However, if build A of your app fetches JavaScript version 2 as an update and tries to run it, it will error on the ",Object(r.b)("inlineCode",{parentName:"p"},"MediaLibrary.getAlbumsAsync()")," method call because the ",Object(r.b)("inlineCode",{parentName:"p"},"MediaLibrary")," native module is not present in build A. If your JavaScript doesn't catch this error, it will propagate and your app will crash, rendering JavaScript version 2 unusable on build A of your app."),Object(r.b)("p",null,"We need some way, therefore, of preventing JavaScript version 2 from being deployed to build A - or, in general, controlling which updates are deployed to specific builds of your app. ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," provides two ways to control this: Runtime Version and Release Channels."),Object(r.b)("h3",{id:"runtime-version"},"Runtime Version"),Object(r.b)("p",null,"Updates hosted on your own server can make use of a concept called Runtime Version. Runtime Version represents a versioning scheme for the native-JavaScript interface, or the native modules and the methods they export. In other words, anytime you make a change to your native module layer, such as adding, removing, or updating a native module, you would increment the Runtime Version number."),Object(r.b)("p",null,"The Runtime Version of a particular binary should be configured at build time (see ",Object(r.b)("a",{parentName:"p",href:"/bare/updating-your-app/#configuration-options"},"Configuration Options")," below). The configured Runtime Version will be included in the header of every update request sent from that binary. The server should use this header to select an appropriate update to serve in response."),Object(r.b)("p",null,"The Runtime Version expected by a given update must also be provided as a field (",Object(r.b)("inlineCode",{parentName:"p"},"runtimeVersion"),") in the manifest returned to ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates"),". ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," keeps track of the Runtime Version of all updates it has downloaded; this way, if a user updates their app binary through the App Store, it will not attempt to run a previously downloaded and newly incompatible update."),Object(r.b)("h3",{id:"release-channels"},"Release Channels"),Object(r.b)("p",null,"Because the current implementation of the Expo updates service relies heavily on SDK version (a managed-workflow concept), if you're using ",Object(r.b)("inlineCode",{parentName:"p"},"expo publish")," you cannot yet use Runtime Version to manage compatibility of your updates and binaries. Instead, you can use ",Object(r.b)("a",{parentName:"p",href:"/distribution/release-channels/"},"release channels"),". A typical workflow would be to create a new release channel for each new binary you build (or at least every new binary with an incompatible change in the native-JavaScript interface) by publishing to that new release channel with ",Object(r.b)("inlineCode",{parentName:"p"},"expo publish --release-channel <channel-name>"),". After creating a build with this release channel name configured, you can continue to publish future updates to this same release channel as long as they remain compatible with that build. Only builds that were configured to use that release channel will receive those updates."),Object(r.b)("h3",{id:"statically-hosted-updates"},"Statically Hosted Updates"),Object(r.b)("p",null,"Since headers sent in requests by ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," do not affect statically hosted updates (such as update packages created by ",Object(r.b)("inlineCode",{parentName:"p"},"expo export"),"), you must host incompatible updates at different static URLs in order to control compatibility."),Object(r.b)("h2",{id:"embedding-assets"},"Embedding Assets"),Object(r.b)("p",null,"In addition to loading updates from remote servers, apps with ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," installed also include the necessary capability to load updates embedded in the app binary. This is critical to ensure that your app can launch offline for all users immediately upon installation, without needing an internet connection."),Object(r.b)("p",null,"When you make a release build of your app, the build process will bundle your JavaScript source code into a minified bundle and embed this in the binary, along with any other assets your app imports (with ",Object(r.b)("inlineCode",{parentName:"p"},"require")," or ",Object(r.b)("inlineCode",{parentName:"p"},"import")," or used in ",Object(r.b)("strong",{parentName:"p"},"app.json"),"). ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," includes an extra script on each platform to embed some additional metadata about the embedded assets -- namely, a minimal manifest JSON object for the update."),Object(r.b)("h2",{id:"including-assets-in-updates"},"Including Assets in Updates"),Object(r.b)("p",null,"Assets that you import in your JavaScript source can also be atomically downloaded as part of a published update. ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates"),' will not consider an update "ready" and will not launch the update unless it has downloaded all required assets.'),Object(r.b)("p",null,"If you use ",Object(r.b)("inlineCode",{parentName:"p"},"expo-asset")," in your project (included by default if you have the ",Object(r.b)("inlineCode",{parentName:"p"},"expo")," package installed), you can control which imported assets will be included as part of this atomic update by using the ",Object(r.b)("a",{parentName:"p",href:"/workflow/configuration/"},"assetBundlePatterns")," key in ",Object(r.b)("strong",{parentName:"p"},"app.json")," to provide a list of paths in your project directory:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'"assetBundlePatterns": [\n  "**/*" // or "assets/images/*", etc.\n],\n')),Object(r.b)("p",null,"Assets with paths matching the given patterns will be pre-downloaded by clients before the update that uses them will launch. If you have an asset that should be lazily downloaded at runtime rather than before your JavaScript is evaluated, you can use ",Object(r.b)("inlineCode",{parentName:"p"},"assetBundlePatterns")," to exclude it while still importing it in your JavaScript source."),Object(r.b)("p",null,"Note that in order to use ",Object(r.b)("inlineCode",{parentName:"p"},"expo-asset")," successfully, you must use the ",Object(r.b)("inlineCode",{parentName:"p"},"--assetPlugins")," option to provide the Metro bundler with the ",Object(r.b)("inlineCode",{parentName:"p"},"node_modules/expo-asset/tools/hashAssetFiles")," plugin when you create your JavaScript bundle. If you use ",Object(r.b)("inlineCode",{parentName:"p"},"expo export")," or ",Object(r.b)("inlineCode",{parentName:"p"},"expo publish")," to create your update, this will be done automatically for you."),Object(r.b)("h2",{id:"configuration-options"},"Configuration Options"),Object(r.b)("p",null,"Some build-time configuration options are available to control various behaviors of the ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," library. You can set the URL where your app is hosted, set compatibility/version information, and choose whether your app should update automatically on launch."),Object(r.b)("p",null,"On iOS, these properties are set as keys in ",Object(r.b)("strong",{parentName:"p"},"Expo.plist")," and on Android as ",Object(r.b)("inlineCode",{parentName:"p"},"meta-data")," tags in ",Object(r.b)("strong",{parentName:"p"},"AndroidManifest.xml"),", adjacent to the tags added during installation."),Object(r.b)("p",null,"On Android, you may also define these properties at runtime by passing a ",Object(r.b)("inlineCode",{parentName:"p"},"Map")," as the second parameter of ",Object(r.b)("inlineCode",{parentName:"p"},"UpdatesController.initialize()"),". If provided, the values in this Map will override any values specified in ",Object(r.b)("strong",{parentName:"p"},"AndroidManifest.xml"),". On iOS, you may set these properties at runtime by calling ",Object(r.b)("inlineCode",{parentName:"p"},"[UpdatesController.sharedInstance setConfiguration:]")," at any point ",Object(r.b)("em",{parentName:"p"},"before")," calling ",Object(r.b)("inlineCode",{parentName:"p"},"start")," or ",Object(r.b)("inlineCode",{parentName:"p"},"startAndShowLaunchScreen"),", and the values in this dictionary will override Expo.plist."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"iOS plist/dictionary key"),Object(r.b)("th",{parentName:"tr",align:null},"Android Map key"),Object(r.b)("th",{parentName:"tr",align:null},"Android meta-data name"),Object(r.b)("th",{parentName:"tr",align:null},"Default"),Object(r.b)("th",{parentName:"tr",align:null},"Required?"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"EXUpdatesEnabled")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"enabled")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"expo.modules.updates.ENABLED")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"true")),Object(r.b)("td",{parentName:"tr",align:null},"\u274c")))),Object(r.b)("p",null,"Whether updates are enabled. Setting this to ",Object(r.b)("inlineCode",{parentName:"p"},"false")," disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"iOS plist/dictionary key"),Object(r.b)("th",{parentName:"tr",align:null},"Android Map key"),Object(r.b)("th",{parentName:"tr",align:null},"Android meta-data name"),Object(r.b)("th",{parentName:"tr",align:null},"Default"),Object(r.b)("th",{parentName:"tr",align:null},"Required?"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"EXUpdatesURL")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"updateUrl")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"expo.modules.updates.EXPO_UPDATE_URL")),Object(r.b)("td",{parentName:"tr",align:null},"(none)"),Object(r.b)("td",{parentName:"tr",align:null},"\u2705")))),Object(r.b)("p",null,"The URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update that tells expo-updates how to fetch the JS bundle and other assets that comprise an update. (Example: for apps published with ",Object(r.b)("inlineCode",{parentName:"p"},"expo publish"),", this URL would be ",Object(r.b)("inlineCode",{parentName:"p"},"https://exp.host/@username/slug"),".)"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"iOS plist/dictionary key"),Object(r.b)("th",{parentName:"tr",align:null},"Android Map key"),Object(r.b)("th",{parentName:"tr",align:null},"Android meta-data name"),Object(r.b)("th",{parentName:"tr",align:null},"Default"),Object(r.b)("th",{parentName:"tr",align:null},"Required?"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"EXUpdatesSDKVersion")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"sdkVersion")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"expo.modules.updates.EXPO_SDK_VERSION")),Object(r.b)("td",{parentName:"tr",align:null},"(none)"),Object(r.b)("td",{parentName:"tr",align:null},"(exactly one of ",Object(r.b)("inlineCode",{parentName:"td"},"sdkVersion")," or ",Object(r.b)("inlineCode",{parentName:"td"},"runtimeVersion")," is required)")))),Object(r.b)("p",null,"The SDK version string to send under the ",Object(r.b)("inlineCode",{parentName:"p"},"Expo-SDK-Version")," header in the manifest request. Required for apps hosted on Expo's server."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"iOS plist/dictionary key"),Object(r.b)("th",{parentName:"tr",align:null},"Android Map key"),Object(r.b)("th",{parentName:"tr",align:null},"Android meta-data name"),Object(r.b)("th",{parentName:"tr",align:null},"Default"),Object(r.b)("th",{parentName:"tr",align:null},"Required?"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"EXUpdatesRuntimeVersion")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"runtimeVersion")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"expo.modules.updates.EXPO_RUNTIME_VERSION")),Object(r.b)("td",{parentName:"tr",align:null},"(none)"),Object(r.b)("td",{parentName:"tr",align:null},"(exactly one of ",Object(r.b)("inlineCode",{parentName:"td"},"sdkVersion")," or ",Object(r.b)("inlineCode",{parentName:"td"},"runtimeVersion")," is required)")))),Object(r.b)("p",null,"The Runtime Version string to send under the ",Object(r.b)("inlineCode",{parentName:"p"},"Expo-Runtime-Version")," header in the manifest request."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"iOS plist/dictionary key"),Object(r.b)("th",{parentName:"tr",align:null},"Android Map key"),Object(r.b)("th",{parentName:"tr",align:null},"Android meta-data name"),Object(r.b)("th",{parentName:"tr",align:null},"Default"),Object(r.b)("th",{parentName:"tr",align:null},"Required?"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"EXUpdatesReleaseChannel")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"releaseChannel")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"expo.modules.updates.EXPO_RELEASE_CHANNEL")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"default")),Object(r.b)("td",{parentName:"tr",align:null},"\u274c")))),Object(r.b)("p",null,"The release channel string to send under the ",Object(r.b)("inlineCode",{parentName:"p"},"Expo-Release-Channel")," header in the manifest request."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"iOS plist/dictionary key"),Object(r.b)("th",{parentName:"tr",align:null},"Android Map key"),Object(r.b)("th",{parentName:"tr",align:null},"Android meta-data name"),Object(r.b)("th",{parentName:"tr",align:null},"Default"),Object(r.b)("th",{parentName:"tr",align:null},"Required?"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"EXUpdatesCheckOnLaunch")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"checkOnLaunch")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"ALWAYS")),Object(r.b)("td",{parentName:"tr",align:null},"\u274c")))),Object(r.b)("p",null,"The condition under which ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," should automatically check for (and download, if one exists) an update upon app launch. Possible values are ",Object(r.b)("inlineCode",{parentName:"p"},"ALWAYS"),", ",Object(r.b)("inlineCode",{parentName:"p"},"NEVER")," (if you want to exclusively control updates via this module's JS API), ",Object(r.b)("inlineCode",{parentName:"p"},"WIFI_ONLY")," (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches), or ",Object(r.b)("inlineCode",{parentName:"p"},"ERROR_RECOVERY_ONLY")," (if you want the app to automatically download updates only if it encounters a fatal error when launching)."),Object(r.b)("p",null,"Regardless of the value of this setting, as long as updates are enabled, your app can always use the JS API to manually check for and download updates in the background while your app is running."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"iOS plist/dictionary key"),Object(r.b)("th",{parentName:"tr",align:null},"Android Map key"),Object(r.b)("th",{parentName:"tr",align:null},"Android meta-data name"),Object(r.b)("th",{parentName:"tr",align:null},"Default"),Object(r.b)("th",{parentName:"tr",align:null},"Required?"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"EXUpdatesLaunchWaitMs")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"launchWaitMs")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"0")),Object(r.b)("td",{parentName:"tr",align:null},"\u274c")))),Object(r.b)("p",null,"The number of milliseconds ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to ",Object(r.b)("inlineCode",{parentName:"p"},"0")," will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible."),Object(r.b)("p",null,"Some common configuration patterns are explained below:"),Object(r.b)("h3",{id:"automatic-updates"},"Automatic Updates"),Object(r.b)("p",null,"By default, ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," will immediately launch your app with a previously downloaded (or embedded) update when a user opens your app from being closed. It will additionally check for updates asynchronously in the background, and will try to fetch the latest published version. If a new update is available, ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," will try to download it and notify the running JavaScript of its success or failure using ",Object(r.b)("a",{parentName:"p",href:"/versions/latest/sdk/updates/#updatesaddlistenereventlistener"},"events"),". A newly fetched update will be launched next time the user swipes closed and reopens the app; if you want to run it sooner, you can call ",Object(r.b)("a",{parentName:"p",href:"/versions/latest/sdk/updates/#updatesreloadasync"},Object(r.b)("inlineCode",{parentName:"a"},"Updates.reloadAsync"))," in your application code at an appropriate time."),Object(r.b)("p",null,"You may also configure ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," to wait a specific amount of time to launch when a user opens the app by using the ",Object(r.b)("inlineCode",{parentName:"p"},"launchWaitMs")," setting. If a new update can be downloaded within this time, the new update will be launched right away, rather than waiting for the user to swipe closed and reopen the app. (Note, however, that if users have a slow network connection, your app can be delayed on the launch screen for as many milliseconds as ",Object(r.b)("inlineCode",{parentName:"p"},"launchWaitMs"),", so we recommend being conservative with this setting unless it's critically important for users to have the most recent update on each launch.) If no update is available, a previously downloaded update will be launched as soon as ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," is able to determine this."),Object(r.b)("p",null,"If you want this automatic update behavior to occur only when your users are on a Wi-Fi connection, you can set the ",Object(r.b)("inlineCode",{parentName:"p"},"checkOnLaunch")," setting to ",Object(r.b)("inlineCode",{parentName:"p"},"WIFI_ONLY"),"."),Object(r.b)("h3",{id:"manual-updates"},"Manual Updates"),Object(r.b)("p",null,"It's also possible to turn off these automatic updates, and to instead control updates entirely within your JS code. This is desirable if you want some custom logic around fetching updates (e.g. only when users take a specific action in your UI)."),Object(r.b)("p",null,"Setting ",Object(r.b)("inlineCode",{parentName:"p"},"checkOnLaunch")," to ",Object(r.b)("inlineCode",{parentName:"p"},"NEVER")," will prevent ",Object(r.b)("inlineCode",{parentName:"p"},"expo-updates")," from automatically fetching the latest update every time your app is launched. Only the most recent cached version of your bundle will be loaded."),Object(r.b)("p",null,"You can then use the ",Object(r.b)("a",{parentName:"p",href:"/versions/latest/sdk/updates/"},Object(r.b)("inlineCode",{parentName:"a"},"Updates"))," module included with this library to download new updates and, if appropriate, notify the user and reload the experience."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"try {\n  const update = await Updates.checkForUpdateAsync();\n  if (update.isAvailable) {\n    await Updates.fetchUpdateAsync();\n    // ... notify user of update ...\n    Updates.reloadAsync();\n  }\n} catch (e) {\n  // handle or log error\n}\n")))}s.isMDXComponent=!0},dhJC:function(e,t,a){"use strict";function n(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}a.d(t,"a",(function(){return n}))}},[["B5du",1,0]]]);