_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[101],{"7ljp":function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return m}));var r=n("q1tI"),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),l=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"===typeof e?e(t):u(u({},t),e)),n},c=function(e){var t=l(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=l(n),d=r,m=c["".concat(a,".").concat(d)]||c[d]||b[d]||i;return n?o.a.createElement(m,u(u({ref:t},s),{},{components:n})):o.a.createElement(m,u({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u.mdxType="string"===typeof e?e:r,a[1]=u;for(var s=2;s<i;s++)a[s]=n[s];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},AE7q:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return u})),n.d(t,"headings",(function(){return p})),n.d(t,"default",(function(){return l}));var r=n("HALo"),o=n("dhJC"),i=(n("q1tI"),n("7ljp")),a=["components"],u={title:"Runtime Versions"},p=[{depth:2,type:"text",title:"Setting the runtime version for an update"},{depth:2,type:"text",title:"Setting the runtime version for a build"},{depth:3,type:"text",title:"Configuration for the managed workflow"},{depth:3,type:"text",title:"Configuration for the bare workflow"},{depth:2,type:"text",title:"FAQ"},{depth:3,type:"text",title:"Can I have a different runtime version on iOS and Android?"},{depth:3,type:"text",title:"Can I test updates with a custom runtime version on Expo Go?"}],s={meta:u,headings:p};function l(e){var t=e.components,n=Object(o.a)(e,a);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Custom runtime versions are not supported on the classic build system (",Object(i.b)("inlineCode",{parentName:"p"},"expo build"),"); these apps will always use the SDK version as the basis for determining runtime compatibility.")),Object(i.b)("p",null,"Every update targets one ",Object(i.b)("a",{parentName:"p",href:"/workflow/publishing/#what-version-of-the-app-will-my"},"compatible")," runtime. Each time you build a binary for your app it includes the native code present at the time of the build and only that code, and this unique combination and configuration of the build is what is represented by the runtime version."),Object(i.b)("p",null,"By default, the runtime version is determined by the Expo SDK version, but this will not adequately describe the different runtime versions of your app if you build more than once per SDK release. In this case, you will need to specify a ",Object(i.b)("inlineCode",{parentName:"p"},"runtimeVersion")," to ensure your updates are delivered only to compatible builds. This ",Object(i.b)("inlineCode",{parentName:"p"},"runtimeVersion")," should be updated whenever you update your project's native modules and change the JS\u2013native interface."),Object(i.b)("p",null,"The runtime version string must conform to ",Object(i.b)("a",{parentName:"p",href:"/../../../../../../versions/latest/config/app/#runtimeversion"},"this format"),"."),Object(i.b)("h2",{id:"setting-the-runtime-version-for-an-update"},"Setting the runtime version for an update"),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"/../../../../../../workflow/publishing/#how-to-publish"},"Updates")," published with the runtime version set in ",Object(i.b)("strong",{parentName:"p"},"app.json")," will be delivered to builds running the same runtime version, and only to those builds."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json"},'{\n  "expo": {\n    "runtimeVersion": "2.718"\n  }\n}\n')),Object(i.b)("h2",{id:"setting-the-runtime-version-for-a-build"},"Setting the runtime version for a build"),Object(i.b)("h3",{id:"configuration-for-the-managed-workflow"},"Configuration for the managed workflow"),Object(i.b)("p",null,"If you are using the ",Object(i.b)("a",{parentName:"p",href:"/introduction/managed-vs-bare/#managed-workflow"},"managed workflow"),", ",Object(i.b)("inlineCode",{parentName:"p"},"runtimeVersion")," is specified in ",Object(i.b)("strong",{parentName:"p"},"app.json"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json"},'{\n  "expo": {\n    "runtimeVersion": "2.718"\n  }\n}\n')),Object(i.b)("h3",{id:"configuration-for-the-bare-workflow"},"Configuration for the bare workflow"),Object(i.b)("p",null,"If you are using the ",Object(i.b)("a",{parentName:"p",href:"/../../../../../../introduction/managed-vs-bare/#bare-workflow"},"bare workflow"),", set the runtime version in ",Object(i.b)("strong",{parentName:"p"},"Expo.plist")," on iOS and ",Object(i.b)("strong",{parentName:"p"},"AndroidManifest.xml")," on Android."),Object(i.b)("p",null,"For an iOS build, add an entry to the ",Object(i.b)("strong",{parentName:"p"},"Expo.plist")," with the key ",Object(i.b)("inlineCode",{parentName:"p"},"EXUpdatesRuntimeVersion"),". The value is a string that represents the runtime version."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-diff"},"+ <key>EXUpdatesRuntimeVersion</key>\n+ <string>2.718</string>\n")),Object(i.b)("p",null,"For an Android build, add a ",Object(i.b)("inlineCode",{parentName:"p"},"<meta-data>")," element to the ",Object(i.b)("strong",{parentName:"p"},"AndroidManifest.xml")," whose ",Object(i.b)("inlineCode",{parentName:"p"},"android:name")," attribute is ",Object(i.b)("inlineCode",{parentName:"p"},"expo.modules.updates.EXPO_RUNTIME_VERSION")," and ",Object(i.b)("inlineCode",{parentName:"p"},"android:value")," attribute is a string that represents the desired runtime version."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-diff"},'+ <meta-data android:name="expo.modules.updates.EXPO_RUNTIME_VERSION" android:value="2.718"/>\n')),Object(i.b)("h2",{id:"faq"},"FAQ"),Object(i.b)("h3",{id:"can-i-have-a-different-runtime-version-on-ios-and-android"},"Can I have a different runtime version on iOS and Android?"),Object(i.b)("p",null,"Yes, if you want to be able to control the runtime version on a platform level, you can:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Have platform specific release channels: ",Object(i.b)("inlineCode",{parentName:"li"},"ios-production"),", ",Object(i.b)("inlineCode",{parentName:"li"},"android-production"),"."),Object(i.b)("li",{parentName:"ol"},"Have platform specific runtime versions: ",Object(i.b)("inlineCode",{parentName:"li"},"ios-1.0.0"),", ",Object(i.b)("inlineCode",{parentName:"li"},"android-1.0.0"),".")),Object(i.b)("p",null,"However, you cannot set a platform specific configuration field such as ",Object(i.b)("inlineCode",{parentName:"p"},"ios.runtimeVersion")," or ",Object(i.b)("inlineCode",{parentName:"p"},"android.runtimeVersion")),Object(i.b)("h3",{id:"can-i-test-updates-with-a-custom-runtime-version-on-expo-go"},"Can I test updates with a custom runtime version on Expo Go?"),Object(i.b)("p",null,"Expo Go is meant for updates targeting an Expo SDK. If you want to test an update targeting a custom runtime version, you should use a ",Object(i.b)("a",{parentName:"p",href:"/../../../../../../development/introduction/"},"development build"),"."))}l.isMDXComponent=!0},HALo:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},JdMh:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/distribution/runtime-versions",function(){return n("AE7q")}])},Qetd:function(e,t,n){"use strict";var r=Object.assign.bind(Object);e.exports=r,e.exports.default=e.exports},dhJC:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}n.d(t,"a",(function(){return r}))}},[["JdMh",1,0]]]);