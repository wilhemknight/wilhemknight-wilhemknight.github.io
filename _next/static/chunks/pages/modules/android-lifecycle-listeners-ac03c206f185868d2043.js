_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[184],{"7ljp":function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return y}));var i=n("q1tI"),a=n.n(i);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},c=Object.keys(e);for(i=0;i<c.length;i++)n=c[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(i=0;i<c.length;i++)n=c[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),s=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"===typeof e?e(t):r(r({},t),e)),n},b=function(e){var t=s(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,c=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=s(n),m=i,y=b["".concat(o,".").concat(m)]||b[m]||d[m]||c;return n?a.a.createElement(y,r(r({ref:t},p),{},{components:n})):a.a.createElement(y,r({ref:t},p))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"===typeof e||i){var c=n.length,o=new Array(c);o[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"===typeof e?e:i,o[1]=r;for(var p=2;p<c;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},BjIG:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return l})),n.d(t,"headings",(function(){return p})),n.d(t,"default",(function(){return b}));var i=n("HALo"),a=n("dhJC"),c=(n("q1tI"),n("7ljp")),o=n("zokH"),r=["components"],l={title:"Android Lifecycle Listeners"},p=[{depth:2,type:"text",title:"Get Started"},{depth:2,type:"inlineCode",title:"Activity  Lifecycle Listeners"},{depth:2,type:"inlineCode",title:"Application  Lifecycle Listeners"},{depth:2,type:"text",title:"Known Issues"},{depth:3,type:"inlineCode",title:"Why there are no  onStart  and  onStop  Activity listeners"},{depth:3,type:"text",title:"Interface stability"}],s={meta:l,headings:p};function b(e){var t=e.components,n=Object(a.a)(e,r);return Object(c.b)("wrapper",Object(i.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"In order to respond to certain Android system events relevant to an app, such as inbound links and configuration changes, it is necessary to override the corresponding lifecycle callbacks in ",Object(c.b)("strong",{parentName:"p"},"MainActivity.java")," and/or ",Object(c.b)("strong",{parentName:"p"},"MainApplication.java"),"."),Object(c.b)("p",null,"The React Native module API does not provide any mechanism to hook into these, and so setup instructions for React Native libraries often include steps to copy code into these files. To simplify and automate setup and maintenance, the Expo module API provides a mechanism that allows your library to hook into ",Object(c.b)("inlineCode",{parentName:"p"},"Activity")," or ",Object(c.b)("inlineCode",{parentName:"p"},"Application")," functions."),Object(c.b)("h2",{id:"get-started"},"Get Started"),Object(c.b)("p",null,"First, you need to have created an Expo module or integrated the Expo modules API in library using the React Native module API. ",Object(c.b)("a",{parentName:"p",href:"/modules/overview/#setup"},"Learn more")),Object(c.b)("p",null,"Inside of your module, create a concrete class that implements the ",Object(c.b)("a",{parentName:"p",href:"https://github.com/expo/expo/tree/main/packages/expo-modules-core/android/src/main/java/expo/modules/core/interfaces/Package.java"},Object(c.b)("inlineCode",{parentName:"a"},"Package"))," interface. For most cases, you only need to implement the ",Object(c.b)("inlineCode",{parentName:"p"},"createReactActivityLifecycleListeners")," or ",Object(c.b)("inlineCode",{parentName:"p"},"createApplicationLifecycleListeners")," methods."),Object(c.b)("h2",{id:"activity-lifecycle-listeners"},Object(c.b)("inlineCode",{parentName:"h2"},"Activity")," Lifecycle Listeners"),Object(c.b)("p",null,"You can hook into the ",Object(c.b)("inlineCode",{parentName:"p"},"Activity")," lifecycle using ",Object(c.b)("inlineCode",{parentName:"p"},"ReactActivityLifecycleListener"),". ",Object(c.b)("inlineCode",{parentName:"p"},"ReactActivityLifecycleListener")," hooks into React Native's ",Object(c.b)("inlineCode",{parentName:"p"},"ReactActivity")," lifecycles using its ",Object(c.b)("inlineCode",{parentName:"p"},"ReactActivityDelegate")," and provides a similar experience to Android ",Object(c.b)("inlineCode",{parentName:"p"},"Activity")," lifecycles."),Object(c.b)("p",null,"The following ",Object(c.b)("inlineCode",{parentName:"p"},"Activity")," lifecycle callbacks are currently supported:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"onCreate")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"onResume")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"onPause")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"onDestrory")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"onNewIntent")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"onBackPressed"))),Object(c.b)("p",null,"To create a ",Object(c.b)("inlineCode",{parentName:"p"},"ReactActivityLifecycleListener"),", you should implement ",Object(c.b)("inlineCode",{parentName:"p"},"createReactActivityLifecycleListeners")," in your derived ",Object(c.b)("inlineCode",{parentName:"p"},"Package")," class, e.g. ",Object(c.b)("inlineCode",{parentName:"p"},"MyLibPackage"),"."),Object(c.b)(o.b,{tabs:["Kotlin","Java"],mdxType:"Tabs"},Object(c.b)(o.a,{mdxType:"Tab"},Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-kotlin"},"// android/src/main/java/expo/modules/mylib/MyLibPackage.kt\npackage expo.modules.mylib\n\nimport android.content.Context\nimport expo.modules.core.interfaces.Package\nimport expo.modules.core.interfaces.ReactActivityLifecycleListener\n\nclass MyLibPackage : Package {\n  override fun createReactActivityLifecycleListeners(activityContext: Context): List<ReactActivityLifecycleListener> {\n    return listOf(MyLibReactActivityLifecycleListener())\n  }\n}\n"))),Object(c.b)(o.a,{mdxType:"Tab"},Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-java"},"// android/src/main/java/expo/modules/mylib/MyLibPackage.java\npackage expo.modules.mylib;\n\nimport android.content.Context;\nimport expo.modules.core.interfaces.Package;\nimport expo.modules.core.interfaces.ReactActivityLifecycleListener;\n\nimport java.util.Collections;\nimport java.util.List;\n\npublic class MyLibPackage implements Package {\n  @Override\n  public List<? extends ReactActivityLifecycleListener> createReactActivityLifecycleListeners(Context activityContext) {\n    return Collections.singletonList(new MyLibReactActivityLifecycleListener());\n  }\n}\n")))),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"MyLibReactActivityLifecycleListener")," is a ",Object(c.b)("inlineCode",{parentName:"p"},"ReactActivityLifecycleListener")," derived class that you can hook into the lifecycles. You can only override the methods you need."),Object(c.b)(o.b,{tabs:["Kotlin","Java"],mdxType:"Tabs"},Object(c.b)(o.a,{mdxType:"Tab"},Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-kotlin"},"// android/src/main/java/expo/modules/mylib/MyLibReactActivityLifecycleListener.kt\npackage expo.modules.mylib\n\nimport android.app.Activity\nimport android.os.Bundle\nimport expo.modules.core.interfaces.ReactActivityLifecycleListener\n\nclass MyLibReactActivityLifecycleListener : ReactActivityLifecycleListener {\n  override fun onCreate(activity: Activity, savedInstanceState: Bundle?) {\n    // Your setup code in `Activity.onCreate`.\n    doSomeSetupInActivityOnCreate(activity)\n  }\n}\n"))),Object(c.b)(o.a,{mdxType:"Tab"},Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-java"},"// android/src/main/java/expo/modules/mylib/MyLibReactActivityLifecycleListener.java\npackage expo.modules.mylib;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\nimport expo.modules.core.interfaces.ReactActivityLifecycleListener;\n\npublic class MyLibReactActivityLifecycleListener implements ReactActivityLifecycleListener {\n  @Override\n  public void onCreate(Activity activity, Bundle savedInstanceState) {\n    // Your setup code in `Activity.onCreate`.\n    doSomeSetupInActivityOnCreate(activity);\n  }\n}\n")))),Object(c.b)("h2",{id:"application-lifecycle-listeners"},Object(c.b)("inlineCode",{parentName:"h2"},"Application")," Lifecycle Listeners"),Object(c.b)("p",null,"You can hook into the ",Object(c.b)("inlineCode",{parentName:"p"},"Application")," lifecycle using ",Object(c.b)("inlineCode",{parentName:"p"},"ApplicationLifecycleListener"),"."),Object(c.b)("p",null,"The following ",Object(c.b)("inlineCode",{parentName:"p"},"Application")," lifecycle callbacks are currently supported:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"onCreate")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"onConfigurationChanged"))),Object(c.b)("p",null,"To create a ",Object(c.b)("inlineCode",{parentName:"p"},"ApplicationLifecycleListener"),", you should implement ",Object(c.b)("inlineCode",{parentName:"p"},"createApplicationLifecycleListeners")," in your derived ",Object(c.b)("inlineCode",{parentName:"p"},"Package")," class, e.g. ",Object(c.b)("inlineCode",{parentName:"p"},"MyLibPackage"),"."),Object(c.b)(o.b,{tabs:["Kotlin","Java"],mdxType:"Tabs"},Object(c.b)(o.a,{mdxType:"Tab"},Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-kotlin"},"// android/src/main/java/expo/modules/mylib/MyLibPackage.kt\npackage expo.modules.mylib\n\nimport android.content.Context\nimport expo.modules.core.interfaces.ApplicationLifecycleListener\nimport expo.modules.core.interfaces.Package\n\nclass MyLibPackage : Package {\n  override fun createApplicationLifecycleListeners(context: Context): List<ApplicationLifecycleListener> {\n    return listOf(MyLibApplicationLifecycleListener())\n  }\n}\n"))),Object(c.b)(o.a,{mdxType:"Tab"},Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-java"},"// android/src/main/java/expo/modules/mylib/MyLibPackage.java\nimport android.content.Context;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport expo.modules.core.interfaces.ApplicationLifecycleListener;\nimport expo.modules.core.interfaces.Package;\n\npublic class MyLibPackage implements Package {\n  @Override\n  public List<? extends ApplicationLifecycleListener> createApplicationLifecycleListeners(Context context) {\n    return Collections.singletonList(new MyLibApplicationLifecycleListener());\n  }\n}\n")))),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"MyLibApplicationLifecycleListener")," is an ",Object(c.b)("inlineCode",{parentName:"p"},"ApplicationLifecycleListener")," derived class that can hook into the ",Object(c.b)("inlineCode",{parentName:"p"},"Application")," lifecycle callbacks. You should only override the methods you need (",Object(c.b)("a",{parentName:"p",href:"/modules/android-lifecycle-listeners/#interface-stability"},"due to possible maintenance costs"),")."),Object(c.b)(o.b,{tabs:["Kotlin","Java"],mdxType:"Tabs"},Object(c.b)(o.a,{mdxType:"Tab"},Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-kotlin"},"// android/src/main/java/expo/modules/mylib/MyLibApplicationLifecycleListener.kt\npackage expo.modules.mylib\n\nimport android.app.Application\nimport expo.modules.core.interfaces.ApplicationLifecycleListener\n\nclass MyLibApplicationLifecycleListener : ApplicationLifecycleListener {\n  override fun onCreate(application: Application) {\n    // Your setup code in `Application.onCreate`.\n    doSomeSetupInApplicationOnCreate(application)\n  }\n}\n"))),Object(c.b)(o.a,{mdxType:"Tab"},Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-java"},"// android/src/main/java/expo/modules/mylib/MyLibApplicationLifecycleListener.java\npackage expo.modules.mylib;\n\nimport android.app.Application;\n\nimport expo.modules.core.interfaces.ApplicationLifecycleListener;\n\npublic class MyLibApplicationLifecycleListener implements ApplicationLifecycleListener {\n  @Override\n  public void onCreate(Application application) {\n    // Your setup code in `Application.onCreate`.\n    doSomeSetupInApplicationOnCreate(application);\n  }\n}\n")))),Object(c.b)("h2",{id:"known-issues"},"Known Issues"),Object(c.b)("h3",{id:"why-there-are-no-onstart-and-onstop-activity-listeners"},"Why there are no ",Object(c.b)("inlineCode",{parentName:"h3"},"onStart")," and ",Object(c.b)("inlineCode",{parentName:"h3"},"onStop")," Activity listeners"),Object(c.b)("p",null,"In the current implementation, we do not set up the hooks from ",Object(c.b)("inlineCode",{parentName:"p"},"MainActivity")," but from ",Object(c.b)("a",{parentName:"p",href:"https://github.com/facebook/react-native/blob/400902093aa3ccfc05712a996c592a86f342253a/ReactAndroid/src/main/java/com/facebook/react/ReactActivityDelegate.java"},Object(c.b)("inlineCode",{parentName:"a"},"ReactActivityDelegate")),". There are some slight differences between ",Object(c.b)("inlineCode",{parentName:"p"},"MainActivity")," and ",Object(c.b)("inlineCode",{parentName:"p"},"ReactActivityDelegate"),". Since ",Object(c.b)("inlineCode",{parentName:"p"},"ReactActivityDelegate")," does not have ",Object(c.b)("inlineCode",{parentName:"p"},"onStart")," and ",Object(c.b)("inlineCode",{parentName:"p"},"onStop"),", we don't yet support them here."),Object(c.b)("h3",{id:"interface-stability"},"Interface stability"),Object(c.b)("p",null,"The listener interfaces may change from time to time between Expo SDK releases. Our strategy for backward compatibility is always to add new interfaces and add ",Object(c.b)("inlineCode",{parentName:"p"},"@Deprecated")," annotation for interfaces we plan to remove. Our interfaces are all based on Java 8 interface default method; you don't have to and should not implement all methods. Doing this will benefit your module's maintenance cost between Expo SDKs."))}b.isMDXComponent=!0},Hham:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/modules/android-lifecycle-listeners",function(){return n("BjIG")}])}},[["Hham",1,0,2,3,23]]]);