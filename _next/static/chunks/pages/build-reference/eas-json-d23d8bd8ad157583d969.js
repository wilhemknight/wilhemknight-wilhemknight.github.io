_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[62],{"/nc+":function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return p})),n.d(t,"headings",(function(){return c})),n.d(t,"default",(function(){return m}));var o=n("HALo"),i=n("dhJC"),a=(n("q1tI"),n("7ljp")),s=n("v6H4"),r=[{name:"extends",type:"string",description:["The name of the build profile that the current one should inherit values from. This value can't be specified per platform."]},{name:"credentialsSource",enum:["local","remote"],description:["The source of credentials used to sign build artifacts."," - `local` - if you want to provide your own `credentials.json` file. ([learn more on this here](/app-signing/local-credentials))."," - `remote` - if you want to use the credentials managed by EAS (this is the default option)."]},{name:"releaseChannel",type:"string",description:["Name of the release channel for the `expo-updates` package ([Learn more about this](../../distribution/release-channels)). If you do not specify a channel, your binary will pull releases from the `default` channel. If you do not use `expo-updates` in your project then this property will have no effect."]},{name:"distribution",enum:["store","internal"],description:["The method of distributing your app.","- `internal` - with this option you'll be able to share your build URLs with anyone, and they will be able to install the builds to their devices straight from the Expo website. When using `internal`, make sure the build produces an APK or IPA file. Otherwise, the sharable URL will be useless. [Learn more about internal distribution](../../build/internal-distribution)."," - `store` - produces builds for store uploads, your build URLs won't be sharable."]},{name:"developmentClient",type:"boolean",description:["If set to true (defaults to false), this field expresses the intent to produce a development client build.","For the build to be successful, the project must have expo-dev-client installed and configured.","Note: this field is sugar for setting the iOS `buildConfiguration` to `Debug` and Android `gradleCommand` to `:app:assembleDebug`. Those fields, if provided for the same build profile, will take precedence.","[Learn more about custom development clients](../../clients/introduction)."]},{name:"prebuildCommand",type:"string",description:["Optional override of the prebuild command used by EAS.","For example, you can specify `prebuild --template example-template` to use a custom template.","Note: `--platform` and `--non-interactive` will be added automatically by the build engine, so you do not need to specify them manually.","[Learn more about prebuild options](../../workflow/expo-cli/#expo-prebuild)."]},{name:"node",type:"string",description:["Version of Node.js."]},{name:"yarn",type:"string",description:["Version of Yarn."]},{name:"expoCli",type:"string",description:["Version of [expo-cli](https://www.npmjs.com/package/expo-cli) used to [prebuild](../../workflow/expo-cli/#expo-prebuild) your app. It does not have any effect on bare projects."]},{name:"env",type:"object",description:["Environment variables that should be set during the build process (should only be used for values that you would commit to your git repository, i.e. not passwords or secrets)."]},{name:"cache",type:"object",description:["Cache configuration. This feature is intended for caching values that require a lot of computation, e.g. compilation results (both final binaries and any intermediate files), but it wouldn't work well for `node_modules` because the cache is not local to the machine, so the download speed is similar to downloading from the npm registry. "],properties:[{name:"disabled",type:"boolean",description:["Disables caching. Defaults to false."]},{name:"key",type:"string",description:["Cache key. You can invalidate the cache by changing this value."]},{name:"customPaths",type:"array",description:["List of the paths that will be saved after a successful build and restored at the beginning of the next one. Both absolute and relative paths are supported, where relative paths are resolved from the directory with `eas.json`."]},{name:"cacheDefaultPaths",type:"boolean",description:["Specifies whether to cache the recommended set of files, currently only Podfile.lock is cached by default for iOS build and nothing is cached for Android. Defaults to true."]}]}],l=[{name:"withoutCredentials",type:"boolean",description:["When set to `true`, EAS CLI won't require you to configure credentials when building the app. This comes in handy when you want to build debug binaries and the debug keystore is checked in to the repository. The default is `false`."]},{name:"image",type:"string",description:["Image with build environment. [Learn more about it here](../../build-reference/infrastructure)."]},{name:"ndk",type:"string",description:["Version of Android NDK."]},{name:"autoIncrement",type:'boolean | "version" | "versionCode"',description:["Controls how EAS CLI bumps your application build version. Defaults to `false`.","","Allowed values:",' - `"version"` - the patch of `expo.version` is bumped (e.g. `1.2.3` -> `1.2.4`).',' - `"versionCode"` (or `true`) - `expo.android.versionCode` is bumped (e.g. `3` -> `4`).'," - `false` - versions won't be bumped automatically (default)","","In the case of a bare project, it also updates versions in native code. `expo.version` corresponds to `versionName` and `expo.android.versionCode` to `versionCode` in the `build.gradle`. Google Play uses these values to identify the app build, `versionName` is the version visible to users, whereas `versionCode` defines the version number. The combination of those needs to be unique, so you can bump either of them.","","This feature is not intended for use with dynamic configuration (app.config.js). EAS CLI will throw an error if you don't use app.json."]},{name:"buildType",enum:["app-bundle","apk"],description:["Type of the artifact you want to build. It controls what Gradle task will be used, can be overridden by `gradleCommand` or `developmentClient: true` option."," - `app-bundle` - `:app:bundleRelease`"," - `apk` - `:app:assembleRelease`"]},{name:"gradleCommand",type:"string",description:["Gradle task that will be used to build your project, e.g. `:app:assembleDebug` to build a debug binary.","It's not recommended unless you need to run a task that `buildType` does not support, it takes priority over `buildType` and `developmentClient`."]},{name:"artifactPath",type:"string",description:["Path (or pattern) where EAS Build is going to look for the build artifacts. EAS Build uses the `fast-glob` npm package for pattern matching ([see their README to learn more about the syntax you can use](https://github.com/mrmlnc/fast-glob#pattern-syntax)). The default value is `android/app/build/outputs/**/*.{apk,aab}`."]}],d=[{name:"simulator",type:"boolean",description:["If set to true, creates build for simulator. Defaults to false"]},{name:"enterpriseProvisioning",enum:["universal","adhoc"],description:['Provisioning method used for `"distribution": "internal"` when you have an Apple account with Apple Developer Enterprise Program membership. You can choose if you want to use `adhoc` or `universal` provisioning. The latter is recommended as it does not require you to register each individual device. If you don\'t provide this option and you still authenticate with an enterprise team, you\'ll be prompted which provisioning method to use.']},{name:"autoIncrement",type:'boolean | "version" | "buildNumber"',description:["Controls how EAS CLI bumps your application build version. Defaults to `false`.","","Allowed values:",' - `"version"` - the patch of `expo.version` is bumped (e.g. `1.2.3` -> `1.2.4`).',' - `"buildNumber"` (or `true`) - the last component of `expo.ios.buildNumber` is bumped (e.g. `1.2.3.39` -> `1.2.3.40`).'," - `false` - versions won't be bumped automatically (default)","","In the case of a bare project, it also updates versions in native code. `expo.version` corresponds to `CFBundleShortVersionString` and `expo.ios.buildNumber` to `CFBundleVersion` in the `Info.plist`. The App Store is using those values to identify the app build, `CFBundleShortVersionString` is the version visible to users, whereas `CFBundleVersion` defines the build number. The combination of those needs to be unique, so you can bump either of them.","","This feature is not intended for use with dynamic configuration (app.config.js). EAS CLI will throw an error if you don't use app.json."]},{name:"image",type:"string",description:["Image with build environment. [Learn more about it here](../../build-reference/infrastructure)."]},{name:"bundler",type:"string",description:["Version of [bundler](https://bundler.io/)."]},{name:"fastlane",type:"string",description:["Version of fastlane."]},{name:"cocoapods",type:"string",description:["Version of CocoaPods."]},{name:"scheme",type:"string",description:["Xcode project's scheme."," - managed project: does not have any effect"," - bare project","   - If your project has multiple schemes, you should set this value.","   - If the project has only one scheme, it will be detected automatically.","   - If multiple schemes exist and this value is **not** set, EAS CLI will prompt you to select one of them."]},{name:"buildConfiguration",type:"string",description:["Xcode project's Build Configuration.",' - managed project: "Release" or "Debug", defaults to "Release"'," - bare project: defaults to the value specified in the scheme","","It takes priority over `developmentClient` field."]},{name:"artifactPath",type:"string",description:["Path (or pattern) where EAS Build is going to look for the build artifacts. EAS Build uses the `fast-glob` npm package for pattern matching, ([see their README to learn more about the syntax you can use](https://github.com/mrmlnc/fast-glob#pattern-syntax)). You should modify that path only if you are using a custom `Gymfile`. The default is `ios/build/Build/Products/*-iphonesimulator/*.app` when building for simulator and `ios/build/*.ipa` in other cases."]}],u=["components"],p={title:"Build schema for eas.json",sidebar_title:"Build schema for eas.json"},c=[{depth:2,type:"text",title:"Examples"},{depth:2,type:"text",title:"Schema"},{depth:2,type:"text",title:"Options common to both platforms"},{depth:2,type:"text",title:"Android-specific options"},{depth:2,type:"text",title:"iOS-specific options"}],b={meta:p,headings:c};function m(e){var t=e.components,n=Object(i.a)(e,u);return Object(a.b)("wrapper",Object(o.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"eas.json")," is your go-to place for configuring EAS Build (and ",Object(a.b)("a",{parentName:"p",href:"/../../../../../../submit/eas-json/"},"EAS Submit"),"). It is located at the root of your project next to your ",Object(a.b)("strong",{parentName:"p"},"package.json"),"."),Object(a.b)("p",null,"This document is a reference that outlines the schema for the ",Object(a.b)("inlineCode",{parentName:"p"},'"build"')," key in ",Object(a.b)("strong",{parentName:"p"},"eas.json"),". For an explanation of how to use it, please refer to ",Object(a.b)("a",{parentName:"p",href:"/../../../../../../build/eas-json/"},'"Configuring EAS Build eas.json"'),"."),Object(a.b)("h2",{id:"examples"},"Examples"),Object(a.b)("details",null,Object(a.b)("summary",null,"A managed project with several profiles"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n  "build": {\n    "base": {\n      "node": "12.13.0",\n      "yarn": "1.22.5",\n      "env": {\n        "EXAMPLE_ENV": "example value"\n      },\n      "android": {\n        "image": "default",\n        "env": {\n          "PLATFORM": "android"\n        }\n      },\n      "ios": {\n        "image": "latest",\n        "env": {\n          "PLATFORM": "ios"\n        }\n      }\n    },\n    "development": {\n      "extends": "base",\n      "developmentClient": true,\n      "env": {\n        "ENVIRONMENT": "development"\n      },\n      "android": {\n        "distribution": "internal",\n        "withoutCredentials": true\n      },\n      "ios": {\n        "simulator": true\n      }\n    },\n    "staging": {\n      "extends": "base",\n      "env": {\n        "ENVIRONMENT": "staging"\n      },\n      "distribution": "internal",\n      "android": {\n        "buildType": "apk"\n      }\n    },\n    "production": {\n      "extends": "base",\n      "env": {\n        "ENVIRONMENT": "production"\n      }\n    }\n  }\n}\n'))),Object(a.b)("details",null,Object(a.b)("summary",null,"A bare project with several profiles"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n  "build": {\n    "base": {\n      "env": {\n        "EXAMPLE_ENV": "example value"\n      },\n      "android": {\n        "image": "ubuntu-18.04-android-30-ndk-r19c",\n        "ndk": "21.4.7075529"\n      },\n      "ios": {\n        "image": "latest",\n        "node": "12.13.0",\n        "yarn": "1.22.5"\n      }\n    },\n    "development": {\n      "extends": "base",\n      "env": {\n        "ENVIRONMENT": "staging"\n      },\n      "android": {\n        "distribution": "internal",\n        "withoutCredentials": true,\n        "gradleCommand": ":app:assembleDebug"\n      },\n      "ios": {\n        "simulator": true,\n        "buildConfiguration": "Debug"\n      }\n    },\n    "staging": {\n      "extends": "base",\n      "env": {\n        "ENVIRONMENT": "staging"\n      },\n      "distribution": "internal",\n      "android": {\n        "gradleCommand": ":app:assembleRelease"\n      }\n    },\n    "production": {\n      "extends": "base",\n      "env": {\n        "ENVIRONMENT": "production"\n      }\n    }\n  }\n}\n'))),Object(a.b)("h2",{id:"schema"},"Schema"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n  "cli": {\n    "version": /* @info Required EAS CLI version range. */"SEMVER_RANGE"/* @end */,\n    "requireCommit": /* @info If true, ensures that all changes are committed before a build. Defaults to false. */boolean/* @end */\n\n  },\n  "build": {\n    /* @info any arbitrary name - used as an identifier */"BUILD_PROFILE_NAME_1"/* @end */: {\n      /* @info Options common to both platforms*/...COMMON_OPTIONS/* @end */,\n\n      "android": {\n        /* @info Options common to both platforms*/...COMMON_OPTIONS/* @end */,\n        /* @info Options specific for Android and common to both platforms*/...ANDROID_OPTIONS/* @end */\n\n      },\n\n      "ios": {\n        /* @info Options common to both platforms*/...COMMON_OPTIONS/* @end */,\n        /* @info Options specific for iOS and common to both platforms*/...IOS_OPTIONS/* @end */\n\n      }\n    },\n    /* @info Any arbitrary name - used as an identifier */"BUILD_PROFILE_NAME_2"/* @end */: {},\n    ...\n  }\n}\n')),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"You can specify common options both in the platform-specific configuration object or at the profile's root. The platform-specific options take precedence over globally-defined ones.")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"EAS Submit is also configured in ",Object(a.b)("strong",{parentName:"p"},"eas.json"),". You can find the reference for the ",Object(a.b)("inlineCode",{parentName:"p"},'"submit"')," fields in ",Object(a.b)("a",{parentName:"p",href:"/../../../../../../submit/eas-json/"},'"Configuring EAS Submit with eas.json"'),".")),Object(a.b)("h2",{id:"options-common-to-both-platforms"},"Options common to both platforms"),Object(a.b)(s.a,{schema:r,mdxType:"EasJsonPropertiesTable"}),Object(a.b)("h2",{id:"android-specific-options"},"Android-specific options"),Object(a.b)(s.a,{schema:l,mdxType:"EasJsonPropertiesTable"}),Object(a.b)("h2",{id:"ios-specific-options"},"iOS-specific options"),Object(a.b)(s.a,{schema:d,mdxType:"EasJsonPropertiesTable"}))}m.isMDXComponent=!0},"7Mie":function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/build-reference/eas-json",function(){return n("/nc+")}])}},[["7Mie",1,0,20,18,2,3,4,7,8,9,10,11,12,13,17,19,28]]]);