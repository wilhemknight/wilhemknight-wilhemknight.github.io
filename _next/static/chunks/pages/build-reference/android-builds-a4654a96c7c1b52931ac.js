_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[58],{"7ljp":function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n("q1tI"),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),c=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"===typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=c(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),b=c(n),u=r,m=b["".concat(o,".").concat(u)]||b[u]||d[u]||i;return n?a.a.createElement(m,l(l({ref:t},p),{},{components:n})):a.a.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"===typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},HALo:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},Qetd:function(e,t,n){"use strict";var r=Object.assign.bind(Object);e.exports=r,e.exports.default=e.exports},WKPe:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/build-reference/android-builds",function(){return n("eRN/")}])},dhJC:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}n.d(t,"a",(function(){return r}))},"eRN/":function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return l})),n.d(t,"headings",(function(){return s})),n.d(t,"default",(function(){return c}));var r=n("HALo"),a=n("dhJC"),i=(n("q1tI"),n("7ljp")),o=["components"],l={title:"Android build process"},s=[{depth:2,type:"text",title:"Build Process"},{depth:3,type:"text",title:"Local Steps"},{depth:3,type:"text",title:"Remote Steps"},{depth:2,type:"text",title:"Project Auto-Configuration"},{depth:3,type:"text",title:"Android Keystore"},{depth:3,type:"text",title:"Configuring Gradle"}],p={meta:l,headings:s};function c(e){var t=e.components,n=Object(a.a)(e,o);return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This page describes the process of building Android projects with EAS Build. You may want to read this if you are interested in the implementation details of the build service."),Object(i.b)("h2",{id:"build-process"},"Build Process"),Object(i.b)("p",null,"Let's take a closer look at the steps for building Android projects with EAS Build. We'll first run some steps on your local machine to prepare the project, and then we'll actually build the project on a remote service."),Object(i.b)("h3",{id:"local-steps"},"Local Steps"),Object(i.b)("p",null,"The first phase happens on your computer. EAS CLI is in charge of completing the following steps:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"If ",Object(i.b)("inlineCode",{parentName:"p"},"cli.requireCommit")," is set to ",Object(i.b)("inlineCode",{parentName:"p"},"true")," in ",Object(i.b)("strong",{parentName:"p"},"eas.json"),", check if the git index is clean - this means that there aren't any uncommitted changes. If it's not clean, EAS CLI will provide an option to commit local changes for you or abort the build process.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Prepare the credentials needed for the build unless ",Object(i.b)("inlineCode",{parentName:"p"},"builds.android.PROFILE_NAME.withoutCredentials")," is set to ",Object(i.b)("inlineCode",{parentName:"p"},"true"),"."),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Depending on the value of ",Object(i.b)("inlineCode",{parentName:"li"},"builds.android.PROFILE_NAME.credentialsSource"),", the credentials are obtained from either the local ",Object(i.b)("strong",{parentName:"li"},"credentials.json")," file or from the EAS servers. If the ",Object(i.b)("inlineCode",{parentName:"li"},"remote")," mode is selected but no credentials exist yet, you're prompted to generate a new keystore."))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Create a tarball containing a copy of the repository. Actual behavior depends on the VCS workflow you are using. ",Object(i.b)("a",{parentName:"p",href:"https://expo.fyi/eas-vcs-workflow"},"Learn more here"),".")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Upload the project tarball to a private AWS S3 bucket and send the build request to EAS Build."))),Object(i.b)("h3",{id:"remote-steps"},"Remote Steps"),Object(i.b)("p",null,"Next, this is what happens when EAS Build picks up your request:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Create a new Docker container for the build."),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Every build gets its own fresh container with all build tools installed there (Java JDK, Android SDK, NDK, and so on)."))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Download the project tarball from a private AWS S3 bucket and unpack it.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Create ",Object(i.b)("inlineCode",{parentName:"p"},".npmrc")," if ",Object(i.b)("inlineCode",{parentName:"p"},"NPM_TOKEN")," is set. (",Object(i.b)("a",{parentName:"p",href:"/../../../../../../build-reference/private-npm-packages"},"Learn more"),".)")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run the ",Object(i.b)("inlineCode",{parentName:"p"},"eas-build-pre-install")," script from package.json if defined.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"npm install")," in the project root (or ",Object(i.b)("inlineCode",{parentName:"p"},"yarn install")," if ",Object(i.b)("inlineCode",{parentName:"p"},"yarn.lock")," exists).")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"expo doctor")," to diagnose potential issues with your project configuration.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Additional step for ",Object(i.b)("strong",{parentName:"p"},"managed")," projects: Run ",Object(i.b)("inlineCode",{parentName:"p"},"expo prebuild")," to convert the project to a bare one.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Restore a previously saved cache identified by the ",Object(i.b)("inlineCode",{parentName:"p"},"cache.key")," value in the build profile. (",Object(i.b)("a",{parentName:"p",href:"/build/eas-json"},"Learn more"),".)")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run the ",Object(i.b)("inlineCode",{parentName:"p"},"eas-build-post-install")," script from package.json if defined.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Restore the keystore (if it was included in the build request).")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Inject the signing configuration into ",Object(i.b)("strong",{parentName:"p"},"build.gradl"),". ",Object(i.b)("a",{parentName:"p",href:"/build-reference/android-builds/#configuring-gradle"},"Learn more"),".")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"./gradlew COMMAND")," in the ",Object(i.b)("strong",{parentName:"p"},"android")," directory inside your project."),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"COMMAND")," is the command defined in your ",Object(i.b)("strong",{parentName:"li"},"eas.json")," at ",Object(i.b)("inlineCode",{parentName:"li"},"builds.android.PROFILE_NAME.gradleCommand"),". It defaults to ",Object(i.b)("inlineCode",{parentName:"li"},":app:bundleRelease")," which produces the AAB (Android App Bundle)."))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run the ",Object(i.b)("inlineCode",{parentName:"p"},"eas-build-pre-upload-artifacts")," script from package.json if defined.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Store a cache of files and directories defined in the build profile. Subsequent builds will restore this cache. (",Object(i.b)("a",{parentName:"p",href:"/build/eas-json"},"Learn more"),".)")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Upload the build artifact to AWS S3."),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"The artifact path can be configured in ",Object(i.b)("strong",{parentName:"li"},"eas.json")," at ",Object(i.b)("inlineCode",{parentName:"li"},"builds.android.PROFILE_NAME.artifactPath"),". It defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"android/app/build/outputs/**/*.{apk,aab}"),". We're using the ",Object(i.b)("a",{parentName:"li",href:"https://github.com/mrmlnc/fast-glob#pattern-syntax"},"fast-glob")," package for pattern matching.")))),Object(i.b)("h2",{id:"project-auto-configuration"},"Project Auto-Configuration"),Object(i.b)("p",null,"Every time you want to build a new Android app binary, we validate that the project is set up correctly so we can seamlessly run the build process on our servers. This mainly applies to bare projects, but similar steps are run when building managed projects."),Object(i.b)("h3",{id:"android-keystore"},"Android Keystore"),Object(i.b)("p",null,"Android requires you to sign your application with a certificate. That certificate is stored in your keystore. The Google Play Store identifies applications based on the certificate. This means that if you lose your keystore, you may not be able to update your application in the store. However, with ",Object(i.b)("a",{parentName:"p",href:"https://developer.android.com/studio/publish/app-signing#app-signing-google-play"},"Play App Signing"),", you can mitigate the risk of losing your keystore."),Object(i.b)("p",null,"Your application's keystore should be kept private. ",Object(i.b)("strong",{parentName:"p"},"Under no circumstances should you check it in to your repository.")," Debug keystores are the only exception because we don't use them for uploading apps to the Google Play Store."),Object(i.b)("h3",{id:"configuring-gradle"},"Configuring Gradle"),Object(i.b)("p",null,"Your app binary needs to be signed with a keystore. Since we're building the project on a remote server, we had to come up with a way to provide Gradle with credentials which aren't, for security reasons, checked in to your repository. In one of the remote steps, we inject the signing configuration into your ",Object(i.b)("strong",{parentName:"p"},"build.gradle"),". EAS Build creates the ",Object(i.b)("strong",{parentName:"p"},"android/app/eas-build.gradle")," file with the following contents:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-groovy"},'// Build integration with EAS\n\nimport java.nio.file.Paths\n\nandroid {\n  signingConfigs {\n    release {\n      // This is necessary to avoid needing the user to define a release signing config manually\n      // If no release config is defined, and this is not present, build for assembleRelease will crash\n    }\n  }\n\n  buildTypes {\n    release {\n      // This is necessary to avoid needing the user to define a release build type manually\n    }\n    debug {\n      // This is necessary to avoid needing the user to define a debug build type manually\n    }\n  }\n}\n\ntasks.whenTaskAdded {\n  android.signingConfigs.release {\n    def credentialsJson = rootProject.file("../credentials.json");\n    def credentials = new groovy.json.JsonSlurper().parse(credentialsJson)\n    def keystorePath = Paths.get(credentials.android.keystore.keystorePath);\n    def storeFilePath = keystorePath.isAbsolute()\n      ? keystorePath\n      : rootProject.file("..").toPath().resolve(keystorePath);\n\n    storeFile storeFilePath.toFile()\n    storePassword credentials.android.keystore.keystorePassword\n    keyAlias credentials.android.keystore.keyAlias\n    if (credentials.android.keystore.containsKey("keyPassword")) {\n      keyPassword credentials.android.keystore.keyPassword\n    } else {\n      // key password is required by Gradle, but PKCS keystores don\'t have one\n      // using the keystore password seems to satisfy the requirement\n      keyPassword credentials.android.keystore.keystorePassword\n    }\n  }\n\n  android.buildTypes.release {\n    signingConfig android.signingConfigs.release\n  }\n\n  android.buildTypes.debug {\n    signingConfig android.signingConfigs.release\n  }\n}\n\n')),Object(i.b)("p",null,"The most important part is the ",Object(i.b)("inlineCode",{parentName:"p"},"release")," signing config. It's configured to read the keystore and passwords from the ",Object(i.b)("strong",{parentName:"p"},"credentials.json")," file at the project root. Even though you're not required to create this file on your own, it's created and populated with your credentials by EAS Build before running the build."),Object(i.b)("p",null,"This file is imported in ",Object(i.b)("strong",{parentName:"p"},"android/app/build.gradle")," like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-groovy"},'// ...\n\napply from: "./eas-build.gradle"\n')))}c.isMDXComponent=!0}},[["WKPe",1,0]]]);