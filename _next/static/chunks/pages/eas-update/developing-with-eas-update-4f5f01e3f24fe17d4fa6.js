_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[110],{"7ljp":function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var r=n("q1tI"),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),s=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"===typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(n),b=r,h=u["".concat(i,".").concat(b)]||u[b]||d[b]||a;return n?o.a.createElement(h,l(l({ref:t},c),{},{components:n})):o.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var a=n.length,i=new Array(a);i[0]=b;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"===typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},ClL9:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return p})),n.d(t,"headings",(function(){return c})),n.d(t,"default",(function(){return u}));var r=n("HALo"),o=n("dhJC"),a=(n("q1tI"),n("7ljp")),i=n("KiYJ"),l=["components"],p={title:"Developing with EAS Update"},c=[{depth:2,type:"text",title:"Developing locally"},{depth:2,type:"text",title:"Developing with other developers"},{depth:2,type:"text",title:"Future features"},{depth:3,type:"text",title:"Previewing updates with Expo Go"},{depth:3,type:"text",title:"Generating QR codes with GitHub Actions and comments"}],s={meta:p,headings:c};function u(e){var t=e.components,n=Object(o.a)(e,l);return Object(a.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"EAS Update can help us fix critical bugs in production. It can also help us iterate faster with our team."),Object(a.b)("h2",{id:"developing-locally"},"Developing locally"),Object(a.b)("p",null,"When developing locally, ",Object(a.b)("inlineCode",{parentName:"p"},"expo start")," will start a server that serves a manifest and assets to Expo Go and development builds. Locally, those builds look for a local manifest, and when there\u2019s an update, they\u2019ll download any missing local assets. To accomplish this, Expo Go/development builds use a protocol. That protocol is either a classic version of the updates protocol (used with Classic Updates), or the modern version of the ",Object(a.b)("a",{parentName:"p",href:"/../../../../../../technical-specs/expo-updates-0"},"updates protocol")," (used with EAS Update)."),Object(a.b)("p",null,"We want to make sure that our locally developed app is using the same protocol locally as it does when we build our app."),Object(a.b)("p",null,"When we run ",Object(a.b)("inlineCode",{parentName:"p"},"expo start"),", Expo CLI will automatically detect if our app is using EAS Update by looking at the ",Object(a.b)("inlineCode",{parentName:"p"},"expo.updates.url")," property in ",Object(a.b)("strong",{parentName:"p"},"app.json"),". If the value of ",Object(a.b)("inlineCode",{parentName:"p"},"url")," starts with ",Object(a.b)("inlineCode",{parentName:"p"},"https://u.expo.dev"),", we will serve the modern manifest protocol. If there is no ",Object(a.b)("inlineCode",{parentName:"p"},"url"),", then we default to serving the classic version of the updates protocol."),Object(a.b)("p",null,"To ensure that we\u2019re using the modern version of the updates protocol, make sure to run ",Object(a.b)("inlineCode",{parentName:"p"},"eas update:configure"),", then ",Object(a.b)("inlineCode",{parentName:"p"},"expo install expo-updates")," before creating development builds. Running both of these commands should set up our local development environment to use the modern manifest protocol."),Object(a.b)("h2",{id:"developing-with-other-developers"},"Developing with other developers"),Object(a.b)("p",null,"When we finish a feature or bug fix, it\u2019s convenient to allow other developers to preview a published update for reviewing purposes. One problem with previewing a new feature is that we have to rebuild the project into an app and distribute it to a reviewer. That process takes time and requires bookkeeping of builds and features."),Object(a.b)("p",null,"Previewing features with EAS Update can help us preview new features in minutes."),Object(a.b)("p",null,"The process flows like this:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"A developer runs ",Object(a.b)("inlineCode",{parentName:"li"},"eas device:create"),", then has all teammates/reviewers register their devices."),Object(a.b)("li",{parentName:"ul"},"Once complete, they create a build suitable for internal distribution. After running ",Object(a.b)("inlineCode",{parentName:"li"},"eas build:configure"),", the command to generate this build would be ",Object(a.b)("inlineCode",{parentName:"li"},"eas build --profile preview"),"."),Object(a.b)("li",{parentName:"ul"},"Once the build is complete, all teammates/reviewers should download the internal distribution app."),Object(a.b)("li",{parentName:"ul"},"Then, a developer makes a change to a project. For this example, let\u2019s imagine the developer is on a branch named ",Object(a.b)("inlineCode",{parentName:"li"},"typo-fix")," and the change fixes a typo within the app."),Object(a.b)("li",{parentName:"ul"},"The developer then runs ",Object(a.b)("inlineCode",{parentName:"li"},"eas update --auto"),". This will publish an update to a branch named ",Object(a.b)("inlineCode",{parentName:"li"},"typo-fix"),", which is linked by default to a channel named ",Object(a.b)("inlineCode",{parentName:"li"},"typo-fix"),"."),Object(a.b)("li",{parentName:"ul"},"Then, the developer can create a URL that will open the previously created internal distribution app. They can either send that link to their teammates/reviewers, or they can create a QR code that teammates/reviewers may scan. To help with this last part, developers can navigate to their public project page and see the following UI to configure the correct URL for previewing a published EAS Update:")),Object(a.b)(i.a,{alt:"Preview EAS Update QR Code configuration",src:"/static/images/eas-update/qr-preview.png",style:{maxHeight:"700px",width:"auto"},mdxType:"ImageSpotlight"}),Object(a.b)("p",null,Object(a.b)("a",{parentName:"p",href:"/../../../../../../eas-update/expo-dev-client"},"Learn more")," on using EAS Update with development builds."),Object(a.b)("h2",{id:"future-features"},"Future features"),Object(a.b)("p",null,"EAS Update is still in \u201cpreview\u201d. We are still working on features to make developing with your team easier. They include:"),Object(a.b)("h3",{id:"previewing-updates-with-expo-go"},"Previewing updates with Expo Go"),Object(a.b)("p",null,"Expo Go does not support the modern manifest protocol needed to load updates published with EAS Update. We expect to support this with a new version of Expo Go released along with Expo SDK 45."),Object(a.b)("h3",{id:"generating-qr-codes-with-github-actions-and-comments"},"Generating QR codes with GitHub Actions and comments"),Object(a.b)("p",null,"We plan to add support for commenting valid QR codes on PRs with expo-github-action in the future."))}u.isMDXComponent=!0},GRCl:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/eas-update/developing-with-eas-update",function(){return n("ClL9")}])},KiYJ:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var r=n("cpVT"),o=n("3zh3"),a=(n("q1tI"),n("AeFk"));function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){Object(r.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e){var t=e.alt,n=e.src,r=e.style,i=e.containerStyle;return Object(a.c)("div",{style:l({textAlign:"center",backgroundColor:o.theme.background.secondary,paddingTop:10,paddingBottom:10,marginTop:20,marginBottom:20},i)},Object(a.c)("img",{src:n,alt:t,style:r}))}},cpVT:function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,"a",(function(){return r}))}},[["GRCl",1,0,2,3]]]);