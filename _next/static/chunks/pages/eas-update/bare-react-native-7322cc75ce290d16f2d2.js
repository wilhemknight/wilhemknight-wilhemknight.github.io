_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[106],{"1gt+":function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/eas-update/bare-react-native",function(){return t("qlpr")}])},"7ljp":function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var a=t("q1tI"),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),s=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"===typeof e?e(n):p(p({},n),e)),t},u=function(e){var n=s(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),b=a,m=u["".concat(i,".").concat(b)]||u[b]||d[b]||o;return t?r.a.createElement(m,p(p({ref:n},c),{},{components:t})):r.a.createElement(m,p({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"===typeof e||a){var o=t.length,i=new Array(o);i[0]=b;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"===typeof e?e:a,i[1]=p;for(var c=2;c<o;c++)i[c]=t[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},HALo:function(e,n,t){"use strict";function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}t.d(n,"a",(function(){return a}))},Qetd:function(e,n,t){"use strict";var a=Object.assign.bind(Object);e.exports=a,e.exports.default=e.exports},dhJC:function(e,n,t){"use strict";function a(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}t.d(n,"a",(function(){return a}))},qlpr:function(e,n,t){"use strict";t.r(n),t.d(n,"meta",(function(){return p})),t.d(n,"headings",(function(){return l})),t.d(n,"default",(function(){return s}));var a=t("HALo"),r=t("dhJC"),o=(t("q1tI"),t("7ljp")),i=["components"],p={title:"Using EAS Update with a bare React Native project"},l=[{depth:2,type:"text",title:"App config"},{depth:2,type:"text",title:"EAS config and native files"},{depth:2,type:"text",title:"Configuring the channel manually"},{depth:2,type:"text",title:"What's next"}],c={meta:p,headings:l};function s(e){var n=e.components,t=Object(r.a)(e,i);return Object(o.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"EAS update works with projects created with ",Object(o.b)("inlineCode",{parentName:"p"},"react-native init")," and with Expo projects that are ejected. These projects have ",Object(o.b)("strong",{parentName:"p"},"android")," and ",Object(o.b)("strong",{parentName:"p"},"ios")," directories so that we can modify native files directly."),Object(o.b)("p",null,"The steps for configuring a bare React Native project are identical to the steps for configuring an Expo project. However, you may need to edit some of the code ",Object(o.b)("inlineCode",{parentName:"p"},"eas update:configure")," and ",Object(o.b)("inlineCode",{parentName:"p"},"eas build:configure")," generates depending on how you build and run your project."),Object(o.b)("h2",{id:"app-config"},"App config"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"eas update:configure")," will add two values to our project's app config (",Object(o.b)("strong",{parentName:"p"},"app.json"),"/",Object(o.b)("strong",{parentName:"p"},"app.config.js"),")."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'{\n  "expo": {\n    "runtimeVersion": "1.0.0",\n    "updates": {\n      "url": "https://u.expo.dev/..."\n      ...\n    }\n    ...\n  }\n}\n')),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"runtimeVerson")," property guarantees compatibility between a build's native code and an update. For bare React Native projects, it's necessary to set this value manually whenever you make a change to any native code in your project. Read ",Object(o.b)("a",{parentName:"p",href:"/../../../../../../eas-update/runtime-versions/#custom--runtimeversion"},"our doc on runtime versions")," and learn how to ",Object(o.b)("a",{parentName:"p",href:"/../../../../../../eas-update/runtime-versions/#avoiding-crashes-with-incompatible-updates"},"avoid publishing bad updates"),"."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"updates.url")," property will eventually tell your app to query against for updates. This ",Object(o.b)("inlineCode",{parentName:"p"},"url"),' is our "',Object(o.b)("a",{parentName:"p",href:"https://u.expo.dev%22"},'https://u.expo.dev"')," domain, followed by your project's ID on EAS' servers. If you go to the URL directly, you'll see an error about missing a header. You can see a manifest by adding three query parameters to the URL: ",Object(o.b)("inlineCode",{parentName:"p"},"runtime-version"),", ",Object(o.b)("inlineCode",{parentName:"p"},"channel-name"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"platform"),". If we published an update with a runtime version of ",Object(o.b)("inlineCode",{parentName:"p"},"1.0.0"),", a channel of ",Object(o.b)("inlineCode",{parentName:"p"},"production")," and a platform of ",Object(o.b)("inlineCode",{parentName:"p"},"android"),", the full URL you could visit would be similar to this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"https://u.expo.dev/your-project-id?runtime-version=1.0.0&channel-name=production&platform=android\n")),Object(o.b)("h2",{id:"eas-config-and-native-files"},"EAS config and native files"),Object(o.b)("p",null,"To generate an EAS config (",Object(o.b)("strong",{parentName:"p"},"eas.json"),"), run ",Object(o.b)("inlineCode",{parentName:"p"},"eas build:configure"),". This command will create the ",Object(o.b)("strong",{parentName:"p"},"eas.json")," file and it will also modify the ",Object(o.b)("strong",{parentName:"p"},"AndroidManifest.xml")," file inside the ",Object(o.b)("strong",{parentName:"p"},"android")," directory and the ",Object(o.b)("strong",{parentName:"p"},"Expo.plist")," file inside the ",Object(o.b)("strong",{parentName:"p"},"ios")," directory."),Object(o.b)("p",null,"Inside ",Object(o.b)("strong",{parentName:"p"},"eas.json"),", we'll want to add ",Object(o.b)("inlineCode",{parentName:"p"},"channel")," properties to each build profile we'd like to send updates to. Assuming we're using the default ",Object(o.b)("strong",{parentName:"p"},"eas.json")," configuration, we recommend adding ",Object(o.b)("inlineCode",{parentName:"p"},"channel")," properties to the ",Object(o.b)("inlineCode",{parentName:"p"},"preview")," and ",Object(o.b)("inlineCode",{parentName:"p"},"production")," build profiles."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'{\n  "build": {\n    "preview": {\n      "channel": "preview",\n      ...\n    },\n    "production": {\n      "channel": "production",\n      ...\n    }\n    ...\n  }\n}\n')),Object(o.b)("p",null,"Inside ",Object(o.b)("strong",{parentName:"p"},"AndroidManifest.xml"),", we'll see the following additions:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-xml"},'<meta-data android:name="expo.modules.updates.EXPO_UPDATE_URL" android:value="<https://u.expo.dev/your-project-id>"/>\n<meta-data android:name="expo.modules.updates.EXPO_RUNTIME_VERSION" android:value="1.0.0"/>\n')),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"EXPO_UPDATE_URL")," value should contain your project's ID."),Object(o.b)("p",null,"Inside ",Object(o.b)("strong",{parentName:"p"},"Expo.plist"),", we'll see the following additions:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-xml"},"<key>EXUpdatesRuntimeVersion</key>\n<string>1.0.0</string>\n<key>EXUpdatesURL</key>\n<string><https://u.expo.dev/your-project-id></string>\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"EXUpdatesURL")," value should contain your project's ID."),Object(o.b)("p",null,"Once we've built our project into a build, the ",Object(o.b)("inlineCode",{parentName:"p"},"expo-updates")," library will make requests for manifests with the native configuration defined above, along with the channel specified in ",Object(o.b)("strong",{parentName:"p"},"eas.json"),"."),Object(o.b)("h2",{id:"configuring-the-channel-manually"},"Configuring the channel manually"),Object(o.b)("p",null,"If we create a build with EAS Build, the channel name from ",Object(o.b)("strong",{parentName:"p"},"eas.json")," will automatically be added to our build's ",Object(o.b)("strong",{parentName:"p"},"AndroidManifest.xml")," and ",Object(o.b)("strong",{parentName:"p"},"Expo.plist")," at build time. If you're using EAS Build, the following steps are not necessary."),Object(o.b)("p",null,"If your project is not using EAS Build or you are creating release builds with either ",Object(o.b)("inlineCode",{parentName:"p"},"expo run:ios --configuration Release")," or ",Object(o.b)("inlineCode",{parentName:"p"},"expo run:android --variant release"),", you'll need to set the channel configuration manually inside both ",Object(o.b)("strong",{parentName:"p"},"AndroidManifest.xml")," and ",Object(o.b)("strong",{parentName:"p"},"Expo.plist"),"."),Object(o.b)("p",null,"In ",Object(o.b)("strong",{parentName:"p"},"AndroidManifest.xml"),", you'll need to add the following, replacing ",Object(o.b)("inlineCode",{parentName:"p"},"your-channel-name")," with the channel that matches your project:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-xml"},"<meta-data android:name=\"expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\" android:value=\"{'expo-channel-name':'your-channel-name'}\"/>\n")),Object(o.b)("p",null,"In ",Object(o.b)("strong",{parentName:"p"},"Expo.plist"),", you'll need to add the following, replacing ",Object(o.b)("inlineCode",{parentName:"p"},"your-channel-name")," with the channel that matches your project:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-xml"},"<key>EXUpdatesRequestHeaders</key>\n<dict>\n  <key>expo-channel-name</key>\n  <string>your-channel-name</string>\n</dict>\n")),Object(o.b)("h2",{id:"whats-next"},"What's next"),Object(o.b)("p",null,"Once our project is set up with EAS Update, eventually we'll make native changes to your project. Whenever that happens, we'll need to update the ",Object(o.b)("inlineCode",{parentName:"p"},"runtimeVersion")," in our project's app config. Then, we'll need to run ",Object(o.b)("inlineCode",{parentName:"p"},"eas build:configure"),", which will update ",Object(o.b)("strong",{parentName:"p"},"AndroidManifest.xml")," and ",Object(o.b)("strong",{parentName:"p"},"Expo.plist")," with the new runtime version. Once that's done, we'll need to make new builds, after which, we'll be able to send updates with ",Object(o.b)("inlineCode",{parentName:"p"},"eas update"),"."))}s.isMDXComponent=!0}},[["1gt+",1,0]]]);