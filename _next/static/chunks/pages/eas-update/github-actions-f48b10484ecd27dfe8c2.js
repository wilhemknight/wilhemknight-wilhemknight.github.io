_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[116],{"47bV":function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/eas-update/github-actions",function(){return n("hver")}])},"7ljp":function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return h}));var r=n("q1tI"),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),u=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"===typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=u(n),d=r,h=l["".concat(i,".").concat(d)]||l[d]||b[d]||o;return n?a.a.createElement(h,s(s({ref:t},p),{},{components:n})):a.a.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"===typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},HALo:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},Qetd:function(e,t,n){"use strict";var r=Object.assign.bind(Object);e.exports=r,e.exports.default=e.exports},dhJC:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}n.d(t,"a",(function(){return r}))},hver:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return s})),n.d(t,"headings",(function(){return c})),n.d(t,"default",(function(){return u}));var r=n("HALo"),a=n("dhJC"),o=(n("q1tI"),n("7ljp")),i=["components"],s={title:"Using GitHub Actions"},c=[{depth:2,type:"text",title:"Publish updates on push"}],p={meta:s,headings:c};function u(e){var t=e.components,n=Object(a.a)(e,i);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,'A GitHub Action is a cloud function that runs every time an event on GitHub occurs. We can use GitHub Actions to automate building and publishing updates when you or members on your team merge to a branch, like "production". This makes the process of deploying consistent and fast, leaving you more time to develop your app.'),Object(o.b)("h2",{id:"publish-updates-on-push"},"Publish updates on push"),Object(o.b)("p",null,"We can configure GitHub Actions to run on any GitHub event. One of the most common use cases is to publish an update when code is pushed. Below are the steps to publish an update every time an update is pushed:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create a file path named ",Object(o.b)("strong",{parentName:"p"},".github/workflows/update.yml")," at the root of your project.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Inside ",Object(o.b)("strong",{parentName:"p"},"update.yml"),", copy and paste this code:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-yaml"},'name: update\non: push\n\njobs:\n  update:\n    name: EAS Update\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for EXPO_TOKEN\n        run: |\n          if [ -z "${{ secrets.EXPO_TOKEN }}" ]; then\n            echo "You must provide an EXPO_TOKEN secret linked to this project\'s Expo account in this repo\'s secrets. Learn more: https://docs.expo.dev/eas-update/github-actions"\n            exit 1\n          fi\n\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Setup Node\n        uses: actions/setup-node@v2\n        with:\n          node-version: 16.x\n          cache: yarn\n\n      - name: Setup Expo\n        uses: expo/expo-github-action@v7\n        with:\n          expo-version: latest\n          eas-version: latest\n          token: ${{ secrets.EXPO_TOKEN }}\n\n      - name: Find yarn cache\n        id: yarn-cache-path\n        run: echo "::set-output name=dir::$(yarn cache dir)"\n\n      - name: Restore cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.yarn-cache-path.outputs.dir }}\n          key: ${{ runner.os }}-yarn-${{ hashFiles(\'**/yarn.lock\') }}\n          restore-keys: ${{ runner.os }}-yarn-\n\n      - name: Install dependencies\n        run: yarn install --immutable\n\n      - name: Publish update\n        run: eas update --auto\n')),Object(o.b)("p",{parentName:"li"},"In the code above, we set the action to run every time code is pushed to any branch. In the ",Object(o.b)("inlineCode",{parentName:"p"},"update")," job, we set up Node, in addition to Expo's GitHub Action: ",Object(o.b)("inlineCode",{parentName:"p"},"expo-github-action"),". We then add a couple steps to cache any dependencies installed from the last run to speed this script up on subsequent runs. At the end, we install dependencies (",Object(o.b)("inlineCode",{parentName:"p"},"yarn install"),"), then publish the update with ",Object(o.b)("inlineCode",{parentName:"p"},"eas update --auto"),". Since we're using the ",Object(o.b)("inlineCode",{parentName:"p"},"--auto")," flag, the EAS branch will be named after the GitHub branch, and the message for the update will match the commit's message.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Finally, we need to give the script above permission to run by providing an ",Object(o.b)("inlineCode",{parentName:"p"},"EXPO_TOKEN")," environment variable."),Object(o.b)("ol",{parentName:"li"},Object(o.b)("li",{parentName:"ol"},"Navigate to ",Object(o.b)("a",{parentName:"li",href:"https://expo.dev/settings/access-tokens"},"https://expo.dev/settings/access-tokens"),"."),Object(o.b)("li",{parentName:"ol"},'Click "Create" to create a new access token.'),Object(o.b)("li",{parentName:"ol"},"Copy the token generated."),Object(o.b)("li",{parentName:"ol"},"Navigate to ",Object(o.b)("a",{parentName:"li",href:"https://github.com/your-username/your-repo-name/settings/secrets/actions"},"https://github.com/your-username/your-repo-name/settings/secrets/actions"),', replacing "your-username" and "your-repo-name" with your project\'s info.'),Object(o.b)("li",{parentName:"ol"},'Click "New repository secret"'),Object(o.b)("li",{parentName:"ol"},'Make the secret\'s name "EXPO_TOKEN", then paste the access token in as the value.')))),Object(o.b)("p",null,"Your GitHub Action should be set up now. Every time when a developer merges code into the repo, this action will build an update and publish it, making it available to all of our devices with builds that have access to the EAS branch."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Some repositories or organizations might need to explicitly enable GitHub Workflows and allow third-party Actions.")))}u.isMDXComponent=!0}},[["47bV",1,0]]]);