_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[198],{"4+CG":function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/push-notifications/receiving-notifications",function(){return n("Au+K")}])},"7ljp":function(e,t,n){"use strict";n.d(t,"a",(function(){return f})),n.d(t,"b",(function(){return h}));var i=n("q1tI"),o=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),p=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"===typeof e?e(t):s(s({},t),e)),n},f=function(e){var t=p(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,a=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),f=p(n),d=i,h=f["".concat(a,".").concat(d)]||f[d]||u[d]||r;return n?o.a.createElement(h,s(s({ref:t},l),{},{components:n})):o.a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"===typeof e||i){var r=n.length,a=new Array(r);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"===typeof e?e:i,a[1]=s;for(var l=2;l<r;l++)a[l]=n[l];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},"Au+K":function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return s})),n.d(t,"headings",(function(){return c})),n.d(t,"default",(function(){return p}));var i=n("HALo"),o=n("dhJC"),r=(n("q1tI"),n("7ljp")),a=["components"],s={title:"Receiving Notifications"},c=[{depth:2,type:"text",title:"Foreground Notification Behavior"},{depth:2,type:"text",title:"Closed Notification Behaviour"},{depth:2,type:"text",title:"Notification Event Listeners"},{depth:2,type:"text",title:"Next steps"},{depth:2,type:"text",title:"See also"}],l={meta:s,headings:c};function p(e){var t=e.components,n=Object(o.a)(e,a);return Object(r.b)("wrapper",Object(i.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"You can now successfully send a notification to your app! If all you wanted was purely informational notifications, then you can stop here. But Expo provides the capabilities to do so much more: maybe you want to update the UI based on the notification, or maybe navigate to a particular screen if a notification was selected."),Object(r.b)("p",null,"Like most things with Expo, handling notifications is simple and straightforward across all platforms. All you need to do is add a listener using the ",Object(r.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/"},Object(r.b)("inlineCode",{parentName:"a"},"Notifications")," API"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\nimport { Text, View } from 'react-native';\nimport * as Notifications from 'expo-notifications';\n\n// This refers to the function defined earlier in this guide, in Push Notifications Set Up\nimport registerForPushNotificationsAsync from './registerForPushNotificationsAsync';\n\n/* @info This handler determines how your app handles notifications that come in while the app is foregrounded */\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n/* @end */\n\nexport default class App extends React.Component {\n  state = {\n    notification: {},\n  };\n\n  componentDidMount() {\n    registerForPushNotificationsAsync();\n\n    /* @info This listener is fired whenever a notification is received while the app is foregrounded. */\n    Notifications.addNotificationReceivedListener(this._handleNotification);\n    /* @end */\n\n    /* @info This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed). This listener is especially useful for routing users to a particular screen after they tap on a particular notification. */\n    Notifications.addNotificationResponseReceivedListener(this._handleNotificationResponse);/* @end */\n\n  }\n\n  _handleNotification = notification => {\n    /* @info Want to know what the format of the object this listener receives is? Find the specifics in the expo-notifications documentation */\n    this.setState({ notification: notification });/* @end */\n\n  };\n\n  _handleNotificationResponse = response => {\n    /* @info Want to know what the format of the object this listener receives is? Find the specifics in the expo-notifications documentation */\n    console.log(response);/* @end */\n\n  };\n\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Your expo push token: {this.state.expoPushToken}</Text>\n        <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n          <Text>Title: {this.state.notification.request.content.title}</Text>\n          <Text>Body: {this.state.notification.request.content.body}</Text>\n          <Text>Data: {JSON.stringify(this.state.notification.request.content.data)}</Text>\n        </View>\n      </View>\n    );\n  }\n}\n")),Object(r.b)("h2",{id:"foreground-notification-behavior"},"Foreground Notification Behavior"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Important Note"),": To set the behavior for when notifications are received while your app is ",Object(r.b)("strong",{parentName:"p"},"foregrounded"),", use ",Object(r.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#setnotificationhandlerhandler-notificationhandler--null-void"},Object(r.b)("inlineCode",{parentName:"a"},"Notifications.setNotificationHandler")),". You can use the callback to set options like:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"shouldShowAlert")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"shouldPlaySound")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"shouldSetBadge"))),Object(r.b)("h2",{id:"closed-notification-behaviour"},"Closed Notification Behaviour"),Object(r.b)("p",null,"On Android, users can set certain OS-level settings (",Object(r.b)("strong",{parentName:"p"},"usually"),' revolving around performance and battery optimisation), that can prevent notifications from being delivered when the app is closed. One such setting is the "Deep Clear" option on OnePlus devices.'),Object(r.b)("h2",{id:"notification-event-listeners"},"Notification Event Listeners"),Object(r.b)("p",null,"Event listeners added using ",Object(r.b)("inlineCode",{parentName:"p"},"addNotificationReceivedListener")," and ",Object(r.b)("inlineCode",{parentName:"p"},"addNotificationResponseReceivedListener")," will receive an object when a notification is received or interacted with, respectively. See the ",Object(r.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notification"},"documentation")," for information on these objects."),Object(r.b)("p",null,"There are two different subscriptions for this so that you can easily address cases where a notification comes in while your app is open and foregrounded, ",Object(r.b)("strong",{parentName:"p"},"and")," cases where a notification comes in while your app is backgrounded or closed, and the user taps on the notification."),Object(r.b)("h2",{id:"next-steps"},"Next steps"),Object(r.b)("p",null,"Now that you're able to send & receive notifications, read through all of ",Object(r.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/"},Object(r.b)("inlineCode",{parentName:"a"},"expo-notifications"),"'s feature set")," to get a sense of the possibilities!"),Object(r.b)("h2",{id:"see-also"},"See also"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Having trouble? Visit ",Object(r.b)("a",{parentName:"li",href:"/push-notifications/faq/"},"Expo's notification FAQ page"))))}p.isMDXComponent=!0},HALo:function(e,t,n){"use strict";function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return i}))},Qetd:function(e,t,n){"use strict";var i=Object.assign.bind(Object);e.exports=i,e.exports.default=e.exports},dhJC:function(e,t,n){"use strict";function i(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}n.d(t,"a",(function(){return i}))}},[["4+CG",1,0]]]);