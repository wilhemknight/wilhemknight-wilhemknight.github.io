_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[212],{"7ljp":function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n("q1tI"),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=i.a.createContext({}),c=function(e){var t=i.a.useContext(p),n=t;return e&&(n="function"===typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=c(e.components);return i.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},h=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=c(n),h=a,m=b["".concat(s,".").concat(h)]||b[h]||d[h]||r;return n?i.a.createElement(m,o(o({ref:t},p),{},{components:n})):i.a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"===typeof e||a){var r=n.length,s=new Array(r);s[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"===typeof e?e:a,s[1]=o;for(var p=2;p<r;p++)s[p]=n[p];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},GE7p:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/technical-specs/expo-updates-0",function(){return n("jsVp")}])},HALo:function(e,t,n){"use strict";function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return a}))},Qetd:function(e,t,n){"use strict";var a=Object.assign.bind(Object);e.exports=a,e.exports.default=e.exports},dhJC:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}n.d(t,"a",(function(){return a}))},jsVp:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return o})),n.d(t,"headings",(function(){return l})),n.d(t,"default",(function(){return c}));var a=n("HALo"),i=n("dhJC"),r=(n("q1tI"),n("7ljp")),s=["components"],o={title:"Expo Updates",sidebar_title:"Expo Updates"},l=[{depth:2,type:"text",title:"Introduction"},{depth:3,type:"text",title:"Conformance"},{depth:3,type:"text",title:"Overview"},{depth:2,type:"text",title:"Manifest Request"},{depth:2,type:"text",title:"Manifest Response"},{depth:3,type:"text",title:"Manifest Response Headers"},{depth:3,type:"text",title:"Manifest Response Body"},{depth:3,type:"text",title:"Multipart Manifest Response"},{depth:3,type:"text",title:"Manifest Extensions"},{depth:2,type:"text",title:"Asset Request"},{depth:2,type:"text",title:"Asset Response"},{depth:3,type:"text",title:"Asset Response Headers"},{depth:3,type:"text",title:"Compression"},{depth:2,type:"text",title:"Code Signing"},{depth:2,type:"text",title:"Client Library"}],p={meta:o,headings:l};function c(e){var t=e.components,n=Object(i.a)(e,s);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Version 0"),Object(r.b)("p",null,"Updated 2021-12-01"),Object(r.b)("hr",null),Object(r.b)("h2",{id:"introduction"},"Introduction"),Object(r.b)("p",null,"This is the specification for Expo Updates, a protocol for delivering updates to Expo apps running on multiple platforms."),Object(r.b)("h3",{id:"conformance"},"Conformance"),Object(r.b)("p",null,"Conforming servers and client libraries must fulfill all normative requirements. Conformance requirements are described in this document by both descriptive assertions and key words with clearly defined meanings."),Object(r.b)("p",null,"The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in the normative portions of this document are to be interpreted as described in ",Object(r.b)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc2119"},"IETF RFC 2119"),". These key words may appear in lowercase and still retain their meaning unless explicitly declared as non\u2010normative."),Object(r.b)("p",null,"A conforming implementation of this protocol may provide additional functionality, but must not where explicitly disallowed or would otherwise result in non\u2010conformance."),Object(r.b)("h3",{id:"overview"},"Overview"),Object(r.b)("p",null,"Conforming servers and client libraries MUST follow the HTTP spec as described in ",Object(r.b)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7231"},"RFC 7231")," as well as the more precise guidance described in this spec."),Object(r.b)("p",null,"An ",Object(r.b)("em",{parentName:"p"},"update")," is defined as a ",Object(r.b)("a",{parentName:"p",href:"/technical-specs/expo-updates-0/#manifest-response"},Object(r.b)("em",{parentName:"a"},"manifest"))," together with the assets referenced inside the manifest.\nExpo Updates is a protocol for assembling and delivering updates to apps running on multiple platforms."),Object(r.b)("p",null,"An app running a conformant Expo Updates client library MUST load the most recent update saved in the client library's cache, possibly after filtering by the contents of the manifest's ",Object(r.b)("a",{parentName:"p",href:"/technical-specs/expo-updates-0/#manifest-response-body"},Object(r.b)("em",{parentName:"a"},"metadata")),"."),Object(r.b)("p",null,"The following describes how a conformant Expo Updates client library MUST retrieve a new update from a conformant server:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"The client library will make a ",Object(r.b)("a",{parentName:"li",href:"/technical-specs/expo-updates-0/#request"},"request")," for the most recent manifest, with constraints specified in the headers."),Object(r.b)("li",{parentName:"ol"},"If a new manifest is downloaded, the client library will proceed to make additional requests to download and store any missing assets specified in the manifest."),Object(r.b)("li",{parentName:"ol"},"The client library will edit its local state to reflect that a new update has been added to the local cache. It will also update the local state with the new ",Object(r.b)("inlineCode",{parentName:"li"},"expo-manifest-filters")," and ",Object(r.b)("inlineCode",{parentName:"li"},"expo-server-defined-headers")," found in the response ",Object(r.b)("a",{parentName:"li",href:"/technical-specs/expo-updates-0/#manifest-response-headers"},"headers"),".")),Object(r.b)("p",null,"The primary consumers of this spec are Expo Application Services and organizations that wish to manage their own update server to satisfy internal requirements."),Object(r.b)("h2",{id:"manifest-request"},"Manifest Request"),Object(r.b)("p",null,"A conformant client library MUST make a GET request with the headers:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"expo-platform"),", to specify the platform type the client is running on.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"iOS MUST be ",Object(r.b)("inlineCode",{parentName:"li"},"expo-platform: ios"),"."),Object(r.b)("li",{parentName:"ul"},"Android MUST be ",Object(r.b)("inlineCode",{parentName:"li"},"expo-platform: android"),"."),Object(r.b)("li",{parentName:"ul"},"If it is not one of these platforms, the server SHOULD return a 400 or a 404"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"expo-runtime-version")," MUST be a runtime version compatible with the client. A runtime version stipulates the native code setup a client is running. It should be set when the client is built. For example, in an iOS client, the value may be set in a plist file."),Object(r.b)("li",{parentName:"ol"},"Any headers stipulated by a previous responses' ",Object(r.b)("a",{parentName:"li",href:"/technical-specs/expo-updates-0/#manifest-response-headers"},"server defined headers"),".")),Object(r.b)("p",null,"A conformant client library MUST send at least one of ",Object(r.b)("inlineCode",{parentName:"p"},"accept: application/expo+json"),", ",Object(r.b)("inlineCode",{parentName:"p"},"accept: application/json"),", or ",Object(r.b)("inlineCode",{parentName:"p"},"accept: multipart/mixed")," based on the supported response structures though SHOULD send ",Object(r.b)("inlineCode",{parentName:"p"},"accept: application/expo+json, application/json, multipart/mixed"),'. A conformant client library MAY express preference using "q" parameters as specified in ',Object(r.b)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.1"},"RFC 7231"),", which default to ",Object(r.b)("inlineCode",{parentName:"p"},"1"),"."),Object(r.b)("p",null,"A conformant client library configured to perform ",Object(r.b)("a",{parentName:"p",href:"/technical-specs/expo-updates-0/#code-signing"},"code signing")," verification MUST send a ",Object(r.b)("inlineCode",{parentName:"p"},"expo-expect-signature")," header to indicate that it expects the conformant server to include the ",Object(r.b)("inlineCode",{parentName:"p"},"expo-signature")," header in the manifest response. ",Object(r.b)("inlineCode",{parentName:"p"},"expo-expect-signature")," is an ",Object(r.b)("a",{parentName:"p",href:"/technical-specs/expo-sfv-0/"},"Expo SFV")," dictionary which MAY contain any of the following key value pairs:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"sig")," SHOULD contain the boolean ",Object(r.b)("inlineCode",{parentName:"li"},"true")," to indicate that it requires a conformant server to respond with the signature in the ",Object(r.b)("inlineCode",{parentName:"li"},"sig")," key."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"keyid")," SHOULD contain the keyId of the public key the client will use to verify the signature"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"alg")," SHOULD contain the algorithm the client will use to verify the signature")),Object(r.b)("p",null,"Example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'accept: application/expo+json;q=0.9, application/json;q=0.8, multipart/mixed\nexpo-platform: *\nexpo-runtime-version: *\nexpo-expect-signature: sig, keyid="root", alg="rsa-v1_5-sha256"\n')),Object(r.b)("h2",{id:"manifest-response"},"Manifest Response"),Object(r.b)("p",null,"A conformant server MUST return a response structured in at least one of two ways. A conformant server MAY support either or both response structures, and when an unsupported response structure is requested the server SHOULD respond with an HTTP ",Object(r.b)("inlineCode",{parentName:"p"},"406")," error status."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"For a response with ",Object(r.b)("inlineCode",{parentName:"li"},"content-type: application/json")," or ",Object(r.b)("inlineCode",{parentName:"li"},"content-type: application/expo+json"),", the ",Object(r.b)("a",{parentName:"li",href:"/technical-specs/expo-updates-0/#manifest-response-headers"},"manifest headers")," MUST be sent in the response headers and the ",Object(r.b)("a",{parentName:"li",href:"/technical-specs/expo-updates-0/#manifest-response-body"},"manifest body")," MUST be sent in the response body."),Object(r.b)("li",{parentName:"ul"},"For a response with ",Object(r.b)("inlineCode",{parentName:"li"},"content-type: multipart/mixed"),", the response MUST be structured as specified in the ",Object(r.b)("a",{parentName:"li",href:"/technical-specs/expo-updates-0/#multipart-manifest-response"},"multipart manifest response")," section.")),Object(r.b)("p",null,"The choice of manifest and headers are dependent on the values of the request headers. A conformant server MUST respond with a manifest for the most recent update, ordered by creation time, satisfying all parameters and constraints imposed by the ",Object(r.b)("a",{parentName:"p",href:"/technical-specs/expo-updates-0/#manifest-request"},"request headers"),". The server MAY use any properties of the request like its headers and source IP address to choose amongst several updates that all satisfy the request's constraints."),Object(r.b)("h3",{id:"manifest-response-headers"},"Manifest Response Headers"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"expo-protocol-version: 0\nexpo-sfv-version: 0\nexpo-manifest-filters: &lt;expo-sfv&gt;\nexpo-server-defined-headers: &lt;expo-sfv&gt;\ncache-control: *\ncontent-type: *\nexpo-signature: *\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"expo-protocol-version")," describes the version of the protocol defined in this spec and MUST be ",Object(r.b)("inlineCode",{parentName:"li"},"0"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"expo-sfv-version")," MUST be ",Object(r.b)("inlineCode",{parentName:"li"},"0"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"expo-manifest-filters")," is an ",Object(r.b)("a",{parentName:"li",href:"/technical-specs/expo-sfv-0/"},"Expo SFV")," dictionary. It is used to filter updates stored by the client library by the ",Object(r.b)("inlineCode",{parentName:"li"},"metadata")," attribute found in the ",Object(r.b)("a",{parentName:"li",href:"/technical-specs/expo-updates-0/#manifest-response-body"},"manifest"),". If a field is mentioned in the filter, the corresponding field in the metadata must either be missing or equal for the update to be included. The client library MUST store the manifest filters until it is overwritten by a newer response."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"expo-server-defined-headers")," is an ",Object(r.b)("a",{parentName:"li",href:"/technical-specs/expo-sfv/"},"Expo SFV")," dictionary. It defines headers that a client library MUST store until overwritten by a newer dictionary, and they MUST be included in every subsequent ",Object(r.b)("a",{parentName:"li",href:"/technical-specs/expo-updates-0/#manifest-request"},"manifest request"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"cache-control")," MUST be set to an appropriately short period of time. A value of ",Object(r.b)("inlineCode",{parentName:"li"},"cache-control: private, max-age=0")," is recommended to ensure the newest manifest is returned. Setting longer cache ages could result in stale updates."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"content-type")," MUST be determined by ",Object(r.b)("em",{parentName:"li"},"proactive negotiation")," as defined in ",Object(r.b)("a",{parentName:"li",href:"https://tools.ietf.org/html/rfc7231#section-3.4.1"},"RFC 7231"),". Since the client library is ",Object(r.b)("a",{parentName:"li",href:"/technical-specs/expo-updates-0/#manifest-request"},"required")," to send an ",Object(r.b)("inlineCode",{parentName:"li"},"accept")," header with each manifest request, this will always be either ",Object(r.b)("inlineCode",{parentName:"li"},"application/expo+json"),", ",Object(r.b)("inlineCode",{parentName:"li"},"application/json"),"; otherwise the request would return a ",Object(r.b)("inlineCode",{parentName:"li"},"406")," error."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"expo-signature")," SHOULD contain the signature of the manifest to be used during the validation step of ",Object(r.b)("a",{parentName:"li",href:"/technical-specs/expo-updates-0/#code-signing"},"code signing")," if the request for the manifest contained the ",Object(r.b)("inlineCode",{parentName:"li"},"expo-expect-signature")," header. This is an ",Object(r.b)("a",{parentName:"li",href:"/technical-specs/expo-sfv-0/"},"Expo SFV")," dictionary which MAY contain any of the following key value pairs:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"sig")," MUST contain the signature of the manifest. The name of this field matches that of ",Object(r.b)("inlineCode",{parentName:"li"},"expo-expect-signature"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"keyid")," MAY contain the keyId of the key the server used to sign the response. The client SHOULD use the certificate that matches this ",Object(r.b)("inlineCode",{parentName:"li"},"keyid")," to verify the signature."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"alg")," MAY contain the algorithm the server used to sign the response. The client SHOULD use this field only if it matches the algorithm defined for the certificate matching ",Object(r.b)("inlineCode",{parentName:"li"},"keyid"),".")))),Object(r.b)("h3",{id:"manifest-response-body"},"Manifest Response Body"),Object(r.b)("p",null,"The body of the response MUST be a manifest, which is defined as JSON conforming to both the following ",Object(r.b)("inlineCode",{parentName:"p"},"Manifest")," definition expressed in ",Object(r.b)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"TypeScript")," and the detailed descriptions for each field:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"type Manifest = {\n  id: string;\n  createdAt: string;\n  runtimeVersion: string;\n  launchAsset: Asset;\n  assets: Asset[];\n  metadata: { [key: string]: string };\n  extra: { [key: string]: any };\n}\n\ntype Asset = {\n  hash?: string;\n  key: string;\n  contentType: string;\n  fileExtension?: string;\n  url: string;\n}\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"id"),": The ID MUST uniquely specify the manifest."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"createdAt"),": The date and time at which the update was created is essential as the client library selects the most recent update (subject to any constraints supplied by the ",Object(r.b)("inlineCode",{parentName:"li"},"expo-manifest-filters")," header). The datetime should be formatted according to ",Object(r.b)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/ISO_8601"},"ISO 8601"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"runtimeVersion"),": Can be any string defined by the developer. It stipulates what native code setup is required to run the associated update."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"launchAsset"),": A special asset that is the entry point of the application code. The ",Object(r.b)("inlineCode",{parentName:"li"},"fileExtension")," field will be ignored for this asset and SHOULD be omitted."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"assets"),": An array of assets used by the update bundle, such as JavaScript, pictures, and fonts. All assets (including the ",Object(r.b)("inlineCode",{parentName:"li"},"launchAsset"),") should be downloaded to disk before executing the the update, and a mapping of asset ",Object(r.b)("inlineCode",{parentName:"li"},"key"),"s to locations on disk should be provided to application code."),Object(r.b)("li",{parentName:"ul"},"Properties of each asset object:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"hash"),": Base64URL-encoded SHA-256 hash of the file to guarantee integrity. Base64URL encoding is defined by ",Object(r.b)("a",{parentName:"li",href:"https://datatracker.ietf.org/doc/html/rfc4648#section-5"},"IETF RFC 4648"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"key"),": Key used to reference this asset from the update's application code. This key, for example, may be generated by a separate build step that processes the application code, such as a bundler."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"contentType"),": The MIME type of the file as defined by ",Object(r.b)("a",{parentName:"li",href:"https://tools.ietf.org/html/rfc2045"},"RFC 2045"),". e.g. ",Object(r.b)("inlineCode",{parentName:"li"},"application/javascript"),", ",Object(r.b)("inlineCode",{parentName:"li"},"image/jpeg"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"fileExtension"),": The suggested extension to use when a file is saved on a client. Some platforms, such as iOS, require certain file types to be saved with an extension. The extension MUST be prefixed with a ",Object(r.b)("inlineCode",{parentName:"li"},"."),". e.g. ",Object(r.b)("strong",{parentName:"li"},".jpeg"),". In some cases, such as the launchAsset, this field will be ignored in favor of a locally determined extension. If the field is omitted and there is no locally stipulated extension, the asset will be saved without an extension, e.g. ",Object(r.b)("inlineCode",{parentName:"li"},"./filename")," with no ",Object(r.b)("inlineCode",{parentName:"li"},".")," at the end.\nA conforming client SHOULD prefix a file extension with a ",Object(r.b)("inlineCode",{parentName:"li"},".")," if a file extension is not empty and missing the ",Object(r.b)("inlineCode",{parentName:"li"},".")," prefix."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"url"),": Location at which the file may be fetched."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"metadata"),": The metadata associated with an update. It is a string-valued dictionary. The server MAY send back anything it wishes to be used for filtering the updates. The metadata MUST pass the filter defined in the accompanying ",Object(r.b)("inlineCode",{parentName:"li"},"expo-manifest-filters")," header."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"extra"),': For storage of optional "extra" information such as third-party configuration. For example, if the update is hosted on Expo Application Services (EAS), the EAS project ID may be included:',Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-json"},'"extra": {\n  "eas": {\n    "projectId": "00000000-0000-0000-0000-000000000000"\n  }\n}\n')))),Object(r.b)("h3",{id:"multipart-manifest-response"},"Multipart Manifest Response"),Object(r.b)("p",null,"A manifest response of this format is defined by the ",Object(r.b)("inlineCode",{parentName:"p"},"multipart/mixed")," MIME type as defined by ",Object(r.b)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc2046#section-5.1"},"RFC 2046"),"."),Object(r.b)("p",null,"Headers for this response format are the same as ",Object(r.b)("a",{parentName:"p",href:"/technical-specs/expo-updates-0/#manifest-response-headers"},"manifest response headers"),", with the following exceptions:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"content-type")," should have a ",Object(r.b)("inlineCode",{parentName:"li"},"multipart/mixed")," value as defined by ",Object(r.b)("a",{parentName:"li",href:"https://tools.ietf.org/html/rfc2046#section-5.1"},"RFC 2046")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"expo-signature")," should be included in the ",Object(r.b)("inlineCode",{parentName:"li"},"manifest")," part headers below if codesigning is being used.")),Object(r.b)("p",null,"Each part is defined as follows:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"REQUIRED ",Object(r.b)("inlineCode",{parentName:"li"},'"manifest"')," part:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"MUST have part header ",Object(r.b)("inlineCode",{parentName:"li"},'content-disposition: inline; name="manifest"'),"."),Object(r.b)("li",{parentName:"ul"},"MUST have part header ",Object(r.b)("inlineCode",{parentName:"li"},"content-type: application/json")," or ",Object(r.b)("inlineCode",{parentName:"li"},"application/expo+json"),"."),Object(r.b)("li",{parentName:"ul"},"SHOULD have part header ",Object(r.b)("inlineCode",{parentName:"li"},"expo-signature")," as defined in ",Object(r.b)("a",{parentName:"li",href:"/technical-specs/expo-updates-0/#manifest-response-headers"},"manifest response headers")," if code signing is being used."),Object(r.b)("li",{parentName:"ul"},"The ",Object(r.b)("a",{parentName:"li",href:"/technical-specs/expo-updates-0/#manifest-response-body"},"manifest body")," MUST be sent in the part body."))),Object(r.b)("li",{parentName:"ol"},"OPTIONAL ",Object(r.b)("inlineCode",{parentName:"li"},'"extensions"')," part:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"MUST have part header ",Object(r.b)("inlineCode",{parentName:"li"},'content-disposition: inline; name="extensions"'),"."),Object(r.b)("li",{parentName:"ul"},"MUST have part header ",Object(r.b)("inlineCode",{parentName:"li"},"content-type: application/json"),"."),Object(r.b)("li",{parentName:"ul"},"The ",Object(r.b)("a",{parentName:"li",href:"/technical-specs/expo-updates-0/#manifest-extensions"},"manifest extensions")," MUST be sent in the part body.")))),Object(r.b)("h3",{id:"manifest-extensions"},"Manifest Extensions"),Object(r.b)("p",null,"Defined as JSON conforming to both the following ",Object(r.b)("inlineCode",{parentName:"p"},"ManifestExtensions")," definition expressed in ",Object(r.b)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"TypeScript")," and the detailed descriptions for each field:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"type ManifestExtensions = {\n  assetRequestHeaders: ExpoAssetHeaderDictionary;\n  ...\n}\n\ntype ExpoAssetHeaderDictionary = {\n  [assetKey: string]: {\n    'header-name': 'header-value',\n    ...\n  };\n  ...\n}\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"assetRequestHeaders"),": MAY contain an dictionary of header (key, value) pairs to include with asset requests.")),Object(r.b)("h2",{id:"asset-request"},"Asset Request"),Object(r.b)("p",null,"A conformant client library MUST make a GET request to the asset URLs specified by the manifest. The client library SHOULD include a header accepting the asset's content type as specified in the manifest. Additionally, the client library SHOULD specify the compression encoding the client library is capable of handling."),Object(r.b)("p",null,"Example headers:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"accept: image/jpeg, */*\naccept-encoding: br, gzip\n")),Object(r.b)("p",null,"A conformant client library MUST also include any header (key, value) pairs included in ",Object(r.b)("a",{parentName:"p",href:"/technical-specs/expo-updates-0/#manifest-extensions"},Object(r.b)("inlineCode",{parentName:"a"},"assetRequestHeaders"))," for this asset key."),Object(r.b)("h2",{id:"asset-response"},"Asset Response"),Object(r.b)("p",null,"An asset located at a particular URL MUST NOT be changed or removed since client libraries may fetch assets for any update at any time. A conformant client MUST verify that the base64url-encoded SHA-256 hash of the asset matches the ",Object(r.b)("inlineCode",{parentName:"p"},"hash")," field for the asset from the manifest."),Object(r.b)("h3",{id:"asset-response-headers"},"Asset Response Headers"),Object(r.b)("p",null,"The asset MUST be encoded using a compression format that the client supports according to the request's ",Object(r.b)("inlineCode",{parentName:"p"},"accept-encoding")," header. The server MAY serve uncompressed assets. The response MUST include a ",Object(r.b)("inlineCode",{parentName:"p"},"content-type")," header with the MIME type of the asset.\nFor example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"content-encoding: br\ncontent-type: application/javascript\n")),Object(r.b)("p",null,"An asset is RECOMMENDED to be served with a ",Object(r.b)("inlineCode",{parentName:"p"},"cache-control")," header set to a long duration as an asset located at a given URL must not change. For example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"cache-control: public, max-age=31536000, immutable\n")),Object(r.b)("h3",{id:"compression"},"Compression"),Object(r.b)("p",null,"Assets SHOULD be capable of being served with ",Object(r.b)("a",{parentName:"p",href:"https://www.gnu.org/software/gzip/"},"Gzip")," and ",Object(r.b)("a",{parentName:"p",href:"https://github.com/google/brotli"},"Brotli")," compression."),Object(r.b)("h2",{id:"code-signing"},"Code Signing"),Object(r.b)("p",null,"Expo Updates supports code signing the manifest. This also transitively signs the assets since their hashes are present in the manifest and verified by a conformant client. A conformant client MAY request the manifest be signed using a private key, and then MUST verify the signature of the manifest using the corresponding code signing certificate before it is used or any corresponding assets are downloaded. The client MUST verify that the signing certificate is either a self-signed, trusted root certificate or is in a certificate chain signed by a trusted root certificate. In either case, the root certificate MUST be embedded in the application or device's operating system."),Object(r.b)("h2",{id:"client-library"},"Client Library"),Object(r.b)("p",null,"See the ",Object(r.b)("a",{parentName:"p",href:"https://github.com/expo/expo/tree/main/packages/expo-updates"},"reference client library")))}c.isMDXComponent=!0}},[["GE7p",1,0]]]);