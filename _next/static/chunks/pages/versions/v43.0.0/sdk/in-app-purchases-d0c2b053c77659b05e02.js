_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[1149],{Mu6J:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/versions/v43.0.0/sdk/in-app-purchases",function(){return n("ZJjC")}])},ZJjC:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return c})),n.d(t,"headings",(function(){return l})),n.d(t,"default",(function(){return d}));var o=n("HALo"),a=n("dhJC"),p=(n("q1tI"),n("7ljp")),r=n("3Ukx"),i=n("hykZ"),s=["components"],c={title:"InAppPurchases",sourceCodeUrl:"https://github.com/expo/expo/tree/sdk-43/packages/expo-in-app-purchases"},l=[{depth:2,type:"text",title:"Installation"},{depth:3,type:"text",title:"Add the package to your dependencies"},{depth:3,type:"text",title:"Configure for iOS"},{depth:3,type:"text",title:"Configure for Android"},{depth:2,type:"text",title:"Setup"},{depth:3,type:"text",title:"iOS"},{depth:3,type:"text",title:"Android"},{depth:2,type:"text",title:"API"}],u={meta:c,headings:l};function d(e){var t=e.components,n=Object(a.a)(e,s);return Object(p.b)("wrapper",Object(o.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(p.b)("p",null,Object(p.b)("strong",{parentName:"p"},Object(p.b)("inlineCode",{parentName:"strong"},"expo-in-app-purchases"))," provides an API to accept payments for in-app products. Internally this relies on the ",Object(p.b)("a",{parentName:"p",href:"https://developer.android.com/google/play/billing/billing_library_overview"},"Google Play Billing")," library on Android and the ",Object(p.b)("a",{parentName:"p",href:"https://developer.apple.com/documentation/storekit?language=objc"},"Storekit")," framework on iOS."),Object(p.b)(i.a,{android:!0,ios:!0,mdxType:"PlatformsSection"}),Object(p.b)("h2",{id:"installation"},"Installation"),Object(p.b)("p",null,"This module is currently only available in the ",Object(p.b)("a",{parentName:"p",href:"/introduction/managed-vs-bare/#bare-workflow"},"bare")," workflow."),Object(p.b)("p",null,"You must ensure that you have ",Object(p.b)("a",{parentName:"p",href:"/../../../../../../bare/installing-expo-modules/"},"installed and configured Expo modules")," before continuing."),Object(p.b)("h3",{id:"add-the-package-to-your-dependencies"},"Add the package to your dependencies"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre"},"npm install expo-in-app-purchases\n")),Object(p.b)("h3",{id:"configure-for-ios"},"Configure for iOS"),Object(p.b)("p",null,"Run ",Object(p.b)("inlineCode",{parentName:"p"},"npx pod-install")," after installing the npm package."),Object(p.b)("h3",{id:"configure-for-android"},"Configure for Android"),Object(p.b)("p",null,"No additional set up necessary."),Object(p.b)("h2",{id:"setup"},"Setup"),Object(p.b)("h3",{id:"ios"},"iOS"),Object(p.b)("p",null,"In order to use the In-App Purchases API on iOS, you\u2019ll need to sign the ",Object(p.b)("a",{parentName:"p",href:"https://help.apple.com/app-store-connect/#/devb6df5ee51"},"Paid Applications Agreement")," and set up your banking and tax information. You also need to enable the ",Object(p.b)("a",{parentName:"p",href:"https://help.apple.com/xcode/mac/current/#/dev88ff319e7"},"In-App Purchases capability")," for your app in Xcode."),Object(p.b)("p",null,"Next, create an entry for your app in ",Object(p.b)("a",{parentName:"p",href:"https://appstoreconnect.apple.com/"},"App Store Connect")," and configure your in-app purchases, including details (such as name, pricing, and description) that highlight the features and functionality of your in-app products. Make sure each product's status says ",Object(p.b)("inlineCode",{parentName:"p"},"Ready to Submit"),", otherwise it will not be queryable from within your app when you are testing. Be sure to add any necessary metadata to do so including uploading a screenshot (this can be anything when you're testing) and review notes. Your app's status must also say ",Object(p.b)("inlineCode",{parentName:"p"},"Ready to Submit")," but you do not need to actually submit your app or its products for review to test purchases in sandbox mode."),Object(p.b)("p",null,"Now you can create a ",Object(p.b)("a",{parentName:"p",href:"https://help.apple.com/app-store-connect/#/dev8b997bee1"},"sandbox account")," to test in-app purchases before you make your app available."),Object(p.b)("p",null,"For more information, see Apple's workflow for configuring In-App Purchases ",Object(p.b)("a",{parentName:"p",href:"https://help.apple.com/app-store-connect/#/devb57be10e7"},"here"),"."),Object(p.b)("h3",{id:"android"},"Android"),Object(p.b)("p",null,"On Android, you must first create an entry for your app and upload a release APK in the ",Object(p.b)("a",{parentName:"p",href:"https://developer.android.com/distribute/console/"},"Google Play Console"),". From there, you can configure your in-app purchases and their details under ",Object(p.b)("inlineCode",{parentName:"p"},"Store Presence > In-app products"),"."),Object(p.b)("p",null,"Then to test your purchases, you must publish your app to a closed or open testing track in Google Play. Note that it may take a few hours for the app to be available for testers. Ensure the testers you invite (including yourself) opt in to your app's test. On your test\u2019s opt-in URL, your testers will get an explanation of what it means to be a tester and a link to opt-in. At this point, they're all set and can start making purchases once they download your app or build from source. For more information on testing, follow ",Object(p.b)("a",{parentName:"p",href:"https://developer.android.com/google/play/billing/billing_testing"},"these instructions"),"."),Object(p.b)("blockquote",null,Object(p.b)("p",{parentName:"blockquote"},"Note that in-app purchases require physical devices to work on both platforms and therefore ",Object(p.b)("strong",{parentName:"p"},"cannot be tested on simulators"),".")),Object(p.b)("h2",{id:"api"},"API"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-js"},"import * as InAppPurchases from 'expo-in-app-purchases';\n")),Object(p.b)(r.a,{packageName:"expo-in-app-purchases",apiName:"InAppPurchases",mdxType:"APISection"}))}d.isMDXComponent=!0}},[["Mu6J",1,0,2,3,4,5,7,8,9,10,11,12,13,14]]]);