_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[1297],{"1e1J":function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/versions/v44.0.0/sdk/filesystem",function(){return n("EfOF")}])},EfOF:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return d})),n.d(t,"headings",(function(){return u})),n.d(t,"default",(function(){return O}));var a=n("HALo"),i=n("dhJC"),r=(n("q1tI"),n("7ljp")),o=n("KiYJ"),s=n("vFJ3"),l=n("utVh"),b=(n("3Ukx"),n("HCau")),c=n("hykZ"),p=n("I0q5"),m=["components"],d={title:"FileSystem",sourceCodeUrl:"https://github.com/expo/expo/tree/sdk-44/packages/expo-file-system"},u=[{depth:2,type:"text",title:"Installation"},{depth:2,type:"text",title:"Configuration in app.json / app.config.js"},{depth:2,type:"text",title:"Usage"},{depth:4,type:"text",title:"Downloading files"},{depth:4,type:"text",title:"Managing Giphy's"},{depth:2,type:"text",title:"API"},{depth:3,type:"link",title:""},{depth:2,type:"text",title:"Directories"},{depth:3,type:"inlineCode",title:"FileSystem.documentDirectory"},{depth:3,type:"inlineCode",title:"FileSystem.cacheDirectory"},{depth:2,type:"text",title:"Constants"},{depth:3,type:"inlineCode",title:"FileSystem.EncodingType"},{depth:3,type:"inlineCode",title:"FileSystem.FileSystemSessionType"},{depth:3,type:"inlineCode",title:"FileSystem.FileSystemUploadType"},{depth:4,type:"text",title:"How to handle such requests?"},{depth:2,type:"text",title:"Methods"},{depth:3,type:"inlineCode",title:"FileSystem.getInfoAsync(fileUri, options)"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"FileSystem.readAsStringAsync(fileUri, options)"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"FileSystem.writeAsStringAsync(fileUri, contents, options)"},{depth:4,type:"text",title:"Arguments"},{depth:3,type:"inlineCode",title:"FileSystem.deleteAsync(fileUri, options)"},{depth:4,type:"text",title:"Arguments"},{depth:3,type:"inlineCode",title:"FileSystem.moveAsync(options)"},{depth:4,type:"text",title:"Arguments"},{depth:3,type:"inlineCode",title:"FileSystem.copyAsync(options)"},{depth:4,type:"text",title:"Arguments"},{depth:3,type:"inlineCode",title:"FileSystem.makeDirectoryAsync(fileUri, options)"},{depth:4,type:"text",title:"Arguments"},{depth:3,type:"inlineCode",title:"FileSystem.readDirectoryAsync(fileUri)"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"FileSystem.downloadAsync(uri, fileUri, options)"},{depth:4,type:"text",title:"Example"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"FileSystem.uploadAsync(url, fileUri, options)"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"FileSystem.createDownloadResumable(uri, fileUri, options, callback, resumeData)"},{depth:4,type:"text",title:"Arguments"},{depth:3,type:"inlineCode",title:"FileSystem.DownloadResumable.downloadAsync()"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"FileSystem.DownloadResumable.pauseAsync()"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"FileSystem.DownloadResumable.resumeAsync()"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"FileSystem.DownloadResumable.savable()"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"FileSystem.getContentUriAsync(fileUri)"},{depth:4,type:"text",title:"Example"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"FileSystem.getFreeDiskStorageAsync()"},{depth:4,type:"text",title:"Example"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"FileSystem.getTotalDiskCapacityAsync()"},{depth:4,type:"text",title:"Example"},{depth:4,type:"text",title:"Returns"},{depth:2,type:"strong",title:"Storage Access Framework (  )"},{depth:2,type:"text",title:"SAF URI"},{depth:2,type:"text",title:"API"},{depth:3,type:"text",title:"Example Usage"},{depth:3,type:"text",title:"Migrating an album"},{depth:3,type:"inlineCode",title:"StorageAccessFramework.getUriForDirectoryInRoot(folderName)"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"StorageAccessFramework.requestDirectoryPermissionsAsync(initialFileUrl)"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"StorageAccessFramework.readDirectoryAsync(dirUri)"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"StorageAccessFramework.makeDirectoryAsync(parentUri: string, dirName: string)"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"StorageAccessFramework.createFileAsync(parentUri: string, fileName: string, mimeType: string)"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"StorageAccessFramework.writeAsStringAsync(fileUri, contents, options)"},{depth:3,type:"inlineCode",title:"StorageAccessFramework.readAsStringAsync(fileUri, options)"},{depth:3,type:"inlineCode",title:"StorageAccessFramework.deleteAsync(fileUri, options)"},{depth:3,type:"inlineCode",title:"StorageAccessFramework.moveAsync(options)"},{depth:3,type:"inlineCode",title:"StorageAccessFramework.copyAsync(options)"},{depth:2,type:"text",title:"Supported URI schemes"},{depth:2,type:"text",title:"Permissions"},{depth:3,type:"text",title:"Android"},{depth:3,type:"text",title:"iOS"}],j={meta:d,headings:u};function O(e){var t=e.components,n=Object(i.a)(e,m);return Object(r.b)("wrapper",Object(a.a)({},j,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"expo-file-system"))," provides access to a file system stored locally on the device. Within Expo Go, each project has a separate file system and has no access to the file system of other Expo projects. However, it can save content shared by other projects to the local filesystem, as well as share local files with other projects. It is also capable of uploading and downloading files from network URLs."),Object(r.b)(o.a,{alt:"Diagram of the various pieces of expo-file-system and how they interact with different resources",src:"/static/images/sdk/file-system/file-system-diagram.png",style:{maxWidth:850,maxHeight:600},containerStyle:{backgroundColor:"#fff"},mdxType:"ImageSpotlight"}),Object(r.b)(c.a,{android:!0,emulator:!0,ios:!0,simulator:!0,mdxType:"PlatformsSection"}),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)(b.b,{packageName:"expo-file-system",mdxType:"InstallSection"}),Object(r.b)("h2",{id:"configuration-in-appjson--appconfigjs"},"Configuration in app.json / app.config.js"),Object(r.b)(s.a,{mdxType:"ConfigClassic"},Object(r.b)("p",null,"You can configure ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#permissions"},"the permissions for this library")," using ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/config/app/#infoplist"},Object(r.b)("inlineCode",{parentName:"a"},"ios.infoPlist"))," and ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/config/app/#permissions"},Object(r.b)("inlineCode",{parentName:"a"},"android.permissions")),".")),Object(r.b)(s.d,{mdxType:"ConfigReactNative"},Object(r.b)("p",null,"Learn how to configure the native projects in the ",Object(r.b)("a",{parentName:"p",href:"https://github.com/expo/expo/tree/main/packages/expo-file-system#installation-in-bare-react-native-projects"},"installation instructions in the ",Object(r.b)("inlineCode",{parentName:"a"},"expo-file-system")," repository"),".")),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("h4",{id:"downloading-files"},"Downloading files"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"const callback = downloadProgress => {\n  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;\n  this.setState({\n    downloadProgress: progress,\n  });\n};\n\nconst downloadResumable = FileSystem.createDownloadResumable(\n  'http://techslides.com/demos/sample-videos/small.mp4',\n  FileSystem.documentDirectory + 'small.mp4',\n  {},\n  callback\n);\n\ntry {\n  const { uri } = await downloadResumable.downloadAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  await downloadResumable.pauseAsync();\n  console.log('Paused download operation, saving for future retrieval');\n  AsyncStorage.setItem('pausedDownload', JSON.stringify(downloadResumable.savable()));\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\n//To resume a download across app restarts, assuming the the DownloadResumable.savable() object was stored:\nconst downloadSnapshotJson = await AsyncStorage.getItem('pausedDownload');\nconst downloadSnapshot = JSON.parse(downloadSnapshotJson);\nconst downloadResumable = new FileSystem.DownloadResumable(\n  downloadSnapshot.url,\n  downloadSnapshot.fileUri,\n  downloadSnapshot.options,\n  callback,\n  downloadSnapshot.resumeData\n);\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n")),Object(r.b)("h4",{id:"managing-giphys"},"Managing Giphy's"),Object(r.b)(p.a,{label:"Managing Giphy's",templateId:"filesystem/App",dependencies:["expo-file-system"],files:{"GifFetching.ts":"filesystem/gifFetching.ts","GifManagement.ts":"filesystem/gifManagement.ts"},mdxType:"SnackInline"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"import * as FileSystem from 'expo-file-system';\n\nconst gifDir = FileSystem.cacheDirectory + 'giphy/';\nconst gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;\nconst gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;\n\n// Checks if gif directory exists. If not, creates it\nasync function ensureDirExists() {\n  const dirInfo = await FileSystem.getInfoAsync(gifDir);\n  if (!dirInfo.exists) {\n    console.log(\"Gif directory doesn't exist, creating...\");\n    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });\n  }\n}\n\n// Downloads all gifs specified as array of IDs\nexport async function addMultipleGifs(gifIds: string[]) {\n  try {\n    await ensureDirExists();\n\n    console.log('Downloading', gifIds.length, 'gif files...');\n    await Promise.all(gifIds.map(id => FileSystem.downloadAsync(gifUrl(id), gifFileUri(id))));\n  } catch (e) {\n    console.error(\"Couldn't download gif files:\", e);\n  }\n}\n\n// Returns URI to our local gif file\n// If our gif doesn't exist locally, it downloads it\nexport async function getSingleGif(gifId: string) {\n  await ensureDirExists();\n\n  const fileUri = gifFileUri(gifId);\n  const fileInfo = await FileSystem.getInfoAsync(fileUri);\n\n  if (!fileInfo.exists) {\n    console.log(\"Gif isn't cached locally. Downloading...\");\n    await FileSystem.downloadAsync(gifUrl(gifId), fileUri);\n  }\n\n  return fileUri;\n}\n\n// Exports shareable URI - it can be shared outside your app\nexport async function getGifContentUri(gifId: string) {\n  return FileSystem.getContentUriAsync(await getSingleGif(gifId));\n}\n\n// Deletes whole giphy directory with all its content\nexport async function deleteAllGifs() {\n  console.log('Deleting all GIF files...');\n  await FileSystem.deleteAsync(gifDir);\n}\n"))),Object(r.b)("h2",{id:"api"},"API"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import * as FileSystem from 'expo-file-system';\n")),Object(r.b)("h3",{id:"supported-uri-schemes"},Object(r.b)("a",{parentName:"h3",href:"/versions/v44.0.0/sdk/filesystem/#supported-uri-schemes-1"},"Supported URI schemes")),Object(r.b)("h2",{id:"directories"},"Directories"),Object(r.b)("p",null,"The API takes ",Object(r.b)("inlineCode",{parentName:"p"},"file://")," URIs pointing to local files on the device to identify files. Each app only has read and write access to locations under the following directories:"),Object(r.b)("h3",{id:"filesystemdocumentdirectory"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.documentDirectory")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"file://")," URI pointing to the directory where user documents for this app will be stored. Files stored here will remain until explicitly deleted by the app. Ends with a trailing ",Object(r.b)("inlineCode",{parentName:"p"},"/"),". Example uses are for files the user saves that they expect to see again."),Object(r.b)("h3",{id:"filesystemcachedirectory"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.cacheDirectory")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"file://")," URI pointing to the directory where temporary files used by this app will be stored. Files stored here may be automatically deleted by the system when low on storage. Example uses are for downloaded or generated files that the app just needs for one-time usage."),Object(r.b)("hr",null),Object(r.b)("p",null,"So, for example, the URI to a file named ",Object(r.b)("inlineCode",{parentName:"p"},"'myFile'")," under ",Object(r.b)("inlineCode",{parentName:"p"},"'myDirectory'")," in the app's user documents directory would be ",Object(r.b)("inlineCode",{parentName:"p"},"FileSystem.documentDirectory + 'myDirectory/myFile'"),"."),Object(r.b)("p",null,"Expo APIs that create files generally operate within these directories. This includes ",Object(r.b)("inlineCode",{parentName:"p"},"Audio")," recordings, ",Object(r.b)("inlineCode",{parentName:"p"},"Camera")," photos, ",Object(r.b)("inlineCode",{parentName:"p"},"ImagePicker")," results, ",Object(r.b)("inlineCode",{parentName:"p"},"SQLite")," databases and ",Object(r.b)("inlineCode",{parentName:"p"},"takeSnapShotAsync()")," results. This allows their use with the ",Object(r.b)("inlineCode",{parentName:"p"},"FileSystem")," API."),Object(r.b)("p",null,"Some ",Object(r.b)("inlineCode",{parentName:"p"},"FileSystem")," functions are able to read from (but not write to) other locations. Currently ",Object(r.b)("inlineCode",{parentName:"p"},"FileSystem.getInfoAsync()")," and ",Object(r.b)("inlineCode",{parentName:"p"},"FileSystem.copyAsync()")," are able to read from URIs returned by ",Object(r.b)("a",{parentName:"p",href:"https://reactnative.dev/docs/cameraroll.html#getphotos"},Object(r.b)("inlineCode",{parentName:"a"},"CameraRoll.getPhotos()"))," from React Native."),Object(r.b)("h2",{id:"constants"},"Constants"),Object(r.b)("h3",{id:"filesystemencodingtype"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.EncodingType")),Object(r.b)("p",null,"These values can be used to define how data is read / written."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"FileSystem.EncodingType.UTF8")," -- Standard readable format.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"FileSystem.EncodingType.Base64")," -- Binary, radix-64 representation."))),Object(r.b)("h3",{id:"filesystemfilesystemsessiontype"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.FileSystemSessionType")),Object(r.b)("p",null,"These values can be used to define how sessions work on iOS."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"FileSystem.FileSystemSessionType.BACKGROUND")," -- Using this mode means that the downloading/uploading session on the native side will work even if the application is moved to background. If the task completes while the application is in background, the Promise will be either resolved immediately or (if the application execution has already been stopped) once the app is moved to foreground again."),Object(r.b)("blockquote",{parentName:"li"},Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"Note"),": The background session doesn't fail if the server or your connection is down. Rather, it continues retrying until the task succeeds or is canceled manually."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"FileSystem.FileSystemSessionType.FOREGROUND")," -- Using this mode means that downloading/uploading session on the native side will be terminated once the application becomes inactive (e.g. when it goes to background). Bringing the application to foreground again would trigger Promise rejection."))),Object(r.b)("h3",{id:"filesystemfilesystemuploadtype"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.FileSystemUploadType")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"FileSystem.FileSystemUploadType.BINARY_CONTENT")," -- The file will be sent as a request's body. The request can't contain additional data.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"FileSystem.FileSystemUploadType.MULTIPART")," -- An ",Object(r.b)("a",{parentName:"p",href:"https://www.ietf.org/rfc/rfc2387.txt"},"RFC 2387-compliant")," request body. The provided file will be encoded into HTTP request. This request can contain additional data."))),Object(r.b)("h4",{id:"how-to-handle-such-requests"},"How to handle such requests?"),Object(r.b)("p",null,"The simple server in Node.js, which can save uploaded images to disk:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"const express = require('express');\nconst app = express();\nconst fs = require('fs');\nconst multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n\n// This method will save the binary content of the request as a file.\napp.patch('/binary-upload', (req, res) => {\n  req.pipe(fs.createWriteStream('./uploads/image' + Date.now() + '.png'));\n  res.end('OK');\n});\n\n// This method will save a \"photo\" field from the request as a file.\napp.patch('/multipart-upload', upload.single('photo'), (req, res) => {\n  // You can access other HTTP parameters. They are located in the body object.\n  console.log(req.body);\n  res.end('OK');\n});\n\napp.listen(3000, () => {\n  console.log('Working on port 3000');\n});\n")),Object(r.b)("h2",{id:"methods"},"Methods"),Object(r.b)("h3",{id:"filesystemgetinfoasyncfileuri-options"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.getInfoAsync(fileUri, options)")),Object(r.b)("p",null,"Get metadata information about a file, directory or external content/asset."),Object(r.b)("h4",{id:"arguments"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"fileUri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- URI to the file or directory. It may be e.g. URI returned by ",Object(r.b)("a",{parentName:"p",href:"https://reactnative.dev/docs/cameraroll.html#getphotos"},Object(r.b)("inlineCode",{parentName:"a"},"CameraRoll.getPhotos()")),". See ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#supported-uri-schemes-1"},"supported URI schemes"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"options (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- A map of options:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"md5 (",Object(r.b)("em",{parentName:"strong"},"boolean"),")")," -- Whether to return the MD5 hash of the file. ",Object(r.b)("inlineCode",{parentName:"p"},"false")," by default.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"size (",Object(r.b)("em",{parentName:"strong"},"boolean"),")")," -- Whether to include the size of the file if operating on a source from ",Object(r.b)("a",{parentName:"p",href:"https://reactnative.dev/docs/cameraroll.html#getphotos"},Object(r.b)("inlineCode",{parentName:"a"},"CameraRoll.getPhotos()"))," (skipping this can prevent downloading the file if it's stored in iCloud, for example). The size is always returned for ",Object(r.b)("inlineCode",{parentName:"p"},"file://")," locations."))))),Object(r.b)("h4",{id:"returns"},"Returns"),Object(r.b)("p",null,"If no item exists at this URI, returns a Promise that resolves to ",Object(r.b)("inlineCode",{parentName:"p"},"{ exists: false, isDirectory: false }"),". Else returns a Promise that resolves to an object with the following fields:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"exists (",Object(r.b)("em",{parentName:"strong"},"boolean"),")")," -- ",Object(r.b)("inlineCode",{parentName:"p"},"true"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"isDirectory (",Object(r.b)("em",{parentName:"strong"},"boolean"),")")," -- ",Object(r.b)("inlineCode",{parentName:"p"},"true")," if this is a directory, ",Object(r.b)("inlineCode",{parentName:"p"},"false")," if it is a file")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"modificationTime (",Object(r.b)("em",{parentName:"strong"},"number"),")")," -- The last modification time of the file expressed in seconds since epoch.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"size (",Object(r.b)("em",{parentName:"strong"},"number"),")")," -- The size of the file in bytes. If operating on a source from ",Object(r.b)("a",{parentName:"p",href:"https://reactnative.dev/docs/cameraroll.html#getphotos"},Object(r.b)("inlineCode",{parentName:"a"},"CameraRoll.getPhotos()")),", only present if the ",Object(r.b)("inlineCode",{parentName:"p"},"size")," option was truthy.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"uri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- A ",Object(r.b)("inlineCode",{parentName:"p"},"file://")," URI pointing to the file. This is the same as the ",Object(r.b)("inlineCode",{parentName:"p"},"fileUri")," input parameter.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"md5 (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- Present if the ",Object(r.b)("inlineCode",{parentName:"p"},"md5")," option was truthy. Contains the MD5 hash of the file."))),Object(r.b)("h3",{id:"filesystemreadasstringasyncfileuri-options"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.readAsStringAsync(fileUri, options)")),Object(r.b)("p",null,"Read the entire contents of a file as a string. Binary will be returned in raw format, you will need to append ",Object(r.b)("inlineCode",{parentName:"p"},"data:image/png;base64,")," to use it as Base64."),Object(r.b)("h4",{id:"arguments-1"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"fileUri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- ",Object(r.b)("inlineCode",{parentName:"p"},"file://")," or ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF")," URI to the file or directory.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"options (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- Optional props that define how a file must be read."),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"encoding (",Object(r.b)("em",{parentName:"strong"},"EncodingType"),")")," -- The encoding format to use when reading the file. Options: ",Object(r.b)("inlineCode",{parentName:"p"},"FileSystem.EncodingType.UTF8"),", ",Object(r.b)("inlineCode",{parentName:"p"},"FileSystem.EncodingType.Base64"),". Default is ",Object(r.b)("inlineCode",{parentName:"p"},"FileSystem.EncodingType.UTF8"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"length (",Object(r.b)("em",{parentName:"strong"},"number"),")")," -- Optional number of bytes to read. This option is only used when ",Object(r.b)("inlineCode",{parentName:"p"},"encoding: FileSystem.EncodingType.Base64")," and ",Object(r.b)("inlineCode",{parentName:"p"},"position")," is defined.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"position (",Object(r.b)("em",{parentName:"strong"},"number"),")")," -- Optional number of bytes to skip. This option is only used when ",Object(r.b)("inlineCode",{parentName:"p"},"encoding: FileSystem.EncodingType.Base64")," and ",Object(r.b)("inlineCode",{parentName:"p"},"length")," is defined."))))),Object(r.b)("h4",{id:"returns-1"},"Returns"),Object(r.b)("p",null,"A Promise that resolves to a string containing the entire contents of the file."),Object(r.b)("h3",{id:"filesystemwriteasstringasyncfileuri-contents-options"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.writeAsStringAsync(fileUri, contents, options)")),Object(r.b)("p",null,"Write the entire contents of a file as a string."),Object(r.b)("h4",{id:"arguments-2"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"fileUri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- ",Object(r.b)("inlineCode",{parentName:"p"},"file://")," or ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF")," URI to the file or directory. Note: when you're using SAF URI the file needs to exist. You can't create a new file.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"contents (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The string to replace the contents of the file with.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"options (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- Optional props that define how a file must be written."),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"encoding (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The encoding format to use when writing the file. Options: ",Object(r.b)("inlineCode",{parentName:"li"},"FileSystem.EncodingType.UTF8"),", ",Object(r.b)("inlineCode",{parentName:"li"},"FileSystem.EncodingType.Base64"),". Default is ",Object(r.b)("inlineCode",{parentName:"li"},"FileSystem.EncodingType.UTF8"))))),Object(r.b)("h3",{id:"filesystemdeleteasyncfileuri-options"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.deleteAsync(fileUri, options)")),Object(r.b)("p",null,"Delete a file or directory. If the URI points to a directory, the directory and all its contents are recursively deleted."),Object(r.b)("h4",{id:"arguments-3"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"fileUri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- ",Object(r.b)("inlineCode",{parentName:"p"},"file://")," or ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF")," URI to the file or directory.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"options (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- A map of options:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"idempotent (",Object(r.b)("em",{parentName:"strong"},"boolean"),")")," -- If ",Object(r.b)("inlineCode",{parentName:"li"},"true"),", don't throw an error if there is no file or directory at this URI. ",Object(r.b)("inlineCode",{parentName:"li"},"false")," by default.")))),Object(r.b)("h3",{id:"filesystemmoveasyncoptions"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.moveAsync(options)")),Object(r.b)("p",null,"Move a file or directory to a new location."),Object(r.b)("h4",{id:"arguments-4"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"options (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- A map of options:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"from (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- ",Object(r.b)("inlineCode",{parentName:"p"},"file://")," or ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF")," URI to the file or directory at its original location.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"to (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- ",Object(r.b)("inlineCode",{parentName:"p"},"file://")," URI to the file or directory at what should be its new location."))))),Object(r.b)("h3",{id:"filesystemcopyasyncoptions"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.copyAsync(options)")),Object(r.b)("p",null,"Create a copy of a file or directory. Directories are recursively copied with all of their contents. It can be also used to copy content shared by other apps to local filesystem."),Object(r.b)("h4",{id:"arguments-5"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"options (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- A map of options:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"from (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- URI or ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF")," URI to the asset, file, or directory to copy. It can be e.g. the URI returned by ",Object(r.b)("a",{parentName:"p",href:"https://reactnative.dev/docs/cameraroll.html#getphotos"},Object(r.b)("inlineCode",{parentName:"a"},"CameraRoll.getPhotos()")),". See ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#supported-uri-schemes-1"},"supported URI schemes"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"to (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The ",Object(r.b)("inlineCode",{parentName:"p"},"file://")," URI to the new copy to create."))))),Object(r.b)("h3",{id:"filesystemmakedirectoryasyncfileuri-options"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.makeDirectoryAsync(fileUri, options)")),Object(r.b)("p",null,"Create a new empty directory."),Object(r.b)("h4",{id:"arguments-6"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"fileUri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- ",Object(r.b)("inlineCode",{parentName:"p"},"file://")," URI to the new directory to create.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"options (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- A map of options:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"intermediates (",Object(r.b)("em",{parentName:"strong"},"boolean"),")")," -- If ",Object(r.b)("inlineCode",{parentName:"li"},"true"),", create any non-existent parent directories when creating the directory at ",Object(r.b)("inlineCode",{parentName:"li"},"fileUri"),". If ",Object(r.b)("inlineCode",{parentName:"li"},"false"),", raises an error if any of the intermediate parent directories does not exist or if the child directory already exists. ",Object(r.b)("inlineCode",{parentName:"li"},"false")," by default.")))),Object(r.b)("h3",{id:"filesystemreaddirectoryasyncfileuri"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.readDirectoryAsync(fileUri)")),Object(r.b)("p",null,"Enumerate the contents of a directory."),Object(r.b)("h4",{id:"arguments-7"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"fileUri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- ",Object(r.b)("inlineCode",{parentName:"li"},"file://")," URI to the directory.")),Object(r.b)("h4",{id:"returns-2"},"Returns"),Object(r.b)("p",null,"A Promise that resolves to an array of strings, each containing the name of a file or directory contained in the directory at ",Object(r.b)("inlineCode",{parentName:"p"},"fileUri"),"."),Object(r.b)("h3",{id:"filesystemdownloadasyncuri-fileuri-options"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.downloadAsync(uri, fileUri, options)")),Object(r.b)("p",null,"Download the contents at a remote URI to a file in the app's file system. The directory for a local file uri must exist prior to calling this function."),Object(r.b)("h4",{id:"example"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"FileSystem.downloadAsync(\n  'http://techslides.com/demos/sample-videos/small.mp4',\n  FileSystem.documentDirectory + 'small.mp4'\n)\n  .then(({ uri }) => {\n    console.log('Finished downloading to ', uri);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n")),Object(r.b)("h4",{id:"arguments-8"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"url (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The remote URI to download from.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"fileUri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The local URI of the file to download to. If there is no file at this URI, a new one is created. If there is a file at this URI, its contents are replaced. The directory for the file must exist.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"options (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- A map of options:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"headers (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- An object containing all the HTTP header fields and their values for the download network request. The keys and values of the object are the header names and values respectively.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"md5 (",Object(r.b)("em",{parentName:"strong"},"boolean"),")")," -- If ",Object(r.b)("inlineCode",{parentName:"p"},"true"),", include the MD5 hash of the file in the returned object. ",Object(r.b)("inlineCode",{parentName:"p"},"false")," by default. Provided for convenience since it is common to check the integrity of a file immediately after downloading.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"sessionType (",Object(r.b)("em",{parentName:"strong"},"FileSystemSessionType"),")")," -- (iOS only) A session type. Determines if tasks can be handled in the background. On Android, sessions always work in the background and you can't change it. Defaults to ",Object(r.b)("inlineCode",{parentName:"p"},"FileSystemSessionType.BACKGROUND"),"."))))),Object(r.b)("h4",{id:"returns-3"},"Returns"),Object(r.b)("p",null,"Returns a Promise that resolves to an object with the following fields:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"uri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- A ",Object(r.b)("inlineCode",{parentName:"p"},"file://")," URI pointing to the file. This is the same as the ",Object(r.b)("inlineCode",{parentName:"p"},"fileUri")," input parameter.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"status (",Object(r.b)("em",{parentName:"strong"},"number"),")")," -- The HTTP response status code for the download network request.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"headers (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- An object containing all the HTTP response header fields and their values for the download network request. The keys and values of the object are the header names and values respectively.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"md5 (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- Present if the ",Object(r.b)("inlineCode",{parentName:"p"},"md5")," option was truthy. Contains the MD5 hash of the file."))),Object(r.b)("h3",{id:"filesystemuploadasyncurl-fileuri-options"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.uploadAsync(url, fileUri, options)")),Object(r.b)("p",null,"Upload the contents of the file pointed by ",Object(r.b)("inlineCode",{parentName:"p"},"fileUri")," to the remote url."),Object(r.b)("h4",{id:"arguments-9"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"url (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The remote URL, where the file will be sent.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"fileUri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The local URI of the file to send. The file must exist.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"options (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- A map of options:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"headers (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- An object containing all the HTTP header fields and their values for the upload network request. The keys and values of the object are the header names and values respectively.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"httpMethod (",Object(r.b)("em",{parentName:"strong"},"String"),")")," -- The request method. Accepts values: 'POST', 'PUT', 'PATCH. Default to 'POST'.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"sessionType (",Object(r.b)("em",{parentName:"strong"},"FileSystemSessionType"),")")," -- (iOS only) A session type. Determines if tasks can be handled in the background. On Android, sessions always work in the background and you can't change it. Defaults to ",Object(r.b)("inlineCode",{parentName:"p"},"FileSystemSessionType.BACKGROUND"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"uploadType (",Object(r.b)("em",{parentName:"strong"},"FileSystemUploadType"),")")," -- Upload type determines how the file will be sent to the server. Default to ",Object(r.b)("inlineCode",{parentName:"p"},"FileSystemUploadType.BINARY_CONTENT"),"."))),Object(r.b)("p",{parentName:"li"},"If ",Object(r.b)("inlineCode",{parentName:"p"},"uploadType")," is equal ",Object(r.b)("inlineCode",{parentName:"p"},"FileSystemUploadType.MULTIPART"),", more options are available:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"fieldName (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The name of the field which will hold uploaded file. Defaults to the file name without an extension.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"mimeType (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The MIME type of the provided file. If not provided, the module will try to guess it based on the extension.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"parameters (",Object(r.b)("em",{parentName:"strong"},"Record<string, string>"),")")," -- Additional form properties. They will be located in the request body."))))),Object(r.b)("h4",{id:"returns-4"},"Returns"),Object(r.b)("p",null,"Returns a Promise that resolves to an object with the following fields:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"status (",Object(r.b)("em",{parentName:"strong"},"number"),")")," -- The HTTP response status code for the upload network request.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"headers (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- An object containing all the HTTP response header fields and their values for the upload network request. The keys and values of the object are the header names and values respectively.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"body (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The body of the server response."))),Object(r.b)("h3",{id:"filesystemcreatedownloadresumableuri-fileuri-options-callback-resumedata"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.createDownloadResumable(uri, fileUri, options, callback, resumeData)")),Object(r.b)("p",null,"Create a ",Object(r.b)("inlineCode",{parentName:"p"},"DownloadResumable")," object which can start, pause, and resume a download of contents at a remote URI to a file in the app's file system. Please note: You need to call ",Object(r.b)("inlineCode",{parentName:"p"},"downloadAsync()"),", on a ",Object(r.b)("inlineCode",{parentName:"p"},"DownloadResumable")," instance to initiate the download. The ",Object(r.b)("inlineCode",{parentName:"p"},"DownloadResumable")," object has a callback that provides download progress updates. Downloads can be resumed across app restarts by using ",Object(r.b)("inlineCode",{parentName:"p"},"AsyncStorage")," to store the ",Object(r.b)("inlineCode",{parentName:"p"},"DownloadResumable.savable()")," object for later retrieval. The ",Object(r.b)("inlineCode",{parentName:"p"},"savable")," object contains the arguments required to initialize a new ",Object(r.b)("inlineCode",{parentName:"p"},"DownloadResumable")," object to resume the download after an app restart. The directory for a local file uri must exist prior to calling this function."),Object(r.b)("h4",{id:"arguments-10"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"url (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The remote URI to download from.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"fileUri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The local URI of the file to download to. If there is no file at this URI, a new one is created. If there is a file at this URI, its contents are replaced. The directory for the file must exist.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"options (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- A map of options:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"md5 (",Object(r.b)("em",{parentName:"strong"},"boolean"),")")," -- If ",Object(r.b)("inlineCode",{parentName:"p"},"true"),", include the MD5 hash of the file in the returned object. ",Object(r.b)("inlineCode",{parentName:"p"},"false")," by default. Provided for convenience since it is common to check the integrity of a file immediately after downloading.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"headers (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- An object containing any additional HTTP header fields required for the request. The keys and values of the object are the header names and values respectively.")))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"callback (",Object(r.b)("em",{parentName:"strong"},"function"),")")," --\nThis function is called on each data write to update the download progress. An object with the following fields are passed:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"totalBytesWritten (",Object(r.b)("em",{parentName:"strong"},"number"),")")," -- The total bytes written by the download operation."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"totalBytesExpectedToWrite (",Object(r.b)("em",{parentName:"strong"},"number"),")")," -- The total bytes expected to be written by the download operation. A value of ",Object(r.b)("inlineCode",{parentName:"li"},"-1")," means that the server did not return the ",Object(r.b)("inlineCode",{parentName:"li"},"Content-Length")," header and the total size is unknown. Without this header, you won't be able to track the download progress.")),Object(r.b)("blockquote",{parentName:"li"},Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"Note"),": When the app has been moved to the background, this callback won't be fired until it's moved to the foreground."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"resumeData (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The string which allows the api to resume a paused download. This is set on the ",Object(r.b)("inlineCode",{parentName:"p"},"DownloadResumable")," object automatically when a download is paused. When initializing a new ",Object(r.b)("inlineCode",{parentName:"p"},"DownloadResumable")," this should be ",Object(r.b)("inlineCode",{parentName:"p"},"null"),"."))),Object(r.b)("h3",{id:"filesystemdownloadresumabledownloadasync"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.DownloadResumable.downloadAsync()")),Object(r.b)("p",null,"Download the contents at a remote URI to a file in the app's file system."),Object(r.b)("h4",{id:"returns-5"},"Returns"),Object(r.b)("p",null,"Returns a Promise that resolves to an object with the following fields:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"uri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- A ",Object(r.b)("inlineCode",{parentName:"p"},"file://")," URI pointing to the file. This is the same as the ",Object(r.b)("inlineCode",{parentName:"p"},"fileUri")," input parameter.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"status (",Object(r.b)("em",{parentName:"strong"},"number"),")")," -- The HTTP status code for the download network request.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"headers (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- An object containing all the HTTP header fields and their values for the download network request. The keys and values of the object are the header names and values respectively.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"md5 (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- Present if the ",Object(r.b)("inlineCode",{parentName:"p"},"md5")," option was truthy. Contains the MD5 hash of the file."))),Object(r.b)("h3",{id:"filesystemdownloadresumablepauseasync"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.DownloadResumable.pauseAsync()")),Object(r.b)("p",null,"Pause the current download operation. ",Object(r.b)("inlineCode",{parentName:"p"},"resumeData")," is added to the ",Object(r.b)("inlineCode",{parentName:"p"},"DownloadResumable")," object after a successful pause operation. Returns an object that can be saved with ",Object(r.b)("inlineCode",{parentName:"p"},"AsyncStorage")," for future retrieval (the same object that is returned from calling ",Object(r.b)("inlineCode",{parentName:"p"},"FileSystem.DownloadResumable.savable()"),". Please see the example below."),Object(r.b)("h4",{id:"returns-6"},"Returns"),Object(r.b)("p",null,"Returns a Promise that resolves to an object with the following fields:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"url (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The remote URI to download from.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"fileUri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The local URI of the file to download to. If there is no file at this URI, a new one is created. If there is a file at this URI, its contents are replaced.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"options (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- A map of options:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"md5 (",Object(r.b)("em",{parentName:"strong"},"boolean"),")")," -- If ",Object(r.b)("inlineCode",{parentName:"li"},"true"),", include the MD5 hash of the file in the returned object. ",Object(r.b)("inlineCode",{parentName:"li"},"false")," by default. Provided for convenience since it is common to check the integrity of a file immediately after downloading."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"resumeData (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The string which allows the API to resume a paused download."))),Object(r.b)("h3",{id:"filesystemdownloadresumableresumeasync"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.DownloadResumable.resumeAsync()")),Object(r.b)("p",null,"Resume a paused download operation."),Object(r.b)("h4",{id:"returns-7"},"Returns"),Object(r.b)("p",null,"Returns a Promise that resolves to an object with the following fields:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"uri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- A ",Object(r.b)("inlineCode",{parentName:"p"},"file://")," URI pointing to the file. This is the same as the ",Object(r.b)("inlineCode",{parentName:"p"},"fileUri")," input parameter.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"status (",Object(r.b)("em",{parentName:"strong"},"number"),")")," -- The HTTP status code for the download network request.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"headers (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- An object containing all the HTTP header fields and their values for the download network request. The keys and values of the object are the header names and values respectively.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"md5 (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- Present if the ",Object(r.b)("inlineCode",{parentName:"p"},"md5")," option was truthy. Contains the MD5 hash of the file."))),Object(r.b)("h3",{id:"filesystemdownloadresumablesavable"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.DownloadResumable.savable()")),Object(r.b)("p",null,"Returns an object which can be saved with ",Object(r.b)("inlineCode",{parentName:"p"},"AsyncStorage")," for future retrieval."),Object(r.b)("h4",{id:"returns-8"},"Returns"),Object(r.b)("p",null,"Returns an object with the following fields:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"url (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The remote URI to download from.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"fileUri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The local URI of the file to download to. If there is no file at this URI, a new one is created. If there is a file at this URI, its contents are replaced.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"options (",Object(r.b)("em",{parentName:"strong"},"object"),")")," -- A map of options:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"md5 (",Object(r.b)("em",{parentName:"strong"},"boolean"),")")," -- If ",Object(r.b)("inlineCode",{parentName:"li"},"true"),", include the MD5 hash of the file in the returned object. ",Object(r.b)("inlineCode",{parentName:"li"},"false")," by default. Provided for convenience since it is common to check the integrity of a file immediately after downloading."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"resumeData (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The string which allows the api to resume a paused download."))),Object(r.b)("h3",{id:"filesystemgetcontenturiasyncfileuri"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.getContentUriAsync(fileUri)")),Object(r.b)("p",null,"Take a ",Object(r.b)("inlineCode",{parentName:"p"},"file://")," URI and convert it into content URI (",Object(r.b)("inlineCode",{parentName:"p"},"content://"),") so that it can be access by other applications outside of Expo."),Object(r.b)("h4",{id:"example-1"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"FileSystem.getContentUriAsync(uri).then(cUri => {\n  console.log(cUri);\n  IntentLauncher.startActivityAsync('android.intent.action.VIEW', {\n    data: cUri,\n    flags: 1,\n  });\n});\n")),Object(r.b)("h4",{id:"arguments-11"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"fileUri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The local URI of the file. If there is no file at this URI, an exception will be thrown.")),Object(r.b)("h4",{id:"returns-9"},"Returns"),Object(r.b)("p",null,"Returns a Promise that resolves to a ",Object(r.b)("em",{parentName:"p"},"string")," containing a ",Object(r.b)("inlineCode",{parentName:"p"},"content://")," URI pointing to the file. The URI is the same as the ",Object(r.b)("inlineCode",{parentName:"p"},"fileUri")," input parameter but in a different format."),Object(r.b)("h3",{id:"filesystemgetfreediskstorageasync"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.getFreeDiskStorageAsync()")),Object(r.b)("p",null,"Gets the available internal disk storage size, in bytes. This returns the free space on the data partition that hosts all of the internal storage for all apps on the device."),Object(r.b)("h4",{id:"example-2"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"FileSystem.getFreeDiskStorageAsync().then(freeDiskStorage => {\n  // Android: 17179869184\n  // iOS: 17179869184\n});\n")),Object(r.b)("h4",{id:"returns-10"},"Returns"),Object(r.b)("p",null,"Returns a Promise that resolves to the number of bytes available on the internal disk, or JavaScript's ",Object(r.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER"},Object(r.b)("inlineCode",{parentName:"a"},"MAX_SAFE_INTEGER"))," if the capacity is greater than 2",Object(r.b)("sup",null,"53")," - 1 bytes."),Object(r.b)("h3",{id:"filesystemgettotaldiskcapacityasync"},Object(r.b)("inlineCode",{parentName:"h3"},"FileSystem.getTotalDiskCapacityAsync()")),Object(r.b)("p",null,"Gets total internal disk storage size, in bytes. This is the total capacity of the data partition that hosts all the internal storage for all apps on the device."),Object(r.b)("h4",{id:"example-3"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"FileSystem.getTotalDiskCapacityAsync().then(totalDiskCapacity => {\n  // Android: 17179869184\n  // iOS: 17179869184\n});\n")),Object(r.b)("h4",{id:"returns-11"},"Returns"),Object(r.b)("p",null,"Returns a Promise that resolves to a number that specifies the total internal disk storage capacity in bytes, or JavaScript's ",Object(r.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER"},Object(r.b)("inlineCode",{parentName:"a"},"MAX_SAFE_INTEGER"))," if the capacity is greater than 2",Object(r.b)("sup",null,"53")," - 1 bytes."),Object(r.b)("h2",{id:"storage-access-framework-android-only"},"Storage Access Framework (",Object(r.b)("strong",{parentName:"h2"},"Android only"),")"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"StorageAccessFramework")," is a namespace inside of the ",Object(r.b)("inlineCode",{parentName:"p"},"expo-file-system")," module, which encapsulates all functions which can be used with ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF URIs"),". You can read more about SAF in the ",Object(r.b)("a",{parentName:"p",href:"https://developer.android.com/guide/topics/providers/document-provider"},"Android documentation"),"."),Object(r.b)("h2",{id:"saf-uri"},"SAF URI"),Object(r.b)("p",null,"A SAF URI is a URI that is compatible with the Storage Access Framework. It should look like this ",Object(r.b)("inlineCode",{parentName:"p"},"content://com.android.externalstorage.*"),". The easiest way to obtain such URI is by ",Object(r.b)("inlineCode",{parentName:"p"},"requestDirectoryPermissionsAsync")," method."),Object(r.b)("h2",{id:"api-1"},"API"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import { StorageAccessFramework } from 'expo-file-system';\n")),Object(r.b)("h3",{id:"example-usage"},"Example Usage"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"import { StorageAccessFramework } from 'expo-file-system';\n\n// Requests permissions for external directory\nconst permissions = await StorageAccessFramework.requestDirectoryPermissionsAsync();\n\nif (permissions.granted) {\n  // Gets SAF URI from response\n  const uri = permissions.directoryUri;\n\n  // Gets all files inside of selected directory\n  const files = await StorageAccessFramework.readDirectoryAsync(uri);\n  alert(`Files inside ${uri}:\\n\\n${JSON.stringify(files)}`);\n}\n")),Object(r.b)("h3",{id:"migrating-an-album"},"Migrating an album"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"import * as MediaLibrary from 'expo-media-library';\nimport * as FileSystem from 'expo-file-system';\nconst { StorageAccessFramework } = FileSystem;\n\nasync function migrateAlbum(albumName: string) {\n  // Gets SAF URI to the album\n  const albumUri = StorageAccessFramework.getUriForDirectoryInRoot(albumName);\n\n  // Requests permissions\n  const permissions = await StorageAccessFramework.requestDirectoryPermissionsAsync(albumUri);\n  if (!permissions.granted) {\n    return;\n  }\n\n  const permittedUri = permissions.directoryUri;\n  // Checks if users selected the correct folder\n  if (!permittedUri.includes(albumName)) {\n    return;\n  }\n\n  const mediaLibraryPermissions = await MediaLibrary.requestPermissionsAsync();\n  if (!mediaLibraryPermissions.granted) {\n    return;\n  }\n\n  // Moves files from external storage to internal storage\n  await StorageAccessFramework.moveAsync({\n    from: permittedUri,\n    to: FileSystem.documentDirectory!,\n  });\n\n  const outputDir = FileSystem.documentDirectory! + albumName;\n  const migratedFiles = await FileSystem.readDirectoryAsync(outputDir);\n\n  // Creates assets from local files\n  const [newAlbumCreator, ...assets] = await Promise.all(\n    migratedFiles.map<Promise<MediaLibrary.Asset>>(\n      async fileName => await MediaLibrary.createAssetAsync(outputDir + '/' + fileName)\n    )\n  );\n\n  // Album was empty\n  if (!newAlbumCreator) {\n    return;\n  }\n\n  // Creates a new album in the scoped directory\n  const newAlbum = await MediaLibrary.createAlbumAsync(albumName, newAlbumCreator, false);\n  if (assets.length) {\n    await MediaLibrary.addAssetsToAlbumAsync(assets, newAlbum, false);\n  }\n}\n")),Object(r.b)("h3",{id:"storageaccessframeworkgeturifordirectoryinrootfoldername"},Object(r.b)("inlineCode",{parentName:"h3"},"StorageAccessFramework.getUriForDirectoryInRoot(folderName)")),Object(r.b)("p",null,"Gets a ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF URI")," pointing to a folder in the Android root directory. You can use this function to get URI for ",Object(r.b)("inlineCode",{parentName:"p"},"StorageAccessFramework.requestDirectoryPermissionsAsync")," when you trying to migrate an album. In that case, the name of the album is the folder name."),Object(r.b)("h4",{id:"arguments-12"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"folderName (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The name of the folder which is located in the Android root directory.")),Object(r.b)("h4",{id:"returns-12"},"Returns"),Object(r.b)("p",null,"Returns a ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF URI")," to a folder."),Object(r.b)("h3",{id:"storageaccessframeworkrequestdirectorypermissionsasyncinitialfileurl"},Object(r.b)("inlineCode",{parentName:"h3"},"StorageAccessFramework.requestDirectoryPermissionsAsync(initialFileUrl)")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Android only"),". Allows users to select a specific directory, granting your app access to all of the files and sub-directories within that directory."),Object(r.b)("h4",{id:"arguments-13"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"initialFileUrl (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- ",Object(r.b)("strong",{parentName:"li"},"Optional"),". The ",Object(r.b)("a",{parentName:"li",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF URI")," of the directory that the file picker should display when it first loads. If URI is incorrect or points to a non-existing folder, it's ignored. ",Object(r.b)("strong",{parentName:"li"},"Available only on Android R or higher"),".")),Object(r.b)("h4",{id:"returns-13"},"Returns"),Object(r.b)("p",null,"Returns a Promise that resolves to an object with the following fields:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"granted (",Object(r.b)("em",{parentName:"strong"},"boolean"),")")," -- Whether the permissions were granted.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"directoryUri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF URI")," to the user's selected directory. Available only if permissions were granted."))),Object(r.b)("h3",{id:"storageaccessframeworkreaddirectoryasyncdiruri"},Object(r.b)("inlineCode",{parentName:"h3"},"StorageAccessFramework.readDirectoryAsync(dirUri)")),Object(r.b)("p",null,"Enumerate the contents of a directory."),Object(r.b)("h4",{id:"arguments-14"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"dirUri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- ",Object(r.b)("a",{parentName:"li",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF")," URI to the directory.")),Object(r.b)("h4",{id:"returns-14"},"Returns"),Object(r.b)("p",null,"A Promise that resolves to an array of strings, each containing the full ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF URI")," of a file or directory contained in the directory at ",Object(r.b)("inlineCode",{parentName:"p"},"fileUri"),"."),Object(r.b)("h3",{id:"storageaccessframeworkmakedirectoryasyncparenturi-string-dirname-string"},Object(r.b)("inlineCode",{parentName:"h3"},"StorageAccessFramework.makeDirectoryAsync(parentUri: string, dirName: string)")),Object(r.b)("p",null,"Creates a new empty directory."),Object(r.b)("h4",{id:"arguments-15"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"parentUri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF")," URI to the parent directory.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"dirName (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The name of new directory."))),Object(r.b)("h4",{id:"returns-15"},"Returns"),Object(r.b)("p",null,"A Promise that resolves to a ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF URI")," to the created directory."),Object(r.b)("h3",{id:"storageaccessframeworkcreatefileasyncparenturi-string-filename-string-mimetype-string"},Object(r.b)("inlineCode",{parentName:"h3"},"StorageAccessFramework.createFileAsync(parentUri: string, fileName: string, mimeType: string)")),Object(r.b)("p",null,"Creates a new empty file."),Object(r.b)("h4",{id:"arguments-16"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"parentUri (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF")," URI to the parent directory.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"fileName (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The name of new file ",Object(r.b)("strong",{parentName:"p"},"without the extension"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"mimeType (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The MIME of new file."))),Object(r.b)("h4",{id:"returns-16"},"Returns"),Object(r.b)("p",null,"A Promise that resolves to a ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF URI")," to the created file."),Object(r.b)("h3",{id:"storageaccessframeworkwriteasstringasyncfileuri-contents-options"},Object(r.b)("inlineCode",{parentName:"h3"},"StorageAccessFramework.writeAsStringAsync(fileUri, contents, options)")),Object(r.b)("p",null,"Alias to ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#filesystemwriteasstringasyncfileuri-contents-options"},"FileSystem.writeAsStringAsync(fileUri, contents, options)"),"."),Object(r.b)("h3",{id:"storageaccessframeworkreadasstringasyncfileuri-options"},Object(r.b)("inlineCode",{parentName:"h3"},"StorageAccessFramework.readAsStringAsync(fileUri, options)")),Object(r.b)("p",null,"Alias to ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#filesystemreadasstringasyncfileuri-options"},"FileSystem.readAsStringAsync(fileUri, options)")),Object(r.b)("h3",{id:"storageaccessframeworkdeleteasyncfileuri-options"},Object(r.b)("inlineCode",{parentName:"h3"},"StorageAccessFramework.deleteAsync(fileUri, options)")),Object(r.b)("p",null,"Alias to ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#filesystemdeleteasyncfileuri-options"},"FileSystem.deleteAsync(fileUri, options)")),Object(r.b)("h3",{id:"storageaccessframeworkmoveasyncoptions"},Object(r.b)("inlineCode",{parentName:"h3"},"StorageAccessFramework.moveAsync(options)")),Object(r.b)("p",null,"Alias to ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#filesystemmoveasyncoptions"},"FileSystem.moveAsync(options)")),Object(r.b)("h3",{id:"storageaccessframeworkcopyasyncoptions"},Object(r.b)("inlineCode",{parentName:"h3"},"StorageAccessFramework.copyAsync(options)")),Object(r.b)("p",null,"Alias to ",Object(r.b)("a",{parentName:"p",href:"/versions/v44.0.0/sdk/filesystem/#filesystemcopyasyncoptions"},"FileSystem.copyAsync(options)")),Object(r.b)("h1",{id:""}),Object(r.b)("h2",{id:"supported-uri-schemes-1"},"Supported URI schemes"),Object(r.b)("p",null,"In this table, you can see what type of URI can be handled by each method. For example, if you have an URI, which begins with ",Object(r.b)("inlineCode",{parentName:"p"},"content://"),", you cannot use ",Object(r.b)("inlineCode",{parentName:"p"},"FileSystem.readAsStringAsync()"),", but you can use ",Object(r.b)("inlineCode",{parentName:"p"},"FileSystem.copyAsync()")," which supports this scheme."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Method name"),Object(r.b)("th",{parentName:"tr",align:null},"Android"),Object(r.b)("th",{parentName:"tr",align:null},"iOS"),Object(r.b)("th",{parentName:"tr",align:null}))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"getInfoAsync")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"file://"),",",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"content://"),",",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"asset://"),",",Object(r.b)("br",null),"no scheme",Object(r.b)("strong",{parentName:"td"},"*")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"file://"),",",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"ph://"),",",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"assets-library://")),Object(r.b)("td",{parentName:"tr",align:null})),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"readAsStringAsync")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"file://"),",",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"asset://"),",",Object(r.b)("br",null),Object(r.b)("a",{parentName:"td",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF URI")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"file://")),Object(r.b)("td",{parentName:"tr",align:null})),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"writeAsStringAsync")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"file://"),",",Object(r.b)("br",null),Object(r.b)("a",{parentName:"td",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF URI")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"file://")),Object(r.b)("td",{parentName:"tr",align:null})),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"deleteAsync")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"file://"),",",Object(r.b)("br",null),Object(r.b)("a",{parentName:"td",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF URI")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"file://")),Object(r.b)("td",{parentName:"tr",align:null})),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"moveAsync")),Object(r.b)("td",{parentName:"tr",align:null},"Source:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"file://"),",",Object(r.b)("br",null),Object(r.b)("a",{parentName:"td",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF URI"),Object(r.b)("br",null),Object(r.b)("br",null),"Destination:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"file://")),Object(r.b)("td",{parentName:"tr",align:null},"Source:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"file://"),Object(r.b)("br",null),Object(r.b)("br",null),"Destination:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"file://")),Object(r.b)("td",{parentName:"tr",align:null})),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"copyAsync")),Object(r.b)("td",{parentName:"tr",align:null},"Source:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"file://"),",",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"content://"),",",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"asset://"),",",Object(r.b)("br",null),Object(r.b)("a",{parentName:"td",href:"/versions/v44.0.0/sdk/filesystem/#saf-uri"},"SAF URI"),",",Object(r.b)("br",null),"no scheme",Object(r.b)("strong",{parentName:"td"},"*"),Object(r.b)("br",null),Object(r.b)("br",null),"Destination:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"file://")),Object(r.b)("td",{parentName:"tr",align:null},"Source:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"file://"),",",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"ph://"),",",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"assets-library://"),Object(r.b)("br",null),Object(r.b)("br",null),"Destination:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"file://")),Object(r.b)("td",{parentName:"tr",align:null})),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"makeDirectoryAsync")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"file://")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"file://")),Object(r.b)("td",{parentName:"tr",align:null})),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"readDirectoryAsync")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"file://")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"file://")),Object(r.b)("td",{parentName:"tr",align:null})),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"downloadAsync")),Object(r.b)("td",{parentName:"tr",align:null},"Source:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"http://"),",",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"https://"),Object(r.b)("br",null),Object(r.b)("br",null),"Destination:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"file://")),Object(r.b)("td",{parentName:"tr",align:null},"Source:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"http://"),",",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"https://"),Object(r.b)("br",null),Object(r.b)("br",null),"Destination:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"file://")),Object(r.b)("td",{parentName:"tr",align:null})),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"uploadAsync")),Object(r.b)("td",{parentName:"tr",align:null},"Source:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"file://"),Object(r.b)("br",null),Object(r.b)("br",null),"Destination:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"http://"),Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"https://")),Object(r.b)("td",{parentName:"tr",align:null},"Source:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"file://"),Object(r.b)("br",null),Object(r.b)("br",null),"Destination:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"http://"),Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"https://")),Object(r.b)("td",{parentName:"tr",align:null})),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"createDownloadResumable")),Object(r.b)("td",{parentName:"tr",align:null},"Source:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"http://"),",",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"https://"),Object(r.b)("br",null),Object(r.b)("br",null),"Destination:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"file://")),Object(r.b)("td",{parentName:"tr",align:null},"Source:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"http://"),",",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"https://"),Object(r.b)("br",null),Object(r.b)("br",null),"Destination:",Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"file://")),Object(r.b)("td",{parentName:"tr",align:null})))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"*"),"On Android ",Object(r.b)("em",{parentName:"p"},"no scheme")," defaults to a bundled resource."),Object(r.b)("h2",{id:"permissions"},"Permissions"),Object(r.b)("h3",{id:"android"},"Android"),Object(r.b)("p",null,"The following permissions are added automatically through this library's ",Object(r.b)("inlineCode",{parentName:"p"},"AndroidManifest.xml"),"."),Object(r.b)(l.a,{permissions:["READ_EXTERNAL_STORAGE","WRITE_EXTERNAL_STORAGE","INTERNET"],mdxType:"AndroidPermissions"}),Object(r.b)("h3",{id:"ios"},"iOS"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"No permissions required"),"."))}O.isMDXComponent=!0},I0q5:function(e,t,n){"use strict";n.d(t,"a",(function(){return g}));var a=n("z7pX"),i=n("H+61"),r=n("UlJF"),o=n("+Css"),s=n("7LId"),l=n("VIvw"),b=n("iHvq"),c=n("cpVT"),p=n("q1tI"),m=n("ufKf"),d=n("3zh3"),u=n("AeFk"),j=function(e){var t=e.size,n=void 0===t?24:t,a=e.stroke,i=void 0===a?d.palette.dark.white:a;return Object(u.c)("svg",{"aria-label":"check",width:n,height:n,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg"},Object(u.c)("path",{d:"M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6m4-3h6v6m-11 5L21 3",stroke:i,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"}))},O=n("5BX9");function h(e){var t=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,a=Object(b.a)(e);if(t){var i=Object(b.a)(this).constructor;n=Reflect.construct(a,arguments,i)}else n=a.apply(this,arguments);return Object(l.a)(this,n)}}var f="v".concat(n("kiQV").version),g=function(e){Object(s.a)(n,e);var t=h(n);function n(){var e;Object(i.a)(this,n);for(var r=arguments.length,s=new Array(r),l=0;l<r;l++)s[l]=arguments[l];return e=t.call.apply(t,[this].concat(s)),Object(c.a)(Object(o.a)(e),"contentRef",p.createRef()),Object(c.a)(Object(o.a)(e),"state",{ready:!1}),Object(c.a)(Object(o.a)(e),"getSelectedDocsVersion",(function(){var t=e.context.version;return"latest"===t?f:t})),Object(c.a)(Object(o.a)(e),"getSnackSdkVersion",(function(){var t=e.getSelectedDocsVersion();return"unversioned"===t&&(t=f),t.replace("v","")})),Object(c.a)(Object(o.a)(e),"getExamplesPath",(function(){return"".concat(document.location.origin,"/static/examples/").concat(e.getSelectedDocsVersion())})),Object(c.a)(Object(o.a)(e),"getDependencies",(function(){return Object(a.a)(e.props.dependencies).join(",")})),Object(c.a)(Object(o.a)(e),"getCode",(function(){return(e.contentRef.current&&e.contentRef.current.textContent||"").replace(/%%placeholder-start%%.*%%placeholder-end%%/g,"")})),e}return Object(r.a)(n,[{key:"componentDidMount",value:function(){this.setState({ready:!0})}},{key:"render",value:function(){return Object(u.c)("div",null,Object(u.c)("div",{ref:this.contentRef,style:this.props.contentHidden?{display:"none"}:void 0},this.props.children),Object(u.c)("form",{action:m.a,method:"POST",target:"_blank"},Object(u.c)("input",{type:"hidden",name:"platform",value:this.props.defaultPlatform||"android"}),Object(u.c)("input",{type:"hidden",name:"name",value:this.props.label||"Example"}),Object(u.c)("input",{type:"hidden",name:"dependencies",value:this.getDependencies()}),Object(u.c)("input",{type:"hidden",name:"sdkVersion",value:this.getSnackSdkVersion()}),this.props.platforms&&Object(u.c)("input",{type:"hidden",name:"supportedPlatforms",value:this.props.platforms.join(",")}),this.state.ready&&Object(u.c)("input",{type:"hidden",name:"files",value:JSON.stringify(Object(m.b)({templateId:this.props.templateId,code:this.getCode(),files:this.props.files,baseURL:this.getExamplesPath()}))}),Object(u.c)("button",{className:"snack-inline-example-button",disabled:!this.state.ready},Object(u.c)(j,{size:16})," ",this.props.buttonTitle||"Try this example on Snack")))}}]),n}(p.Component);Object(c.a)(g,"contextType",O.a),Object(c.a)(g,"defaultProps",{dependencies:[]})},KiYJ:function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var a=n("cpVT"),i=n("3zh3"),r=(n("q1tI"),n("AeFk"));function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){Object(a.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e){var t=e.alt,n=e.src,a=e.style,o=e.containerStyle;return Object(r.c)("div",{style:s({textAlign:"center",backgroundColor:i.theme.background.secondary,paddingTop:10,paddingBottom:10,marginTop:20,marginBottom:20},o)},Object(r.c)("img",{src:n,alt:t,style:a}))}},ufKf:function(e,t,n){"use strict";n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return i}));var a="https://snack.expo.dev";function i(e){var t=e.templateId,n=e.code,a=e.files,i=e.baseURL,r={};return a&&Object.keys(a).forEach((function(e){var t=a[e],n=/\.(jsx?|tsx?|json|md)$/i.test(e);r[e]=n?{type:"CODE",url:t.match(/^https?:\/\//)?t:"".concat(i,"/").concat(t)}:{type:"ASSET",contents:t}})),t?r["App.js"]={type:"CODE",url:"".concat(i,"/").concat(t,".js")}:n&&(r["App.js"]={type:"CODE",contents:n}),r}}},[["1e1J",1,0,2,3,4,5,6,7,8,9,10,11,12,13,14,16]]]);