_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[361],{"5BX9":function(e,t,n){"use strict";n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return r})),n.d(t,"c",(function(){return s}));var i=n("q1tI"),o=n("AeFk"),a=Object(i.createContext)({version:"latest",hasVersion:!1,setVersion:function(e){throw new Error("PageApiVersionContext not found")}});function r(e){var t=c(e.router.pathname),n=null!==t,r=Object(i.useCallback)((function(t){e.router.push(function(e,t){var n=c(e);return n?e.replace(n,t):e}(e.router.pathname,t))}),[]);return Object(o.c)(a.Provider,{value:{setVersion:r,hasVersion:n,version:t||"latest"}},e.children)}function s(){return Object(i.useContext)(a)}function c(e){return function(e){return e.startsWith("/versions/")}(e)?e.split("/",3).pop():null}},"6LaW":function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h})),n.d(t,"d",(function(){return f})),n.d(t,"c",(function(){return m})),n.d(t,"e",(function(){return g}));var i=n("cpVT"),o=n("dhJC"),a=(n("q1tI"),n("Z0rC")),r=n("uXm5"),s=n("ky+X"),c=n("AeFk"),l=["children"];function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){Object(i.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var d=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r.c.Text;return function(i){var r=i.children,s=Object(o.a)(i,l);return Object(c.c)(a.a,{nestingLevel:t,additionalProps:b({sidebarType:n},s)},Object(c.c)(e,null,r))}},u=(d(s.a,1),d(s.b,2)),h=d(s.c,3),f=d(s.d,4),m=d(s.c,3,r.c.InlineCode),g=d(s.d,4,r.c.InlineCode)},I0q5:function(e,t,n){"use strict";n.d(t,"a",(function(){return j}));var i=n("z7pX"),o=n("H+61"),a=n("UlJF"),r=n("+Css"),s=n("7LId"),c=n("VIvw"),l=n("iHvq"),p=n("cpVT"),b=n("q1tI"),d=n("ufKf"),u=n("3zh3"),h=n("AeFk"),f=function(e){var t=e.size,n=void 0===t?24:t,i=e.stroke,o=void 0===i?u.palette.dark.white:i;return Object(h.c)("svg",{"aria-label":"check",width:n,height:n,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg"},Object(h.c)("path",{d:"M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6m4-3h6v6m-11 5L21 3",stroke:o,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"}))},m=n("5BX9");function g(e){var t=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=Object(l.a)(e);if(t){var o=Object(l.a)(this).constructor;n=Reflect.construct(i,arguments,o)}else n=i.apply(this,arguments);return Object(c.a)(this,n)}}var O="v".concat(n("kiQV").version),j=function(e){Object(s.a)(n,e);var t=g(n);function n(){var e;Object(o.a)(this,n);for(var a=arguments.length,s=new Array(a),c=0;c<a;c++)s[c]=arguments[c];return e=t.call.apply(t,[this].concat(s)),Object(p.a)(Object(r.a)(e),"contentRef",b.createRef()),Object(p.a)(Object(r.a)(e),"state",{ready:!1}),Object(p.a)(Object(r.a)(e),"getSelectedDocsVersion",(function(){var t=e.context.version;return"latest"===t?O:t})),Object(p.a)(Object(r.a)(e),"getSnackSdkVersion",(function(){var t=e.getSelectedDocsVersion();return"unversioned"===t&&(t=O),t.replace("v","")})),Object(p.a)(Object(r.a)(e),"getExamplesPath",(function(){return"".concat(document.location.origin,"/static/examples/").concat(e.getSelectedDocsVersion())})),Object(p.a)(Object(r.a)(e),"getDependencies",(function(){return Object(i.a)(e.props.dependencies).join(",")})),Object(p.a)(Object(r.a)(e),"getCode",(function(){return(e.contentRef.current&&e.contentRef.current.textContent||"").replace(/%%placeholder-start%%.*%%placeholder-end%%/g,"")})),e}return Object(a.a)(n,[{key:"componentDidMount",value:function(){this.setState({ready:!0})}},{key:"render",value:function(){return Object(h.c)("div",null,Object(h.c)("div",{ref:this.contentRef,style:this.props.contentHidden?{display:"none"}:void 0},this.props.children),Object(h.c)("form",{action:d.a,method:"POST",target:"_blank"},Object(h.c)("input",{type:"hidden",name:"platform",value:this.props.defaultPlatform||"android"}),Object(h.c)("input",{type:"hidden",name:"name",value:this.props.label||"Example"}),Object(h.c)("input",{type:"hidden",name:"dependencies",value:this.getDependencies()}),Object(h.c)("input",{type:"hidden",name:"sdkVersion",value:this.getSnackSdkVersion()}),this.props.platforms&&Object(h.c)("input",{type:"hidden",name:"supportedPlatforms",value:this.props.platforms.join(",")}),this.state.ready&&Object(h.c)("input",{type:"hidden",name:"files",value:JSON.stringify(Object(d.b)({templateId:this.props.templateId,code:this.getCode(),files:this.props.files,baseURL:this.getExamplesPath()}))}),Object(h.c)("button",{className:"snack-inline-example-button",disabled:!this.state.ready},Object(h.c)(f,{size:16})," ",this.props.buttonTitle||"Try this example on Snack")))}}]),n}(b.Component);Object(p.a)(j,"contextType",m.a),Object(p.a)(j,"defaultProps",{dependencies:[]})},KiYJ:function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var i=n("cpVT"),o=n("3zh3"),a=(n("q1tI"),n("AeFk"));function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){Object(i.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e){var t=e.alt,n=e.src,i=e.style,r=e.containerStyle;return Object(a.c)("div",{style:s({textAlign:"center",backgroundColor:o.theme.background.secondary,paddingTop:10,paddingBottom:10,marginTop:20,marginBottom:20},r)},Object(a.c)("img",{src:n,alt:t,style:i}))}},KoZW:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/versions/latest/sdk/notifications",function(){return n("zo1t")}])},gJph:function(e,t,n){"use strict";n.d(t,"e",(function(){return i})),n.d(t,"a",(function(){return o})),n.d(t,"c",(function(){return a})),n.d(t,"d",(function(){return r})),n.d(t,"b",(function(){return s}));var i=function e(t){return"string"===typeof t?t:Array.isArray(t)?t.map(e).join(""):function(e){var t;return void 0!==(null===e||void 0===e||null===(t=e.props)||void 0===t?void 0:t.children)}(t)?e(t.props.children):""},o=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:7,o=i(t).split(" ").splice(0,n).join("-"),a=e.slug(o);return a},a=function(e){return/https?:\/\/(.*)(\/versions\/.*)/.test(e)},r=function(e,t){var n=e.split("/");return n[2]=t,n.join("/")},s=function e(t,n,i){if("latest"===t)return n?"Latest (".concat(e(n),")"):"Latest";if("unversioned"===t)return"Unversioned";var o="SDK".concat(null===t||void 0===t?void 0:t.substring(1,3));return t===i?"Beta (".concat(o,")"):o}},kiQV:function(e){e.exports=JSON.parse('{"name":"expo-docs","version":"44.0.0","private":true,"scripts":{"dev":"rimraf .next/preval && next dev -p 3002","build":"cross-env NODE_OPTIONS=--max-old-space-size=8192 next build","export":"yarn run build && next export && yarn run export-issue-404","export-issue-404":"echo \\"\ud83d\udee0  Patching https://github.com/vercel/next.js/issues/16528\\"; cp out/404/index.html out/404.html","export-server":"http-server out -p 8000","import-react-native-docs":"node ./scripts/import-react-native-docs.js","test-links":"node --async-stack-traces --unhandled-rejections=strict ./scripts/test-links.js","prettier":"prettier --write \'**/*.{js,ts,tsx,md}\'","lint":"tsc --noEmit && eslint .","lint-links":"remark -u validate-links ./pages","watch":"tsc --noEmit -w","test":"jest","schema-sync":"node --async-stack-traces --unhandled-rejections=strict ./scripts/schema-sync.js","remove-version":"node --unhandled-rejections=strict ./scripts/remove-version.js"},"resolutions":{"webpack":"^5.28.0"},"dependencies":{"@emotion/react":"^11.4.0","@expo/spawn-async":"^1.5.0","@expo/styleguide":"^4.0.1","@mdx-js/loader":"^1.6.22","@mdx-js/mdx":"^1.6.22","@mdx-js/react":"^1.6.22","@mdx-js/runtime":"^1.6.22","@reach/tabs":"^0.15.0","@sentry/browser":"^5.6.1","date-fns":"^2.28.0","docsearch.js":"^2.5.2","emoji-regex":"^9.2.2","front-matter":"^2.3.0","fs-extra":"^6.0.1","github-slugger":"^1.3.0","hotshot":"^1.0.5","lodash":"^4.17.20","next":"^11.1.4","nprogress":"0.2.0","path-browserify":"^1.0.1","prism-react-renderer":"1.0.2","prop-types":"15.7.2","react":"^17.0.2","react-diff-view":"^2.4.7","react-dom":"^17.0.2","react-feather":"^2.0.9","react-markdown":"^6.0.3","react-player":"^1.11.1","react-visibility-sensor":"^5.1.1","remark-gfm":"^1.0.0","tippy.js":"^6.3.1"},"devDependencies":{"@apidevtools/json-schema-ref-parser":"^9.0.9","@babel/core":"^7.13.14","@emotion/babel-preset-css-prop":"^11.2.0","@emotion/jest":"^11.7.1","@testing-library/jest-dom":"5.11.0","@testing-library/react":"10.4.3","@testing-library/react-hooks":"^7.0.2","@types/cacache":"^15.0.1","@types/fs-extra":"^9.0.11","@types/github-slugger":"^1.3.0","@types/google.analytics":"^0.0.41","@types/gtag.js":"^0.0.6","@types/lodash":"^4.14.161","@types/long":"^4.0.1","@types/mdx-js__react":"^1.5.3","@types/node":"^14.11.2","@types/nprogress":"^0.2.0","@types/react":"^17.0.11","axios":"^0.21.2","babel-plugin-module-resolver":"3.1.1","babel-plugin-preval":"^3.0.1","cross-env":"^5.2.0","danger":"^9.2.10","esbuild-loader":"^2.13.1","eslint":"^8.6.0","eslint-config-next":"^10.2.3","eslint-config-universe":"^10.0.0","eslint-plugin-lodash":"^7.3.0","http-server":"^0.12.3","jest":"^27.4.7","js-yaml":"^4.1.0","prettier":"^2.3.1","puppeteer":"^10.2.0","react-test-renderer":"^17.0.2","rehype-slug":"^4.0.1","remark-cli":"^9.0.0","remark-frontmatter":"^2.0.0","remark-validate-links":"^10.0.4","rimraf":"^3.0.2","semver":"^7.3.5","sitemap":"^6.3.0","typescript":"^4.5.4","unist-builder":"^2.0.0","unist-util-visit":"^2.0.3"}}')},uXm5:function(e,t,n){"use strict";n.d(t,"c",(function(){return i})),n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return p}));var i,o=n("H+61"),a=n("UlJF"),r=n("cpVT"),s=n("q1tI"),c=n("gJph");!function(e){e.Text="text",e.InlineCode="inlineCode"}(i||(i={}));var l=2,p=function(){function e(t,n){var i;Object(o.a)(this,e),Object(r.a)(this,"slugger",void 0),Object(r.a)(this,"_headings",void 0),Object(r.a)(this,"_meta",void 0),Object(r.a)(this,"_maxNestingLevel",void 0),this.slugger=t,this._meta=n,this._headings=[];var a=null!==(i=n.maxHeadingDepth)&&void 0!==i?i:1;this._maxNestingLevel=a+l}return Object(a.a)(e,[{key:"headings",get:function(){return this._headings}},{key:"maxNestingLevel",get:function(){return this._maxNestingLevel}},{key:"metadata",get:function(){return this._meta}},{key:"addHeading",value:function(e,t,n,o){var a,r;e=Array.isArray(e)?e.map(c.e).join(" "):e;var p=null!==n&&void 0!==n?n:{},b=p.hideInSidebar,d=p.sidebarTitle,u=p.sidebarDepth,h=p.sidebarType,f=null!=u?l+u:void 0,m=null!==o&&void 0!==o?o:c.a(this.slugger,e),g=c.e(e),O=this.findMetaForTitle(g),j=null!==(a=null!==(r=null!==f&&void 0!==f?f:t)&&void 0!==r?r:null===O||void 0===O?void 0:O.depth)&&void 0!==a?a:l,N={title:null!==d&&void 0!==d?d:g,slug:m,level:j,type:h||(this.isCode(e)?i.InlineCode:i.Text),ref:s.createRef(),metadata:O};return!b&&j>=l&&j<=this.maxNestingLevel&&this._headings.push(N),N}},{key:"findMetaForTitle",value:function(e){var t=this._meta.headings.find((function(t){return t.title===e&&!t._processed}));if(t)return t._processed=!0,t}},{key:"isCode",value:function(e){if(!e.props)return!1;var t=e.props;return[t.name,t.originalType,t.mdxType].some((function(e){return e===i.InlineCode}))}}]),e}()},ufKf:function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return o}));var i="https://snack.expo.dev";function o(e){var t=e.templateId,n=e.code,i=e.files,o=e.baseURL,a={};return i&&Object.keys(i).forEach((function(e){var t=i[e],n=/\.(jsx?|tsx?|json|md)$/i.test(e);a[e]=n?{type:"CODE",url:t.match(/^https?:\/\//)?t:"".concat(o,"/").concat(t)}:{type:"ASSET",contents:t}})),t?a["App.js"]={type:"CODE",url:"".concat(o,"/").concat(t,".js")}:n&&(a["App.js"]={type:"CODE",contents:n}),a}},zo1t:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return u})),n.d(t,"headings",(function(){return h})),n.d(t,"default",(function(){return m}));var i=n("HALo"),o=n("dhJC"),a=(n("q1tI"),n("7ljp")),r=n("vFJ3"),s=n("utVh"),c=n("I0q5"),l=n("KiYJ"),p=n("HCau"),b=n("hykZ"),d=["components"],u={title:"Notifications",sourceCodeUrl:"https://github.com/expo/expo/tree/sdk-44/packages/expo-notifications"},h=[{depth:3,type:"text",title:"Features"},{depth:2,type:"text",title:"Installation"},{depth:2,type:"text",title:"Configuration in app.json / app.config.js"},{depth:2,type:"text",title:"Credentials configuration"},{depth:3,type:"text",title:"Android"},{depth:3,type:"text",title:"iOS"},{depth:2,type:"text",title:"Permissions"},{depth:3,type:"text",title:"Android"},{depth:3,type:"text",title:"iOS"},{depth:2,type:"text",title:"Common gotchas / known issues"},{depth:3,type:"text",title:"Sending notifications directly through APNs and FCM"},{depth:3,type:"text",title:"Fetching a push token takes a long time on iOS"},{depth:2,type:"text",title:"API"},{depth:2,type:"text",title:"Custom notification icon and colors (Android only)"},{depth:2,type:"text",title:"Setting custom notification sounds"},{depth:2,type:"text",title:"Android push notification payload specification"},{depth:2,type:"text",title:"Fetching tokens for push notifications"},{depth:3,type:"inlineCode",title:"getExpoPushTokenAsync(options: ExpoTokenOptions): ExpoPushToken"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Examples"},{depth:4,type:"text",title:"Fetching the Expo push token and uploading it to a server"},{depth:3,type:"inlineCode",title:"getDevicePushTokenAsync(): DevicePushToken"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"addPushTokenListener(listener: PushTokenListener): Subscription"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Examples"},{depth:3,type:"inlineCode",title:"removePushTokenSubscription(subscription: Subscription): void"},{depth:4,type:"text",title:"Arguments"},{depth:2,type:"text",title:"Listening to notification events"},{depth:3,type:"inlineCode",title:"useLastNotificationResponse(): undefined | NotificationResponse | null"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Examples"},{depth:3,type:"inlineCode",title:"addNotificationReceivedListener(listener: (event: Notification) => void): void"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Examples"},{depth:3,type:"inlineCode",title:"addNotificationsDroppedListener(listener: () => void): void"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"addNotificationResponseReceivedListener(listener: (event: NotificationResponse) => void): void"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Examples"},{depth:4,type:"text",title:"Registering a notification listener using a React hook"},{depth:4,type:"text",title:"Handling push notifications with React Navigation"},{depth:3,type:"inlineCode",title:"removeNotificationSubscription(subscription: Subscription): void"},{depth:4,type:"text",title:"Arguments"},{depth:2,type:"text",title:"Handling incoming notifications when the app is in foreground"},{depth:3,type:"inlineCode",title:"setNotificationHandler(handler: NotificationHandler | null): void"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Examples"},{depth:2,type:"text",title:"Handling incoming notifications when the app is not in the foreground (not supported in Expo Go)"},{depth:3,type:"inlineCode",title:"registerTaskAsync(taskName: string): void"},{depth:4,type:"text",title:"Example"},{depth:3,type:"inlineCode",title:"unregisterTaskAsync(taskName: string): void"},{depth:2,type:"text",title:"Fetching information about notifications-related permissions"},{depth:3,type:"inlineCode",title:"getPermissionsAsync(): Promise<NotificationPermissionsStatus>"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Examples"},{depth:3,type:"inlineCode",title:"requestPermissionsAsync(request?: NotificationPermissionsRequest): Promise<NotificationPermissionsStatus>"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Examples"},{depth:3,type:"text",title:"Interpreting the iOS permissions response"},{depth:2,type:"text",title:"Managing application badge icon"},{depth:3,type:"inlineCode",title:"getBadgeCountAsync(): Promise<number>"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"setBadgeCountAsync(badgeCount: number, options?: SetBadgeCountOptions): Promise<boolean>"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:2,type:"text",title:"Scheduling notifications"},{depth:3,type:"inlineCode",title:"getAllScheduledNotificationsAsync(): Promise<Notification[]>"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"presentNotificationAsync(content: NotificationContentInput, identifier?: string): Promise<string>"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Examples"},{depth:4,type:"text",title:"Presenting the notification to the user (deprecated way)"},{depth:4,type:"text",title:"Presenting the notification to the user (recommended way)"},{depth:3,type:"inlineCode",title:"scheduleNotificationAsync(notificationRequest: NotificationRequestInput): Promise<string>"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Examples"},{depth:4,type:"text",title:"Scheduling the notification that will trigger once, in one minute from now"},{depth:4,type:"text",title:"Scheduling the notification that will trigger repeatedly, every 20 minutes"},{depth:4,type:"text",title:"Scheduling the notification that will trigger once, at the beginning of next hour"},{depth:3,type:"inlineCode",title:"cancelScheduledNotificationAsync(identifier: string): Promise<void>"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Examples"},{depth:4,type:"text",title:"Scheduling and then canceling the notification"},{depth:3,type:"inlineCode",title:"cancelAllScheduledNotificationsAsync(): Promise<void>"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"getNextTriggerDateAsync(trigger: SchedulableNotificationTriggerInput): Promise<number | null>"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Examples"},{depth:4,type:"text",title:"Calculating next trigger date for a notification trigger"},{depth:2,type:"text",title:"Dismissing notifications"},{depth:3,type:"inlineCode",title:"getPresentedNotificationsAsync(): Promise<Notification[]>"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"dismissNotificationAsync(identifier: string): Promise<void>"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"dismissAllNotificationsAsync(): Promise<void>"},{depth:4,type:"text",title:"Returns"},{depth:2,type:"text",title:"Managing notification channels (Android-specific)"},{depth:3,type:"inlineCode",title:"getNotificationChannelsAsync(): Promise<NotificationChannel[]>"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"getNotificationChannelAsync(identifier: string): Promise<NotificationChannel | null>"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"setNotificationChannelAsync(identifier: string, channel: NotificationChannelInput): Promise<NotificationChannel | null>"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"deleteNotificationChannelAsync(identifier: string): Promise<void>"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"getNotificationChannelGroupsAsync(): Promise<NotificationChannelGroup[]>"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"getNotificationChannelGroupAsync(identifier: string): Promise<NotificationChannelGroup | null>"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"setNotificationChannelGroupAsync(identifier: string, channel: NotificationChannelGroupInput): Promise<NotificationChannelGroup | null>"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"deleteNotificationChannelGroupAsync(identifier: string): Promise<void>"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:2,type:"text",title:"Managing notification categories (interactive notifications)"},{depth:3,type:"inlineCode",title:"setNotificationCategoryAsync(identifier: string, actions: NotificationAction[], options: CategoryOptions): Promise<NotificationCategory | null>"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"getNotificationCategoriesAsync(): Promise<NotificationCategory[]>"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"deleteNotificationCategoryAsync(identifier: string): Promise<boolean>"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:2,type:"text",title:"Types"},{depth:4,type:"inlineCode",title:"DevicePushToken"},{depth:4,type:"inlineCode",title:"PushTokenListener"},{depth:4,type:"inlineCode",title:"ExpoPushToken"},{depth:4,type:"inlineCode",title:"Subscription"},{depth:4,type:"inlineCode",title:"Notification"},{depth:4,type:"inlineCode",title:"NotificationRequest"},{depth:4,type:"inlineCode",title:"NotificationContent"},{depth:4,type:"inlineCode",title:"NotificationContentInput"},{depth:4,type:"inlineCode",title:"NotificationRequestInput"},{depth:4,type:"inlineCode",title:"AndroidNotificationPriority"},{depth:4,type:"inlineCode",title:"NotificationTrigger"},{depth:4,type:"inlineCode",title:"PushNotificationTrigger"},{depth:4,type:"inlineCode",title:"FirebaseRemoteMessage"},{depth:4,type:"inlineCode",title:"TimeIntervalNotificationTrigger"},{depth:4,type:"inlineCode",title:"DailyNotificationTrigger"},{depth:4,type:"inlineCode",title:"WeeklyNotificationTrigger"},{depth:4,type:"inlineCode",title:"YearlyNotificationTrigger"},{depth:4,type:"inlineCode",title:"CalendarNotificationTrigger"},{depth:4,type:"inlineCode",title:"LocationNotificationTrigger"},{depth:4,type:"inlineCode",title:"UnknownNotificationTrigger"},{depth:4,type:"inlineCode",title:"NotificationTriggerInput"},{depth:4,type:"inlineCode",title:"SchedulableNotificationTriggerInput"},{depth:4,type:"inlineCode",title:"ChannelAwareTriggerInput"},{depth:4,type:"inlineCode",title:"DateTriggerInput"},{depth:4,type:"inlineCode",title:"TimeIntervalTriggerInput"},{depth:4,type:"inlineCode",title:"DailyTriggerInput"},{depth:4,type:"inlineCode",title:"WeeklyTriggerInput"},{depth:4,type:"inlineCode",title:"YearlyTriggerInput"},{depth:4,type:"inlineCode",title:"CalendarTriggerInput"},{depth:4,type:"inlineCode",title:"NotificationResponse"},{depth:4,type:"inlineCode",title:"NotificationBehavior"},{depth:4,type:"inlineCode",title:"NotificationChannel"},{depth:4,type:"inlineCode",title:"NotificationChannelInput"},{depth:4,type:"inlineCode",title:"NotificationChannelGroup"},{depth:4,type:"inlineCode",title:"NotificationChannelGroupInput"},{depth:4,type:"inlineCode",title:"NotificationCategory"},{depth:4,type:"inlineCode",title:"NotificationAction"},{depth:4,type:"inlineCode",title:"NotificationPermissionsStatus"}],f={meta:u,headings:h};function m(e){var t=e.components,n=Object(o.a)(e,d);return Object(a.b)("wrapper",Object(i.a)({},f,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("inlineCode",{parentName:"strong"},"expo-notifications"))," provides an API to fetch push notification tokens and to present, schedule, receive and respond to notifications."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Migrating from Expo's ",Object(a.b)("inlineCode",{parentName:"p"},"LegacyNotifications")," module? ",Object(a.b)("a",{parentName:"p",href:"https://github.com/expo/fyi/blob/master/LegacyNotifications-to-ExpoNotifications.md"},"Here's a guide to help make the transition as easy as possible"),".")),Object(a.b)("h3",{id:"features"},"Features"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"\ud83d\udce3 schedule a one-off notification for a specific date, or some time from now,"),Object(a.b)("li",{parentName:"ul"},"\ud83d\udd01 schedule a notification repeating in some time interval (or a calendar date match on iOS),"),Object(a.b)("li",{parentName:"ul"},"\ud83d\udcaf get and set application badge icon number,"),Object(a.b)("li",{parentName:"ul"},"\ud83d\udcf2 fetch a native device push token so you can send push notifications with FCM and APNS,"),Object(a.b)("li",{parentName:"ul"},"\ud83d\ude0e fetch an Expo push token so you can send push notifications with Expo,"),Object(a.b)("li",{parentName:"ul"},"\ud83d\udcec listen to incoming notifications in the foreground and background,"),Object(a.b)("li",{parentName:"ul"},"\ud83d\udc46 listen to interactions with notifications,"),Object(a.b)("li",{parentName:"ul"},"\ud83c\udf9b handle notifications when the app is in foreground,"),Object(a.b)("li",{parentName:"ul"},"\ud83d\udd15 imperatively dismiss notifications from Notification Center/tray,"),Object(a.b)("li",{parentName:"ul"},"\ud83d\uddc2 create, update, delete Android notification channels,"),Object(a.b)("li",{parentName:"ul"},"\ud83c\udfa8 set custom icon and color for notifications on Android.")),Object(a.b)(b.a,{title:"Push notifications Platform Compatibility",android:!0,ios:!0,mdxType:"PlatformsSection"}),Object(a.b)(b.a,{title:"Local notifications Platform Compatibility",android:!0,emulator:!0,ios:!0,simulator:!0,mdxType:"PlatformsSection"}),Object(a.b)("h2",{id:"installation"},"Installation"),Object(a.b)(p.b,{packageName:"expo-notifications",mdxType:"InstallSection"}),Object(a.b)("h2",{id:"configuration-in-appjson--appconfigjs"},"Configuration in app.json / app.config.js"),Object(a.b)("p",null,"You can configure ",Object(a.b)("inlineCode",{parentName:"p"},"expo-notifications")," using its built-in ",Object(a.b)("a",{parentName:"p",href:"/guides/config-plugins/"},"config plugin")," if you use config plugins in your project (",Object(a.b)("a",{parentName:"p",href:"/build/introduction/"},"EAS Build")," or ",Object(a.b)("inlineCode",{parentName:"p"},"expo run:[android|ios]"),"). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect."),Object(a.b)(r.a,{mdxType:"ConfigClassic"},Object(a.b)("p",null,"Learn how to configure notifications with the ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/config/app/#notification"},"app manifest ",Object(a.b)("inlineCode",{parentName:"a"},"notification")," property"),".")),Object(a.b)(r.d,{mdxType:"ConfigReactNative"},Object(a.b)("p",null,"Learn how to configure the native projects in the ",Object(a.b)("a",{parentName:"p",href:"https://github.com/expo/expo/tree/main/packages/expo-notifications#installation-in-bare-react-native-projects"},"installation instructions in the ",Object(a.b)("inlineCode",{parentName:"a"},"expo-notifications")," repository"),".")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"The iOS APNS entitlement is ",Object(a.b)("em",{parentName:"p"},"always")," set to 'development'. Xcode automatically changes this to 'production' during archive. ",Object(a.b)("a",{parentName:"p",href:"https://stackoverflow.com/a/42293632/4047926"},"Learn more"),".")),Object(a.b)(r.b,{mdxType:"ConfigPluginExample"},Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n  "expo": {\n    "plugins": [\n      [\n        "expo-notifications",\n        {\n          "icon": "./local/assets/notification-icon.png",\n          "color": "#ffffff",\n          "sounds": [\n            "./local/assets/notification-sound.wav",\n            "./local/assets/notification-sound-other.wav"\n          ]\n        }\n      ]\n    ]\n  }\n}\n'))),Object(a.b)(r.c,{properties:[{name:"icon",platform:"android",description:"Local path to an image to use as the icon for push notifications. 96x96 all-white png with transparency."},{name:"color",default:"#ffffff",platform:"android",description:"Tint color for the push notification image when it appears in the notification tray."},{name:"sounds",description:"Array of local paths to sound files (.wav recommended) that can be used as custom notification sounds."}],mdxType:"ConfigPluginProperties"}),Object(a.b)("h2",{id:"credentials-configuration"},"Credentials configuration"),Object(a.b)("h3",{id:"android"},"Android"),Object(a.b)("p",null,"Firebase Cloud Messaging credentials are required for all Android apps, except in Expo Go. To set up your Android app to receive push notifications using your own FCM credentials, ",Object(a.b)("a",{parentName:"p",href:"/push-notifications/using-fcm/"},"carefully follow this guide"),"."),Object(a.b)("h3",{id:"ios"},"iOS"),Object(a.b)("p",null,"Learn how push notification credentials can be automatically generated or uploaded ",Object(a.b)("a",{parentName:"p",href:"/push-notifications/push-notifications-setup/#credentials"},"in the push notifications setup guide"),"."),Object(a.b)("h2",{id:"permissions"},"Permissions"),Object(a.b)("h3",{id:"android-1"},"Android"),Object(a.b)("p",null,"On Android, this module requires permission to subscribe to device boot. It's used to setup scheduled notifications when the device (re)starts. The ",Object(a.b)("inlineCode",{parentName:"p"},"RECEIVE_BOOT_COMPLETED")," permission is added automatically through the library ",Object(a.b)("strong",{parentName:"p"},"AndroidManifest.xml"),"."),Object(a.b)(s.a,{permissions:["RECEIVE_BOOT_COMPLETED"],mdxType:"AndroidPermissions"}),Object(a.b)("h3",{id:"ios-1"},"iOS"),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"No usage description required, see ",Object(a.b)("a",{parentName:"em",href:"/versions/latest/sdk/notifications/#fetching-information-about-notifications-related-permissions"},"notification-related permissions"),".")),Object(a.b)("h2",{id:"common-gotchas--known-issues"},"Common gotchas / known issues"),Object(a.b)("h3",{id:"sending-notifications-directly-through-apns-and-fcm"},"Sending notifications directly through APNs and FCM"),Object(a.b)("p",null,"If you are not using ",Object(a.b)("a",{parentName:"p",href:"/push-notifications/sending-notifications/"},"Expo's push notification service")," and would instead like to communicate with Apple and Firebase directly, then you should read ",Object(a.b)("a",{parentName:"p",href:"/push-notifications/sending-notifications-custom/"},"this guide closely"),", paying ",Object(a.b)("strong",{parentName:"p"},"special attention to the payload formats"),", since providing different formats can result in unexpected behavior on both platforms."),Object(a.b)("h3",{id:"fetching-a-push-token-takes-a-long-time-on-ios"},"Fetching a push token takes a long time on iOS"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"getDevicePushTokenAsync")," and ",Object(a.b)("inlineCode",{parentName:"p"},"getExpoPushTokenAsync")," can sometimes take a long time to resolve on iOS. This is outside of ",Object(a.b)("inlineCode",{parentName:"p"},"expo-notifications"),"'s control, as stated in Apple's ",Object(a.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/technotes/tn2265/_index.html"},"\u201cTroubleshooting Push Notifications\u201d technical note"),":"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"This is not necessarily an error condition. The system may not have Internet connectivity at all because it is out of range of any cell towers or Wi-Fi access points, or it may be in airplane mode. Instead of treating this as an error, your app should continue normally, disabling only that functionality that relies on push notifications.")),Object(a.b)("p",null,"As mentioned, the most common reasons for this issue are either an invalid Internet connection (fetching a push token requires an Internet connection to register the device with the service provider) or an invalid configuration of your App ID or Provisioning Profile."),Object(a.b)("p",null,"Here are a few ways people claim to have solved this problem, maybe one of these will help you solve it, too!"),Object(a.b)("details",null,Object(a.b)("summary",null,Object(a.b)("strong",null,"Read the Apple's ",Object(a.b)("a",{href:"https://developer.apple.com/library/archive/technotes/tn2265/_index.html"},"Technical Note on troubleshooting push notifications")))," ",Object(a.b)("p",null,Object(a.b)("p",null,"Go read the Apple's ",Object(a.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/technotes/tn2265/_index.html"},"Technical Note on troubleshooting push notifications"),"! This the single most reliable source of information on this problem. To help you grasp what they're suggesting:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Make sure the device has a reliable connection to the Internet (try turning off Wi-Fi or switching to another network, and disabling firewall block on port 5223, as suggested in ",Object(a.b)("a",{parentName:"li",href:"https://stackoverflow.com/a/34332047/1123156"},"this SO answer"),")."),Object(a.b)("li",{parentName:"ul"},"Make sure your app configuration is set properly for registering for push notifications (for bare workflow check out ",Object(a.b)("a",{parentName:"li",href:"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html#//apple_ref/doc/uid/TP40012582-CH26-SW6"},"this guide"),", for managed workflow this is done automatically for you by ",Object(a.b)("inlineCode",{parentName:"li"},"expo-cli"),") as also suggested by ",Object(a.b)("a",{parentName:"li",href:"https://stackoverflow.com/a/10791240/1123156"},"this StackOverflow answer"),"."),Object(a.b)("li",{parentName:"ul"},"If you're in bare workflow you may want to try to debug this even further by logging persistent connection debug information as outlined by ",Object(a.b)("a",{parentName:"li",href:"https://stackoverflow.com/a/8036052/1123156"},"this StackOverflow answer"),".")))),Object(a.b)("details",null,Object(a.b)("summary",null,Object(a.b)("strong",null,"Try again in a little while"))," ",Object(a.b)("p",null,Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"APNS servers near the device may be down as indicated by ",Object(a.b)("a",{parentName:"li",href:"https://developer.apple.com/forums/thread/52224"},"this forum thread"),". Take a walk and try again later!"),Object(a.b)("li",{parentName:"ul"},"Try again in a few days time as suggested by ",Object(a.b)("a",{parentName:"li",href:"https://github.com/expo/expo/issues/10369#issuecomment-717872956"},"this GitHub comment"),".")))),Object(a.b)("details",null,Object(a.b)("summary",null,Object(a.b)("strong",null,"Disable network sharing on your device"))," ",Object(a.b)("p",null,Object(a.b)("p",null,"You may need to disable network sharing as this may impact the registration as suggested by ",Object(a.b)("a",{parentName:"p",href:"https://stackoverflow.com/a/59156989/1123156"},"this StackOverflow answer"),"."))),Object(a.b)("details",null,Object(a.b)("summary",null,Object(a.b)("strong",null,"Restart your device"))," ",Object(a.b)("p",null,Object(a.b)("p",null,"If you just changed the APNS servers where the app should be registering (by installing a TestFlight build over an Xcode build on the same device) you may need to restart your device as suggested by ",Object(a.b)("a",{parentName:"p",href:"https://stackoverflow.com/a/59864028/1123156"},"this StackOverflow answer"),"."))),Object(a.b)("details",null,Object(a.b)("summary",null,Object(a.b)("strong",null,"Setup your device with a SIM card"))," ",Object(a.b)("p",null,Object(a.b)("p",null,"If the device you're experiencing this on hasn't been setup with a SIM card it looks like configuring it may help mitigate this bug as suggested by ",Object(a.b)("a",{parentName:"p",href:"https://stackoverflow.com/a/19432504/1123156"},"this StackOverflow answer"),"."))),Object(a.b)("h2",{id:"api"},"API"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"import * as Notifications from 'expo-notifications';\n")),Object(a.b)("p",null,"Check out the Snack below to see Notifications in action, but be sure to use a physical device! Push notifications don't work on simulators/emulators."),Object(a.b)(c.a,{label:"Push Notifications",dependencies:["expo-constants","expo-permissions","expo-notifications"],mdxType:"SnackInline"},Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"import Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Text, View, Button, Platform } from 'react-native';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\nexport default function App() {\n  const [expoPushToken, setExpoPushToken] = useState('');\n  const [notification, setNotification] = useState(false);\n  const notificationListener = useRef();\n  const responseListener = useRef();\n\n  useEffect(() => {\n    registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\n\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      setNotification(notification);\n    });\n\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    return () => {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'space-around',\n      }}\n    >\n      <Text>Your expo push token: {expoPushToken}</Text>\n      <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Title: {notification && notification.request.content.title} </Text>\n        <Text>Body: {notification && notification.request.content.body}</Text>\n        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\n      </View>\n      <Button\n        title=\"Press to schedule a notification\"\n        onPress={async () => {\n          await schedulePushNotification();\n        }}\n      />\n    </View>\n  );\n}\n\nasync function schedulePushNotification() {\n  await Notifications.scheduleNotificationAsync({\n    content: {\n      title: \"You've got mail! \ud83d\udcec\",\n      body: 'Here is the notification body',\n      data: { data: 'goes here' },\n    },\n    trigger: { seconds: 2 },\n  });\n}\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n  if (Constants.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n    console.log(token);\n  } else {\n    alert('Must use physical device for Push Notifications');\n  }\n\n  if (Platform.OS === 'android') {\n    Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  return token;\n}\n"))),Object(a.b)("h2",{id:"custom-notification-icon-and-colors-android-only"},"Custom notification icon and colors (Android only)"),Object(a.b)("p",null,"In the managed workflow, set your ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/config/app/#notification"},Object(a.b)("inlineCode",{parentName:"a"},"notification.icon"))," and ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/config/app/#notification"},Object(a.b)("inlineCode",{parentName:"a"},"notification.color"))," keys in ",Object(a.b)("strong",{parentName:"p"},"app.json"),", rebuild your app, and you're good to go!"),Object(a.b)("p",null,"For bare workflow ",Object(a.b)("strong",{parentName:"p"},"and EAS Build users"),", the configuration is also done in ",Object(a.b)("strong",{parentName:"p"},"app.json"),", but you'll use the ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#optional-setup"},Object(a.b)("inlineCode",{parentName:"a"},"expo-notifications")," config plugin instead"),"."),Object(a.b)("p",null,"For your notification icon, make sure you follow ",Object(a.b)("a",{parentName:"p",href:"https://material.io/design/iconography/product-icons.html#design-principles"},"Google's design guidelines")," (the icon must be all white with a transparent background) or else it may not be displayed as intended."),Object(a.b)("p",null,"In both the managed and bare workflow, you can also set a custom notification color ",Object(a.b)("em",{parentName:"p"},"per-notification")," directly in your ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationcontentinput"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationContentInput"))," under the ",Object(a.b)("inlineCode",{parentName:"p"},"color")," attribute."),Object(a.b)("h2",{id:"setting-custom-notification-sounds"},"Setting custom notification sounds"),Object(a.b)("p",null,"Custom notification sounds are only supported when using ",Object(a.b)("a",{parentName:"p",href:"/../../../../../../build/introduction/"},"EAS Build"),", or in the bare workflow."),Object(a.b)("p",null,"To add custom push notification sounds to your app, add the ",Object(a.b)("inlineCode",{parentName:"p"},"expo-notifications")," plugin to your ",Object(a.b)("strong",{parentName:"p"},"app.json")," file:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n  "expo": {\n    "plugins": [\n      [\n        "expo-notifications",\n        {\n          "sounds": ["local/path/to/mySoundFile.wav"]\n        }\n      ]\n    ]\n  }\n}\n')),Object(a.b)("p",null,"After building your app, the array of files will be available for use in both ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationcontentinput"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationContentInput"))," and ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationchannelinput"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationChannelInput")),". You ",Object(a.b)("em",{parentName:"p"},"only")," need to provide the base filename- here's an example using the config above:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"await Notifications.setNotificationChannelAsync('new-emails', {\n  name: 'E-mail notifications',\n  sound: 'mySoundFile.wav', // Provide ONLY the base filename\n});\n\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! \ud83d\udcec\",\n    sound: 'mySoundFile.wav', // Provide ONLY the base filename\n  },\n  trigger: {\n    seconds: 2,\n    channelId: 'new-emails',\n  },\n});\n")),Object(a.b)("p",null,"You can also manually add notification files to your Android and iOS projects if you prefer:"),Object(a.b)("details",null,Object(a.b)("summary",null,Object(a.b)("strong",null,"Manually adding notification sounds on Android"))," ",Object(a.b)("p",null,Object(a.b)("p",null,"On Androids 8.0+, playing a custom sound for a notification requires more than setting the ",Object(a.b)("inlineCode",{parentName:"p"},"sound")," property on the ",Object(a.b)("inlineCode",{parentName:"p"},"NotificationContentInput"),". You will ",Object(a.b)("em",{parentName:"p"},"also")," need to configure the ",Object(a.b)("inlineCode",{parentName:"p"},"NotificationChannel")," with the appropriate ",Object(a.b)("inlineCode",{parentName:"p"},"sound"),", and use it when sending/scheduling the notification."),Object(a.b)("p",null,"For the example below to work, you would place your ",Object(a.b)("inlineCode",{parentName:"p"},"email-sound.wav")," file in ",Object(a.b)("inlineCode",{parentName:"p"},"android/app/src/main/res/raw/"),"."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"// Prepare the notification channel\nawait Notifications.setNotificationChannelAsync('new-emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'email-sound.wav', // <- for Android 8.0+, see channelId property below\n});\n\n// Eg. schedule the notification\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! \ud83d\udcec\",\n    body: 'Open the notification to read them all',\n    sound: 'email-sound.wav', // <- for Android below 8.0\n  },\n  trigger: {\n    seconds: 2,\n    channelId: 'new-emails', // <- for Android 8.0+, see definition above\n  },\n});\n")))),Object(a.b)("details",null,Object(a.b)("summary",null,Object(a.b)("strong",null,"Manually adding notification sounds on iOS"))," ",Object(a.b)("p",null,Object(a.b)("p",null,"On iOS, all that's needed is to place your sound file in your Xcode project (see the screenshot below), and then specify the sound file in your ",Object(a.b)("inlineCode",{parentName:"p"},"NotificationContentInput"),", like this:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"await Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! \ud83d\udcec\",\n    body: 'Open the notification to read them all',\n    sound: 'notification.wav',\n  },\n  trigger: {\n    // ...\n  },\n});\n")),Object(a.b)(l.a,{alt:"notification.wav inside of app resources in Xcode project organizer",src:"/static/images/notification-sound-ios.jpeg",style:{maxWidth:305},mdxType:"ImageSpotlight"}))),Object(a.b)("h2",{id:"android-push-notification-payload-specification"},"Android push notification payload specification"),Object(a.b)("p",null,"When sending a push notification, put an object conforming to the following type as ",Object(a.b)("inlineCode",{parentName:"p"},"data")," of the notification:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface FirebaseData {\n  title?: string;\n  message?: string;\n  subtitle?: string;\n  sound?: boolean | string;\n  vibrate?: boolean | number[];\n  priority?: AndroidNotificationPriority;\n  badge?: number;\n}\n")),Object(a.b)("h2",{id:"fetching-tokens-for-push-notifications"},"Fetching tokens for push notifications"),Object(a.b)("h3",{id:"getexpopushtokenasyncoptions-expotokenoptions-expopushtoken"},Object(a.b)("inlineCode",{parentName:"h3"},"getExpoPushTokenAsync(options: ExpoTokenOptions): ExpoPushToken")),Object(a.b)("p",null,"Returns an Expo token that can be used to send a push notification to the device using Expo's push notifications service. ",Object(a.b)("a",{parentName:"p",href:"/push-notifications/overview/"},"Read more in the Push Notifications guide"),"."),Object(a.b)("p",null,"This method makes a request to Expo's servers, so it can reject in cases where the request itself fails (like due to the device being offline, experiencing a network timeout, or other HTTPS request failures). To provide offline support to your users, you should ",Object(a.b)("inlineCode",{parentName:"p"},"try/catch")," this method and implement retry logic to attempt to get the push token later, once the device is back online."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Note:")," For Expo's backend to be able to send notifications to your app, you will need to provide it with push notification keys. This can be done using ",Object(a.b)("inlineCode",{parentName:"p"},"expo-cli")," (",Object(a.b)("inlineCode",{parentName:"p"},"expo credentials:manager"),"). ",Object(a.b)("a",{parentName:"p",href:"/push-notifications/push-notifications-setup/#credentials"},"Read more in the \u201cUpload notifications credentials\u201d guide"),".")),Object(a.b)("h4",{id:"arguments"},"Arguments"),Object(a.b)("p",null,"This function accepts an optional object allowing you to pass in configuration, consisting of fields (all are optional, but some may have to be defined if configuration cannot be inferred):"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"experienceId (",Object(a.b)("em",{parentName:"strong"},"string"),")")," -- ",Object(a.b)("strong",{parentName:"li"},"Although this is optional, we recommend explicitly passing it in"),". The ID of the experience to which the token should be attributed. Defaults to ",Object(a.b)("a",{parentName:"li",href:"/../../../../../../versions/latest/sdk/constants/#constantsmanifest"},Object(a.b)("inlineCode",{parentName:"a"},"Constants.manifest.id"))," exposed by ",Object(a.b)("inlineCode",{parentName:"li"},"expo-constants"),". When building with EAS Build, or in the bare workflow, ",Object(a.b)("strong",{parentName:"li"},"this is required")," and you must provide a value which takes the shape ",Object(a.b)("inlineCode",{parentName:"li"},"@username/projectSlug"),", where ",Object(a.b)("inlineCode",{parentName:"li"},"username")," is the Expo account that the project is associated with, and ",Object(a.b)("inlineCode",{parentName:"li"},"projectSlug")," is your ",Object(a.b)("a",{parentName:"li",href:"/versions/latest/config/app/#slug"},Object(a.b)("inlineCode",{parentName:"a"},"slug")," from ",Object(a.b)("strong",{parentName:"a"},"app.json")),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"devicePushToken (",Object(a.b)("a",{parentName:"strong",href:"/versions/latest/sdk/notifications/#devicepushtoken"},Object(a.b)("em",{parentName:"a"},"DevicePushToken")),")")," -- The device push token with which to register at the backend. Defaults to a token fetched with ",Object(a.b)("a",{parentName:"li",href:"/versions/latest/sdk/notifications/#getdevicepushtokenasync-devicepushtoken"},Object(a.b)("inlineCode",{parentName:"a"},"getDevicePushTokenAsync()")),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"applicationId (",Object(a.b)("em",{parentName:"strong"},"string"),")")," -- The ID of the application to which the token should be attributed. Defaults to ",Object(a.b)("a",{parentName:"li",href:"/../../../../../../versions/latest/sdk/application/#applicationapplicationid"},Object(a.b)("inlineCode",{parentName:"a"},"Application.applicationId"))," exposed by ",Object(a.b)("inlineCode",{parentName:"li"},"expo-application"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"development (",Object(a.b)("em",{parentName:"strong"},"boolean"),")")," -- Makes sense only on iOS, where there are two push notification services: sandbox and production. This defines whether the push token is supposed to be used with the sandbox platform notification service. Defaults to ",Object(a.b)("a",{parentName:"li",href:"/../../../../../../versions/latest/sdk/application/#applicationgetiospushnotificationserviceenvironmentasync"},Object(a.b)("inlineCode",{parentName:"a"},"Application.getIosPushNotificationServiceEnvironmentAsync()"))," exposed by ",Object(a.b)("inlineCode",{parentName:"li"},"expo-application")," or ",Object(a.b)("inlineCode",{parentName:"li"},"false"),". Most probably you won't need to customize that. You may want to customize that if you don't want to install ",Object(a.b)("inlineCode",{parentName:"li"},"expo-application")," and still use the sandbox APNS.")),Object(a.b)("h4",{id:"returns"},"Returns"),Object(a.b)("p",null,"Returns a ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," that resolves to an object with the following fields:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"type (",Object(a.b)("em",{parentName:"strong"},"string"),")")," -- Always ",Object(a.b)("inlineCode",{parentName:"li"},"expo"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"data (",Object(a.b)("em",{parentName:"strong"},"string"),")")," -- The push token as a string.")),Object(a.b)("h4",{id:"examples"},"Examples"),Object(a.b)("h4",{id:"fetching-the-expo-push-token-and-uploading-it-to-a-server"},"Fetching the Expo push token and uploading it to a server"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"import Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\n\nexport async function registerForPushNotificationsAsync(userId: string) {\n  const expoPushToken = await Notifications.getExpoPushTokenAsync({\n    experienceId: '@username/example',\n  });\n\n  await fetch('https://example.com/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      userId,\n      expoPushToken,\n    }),\n  });\n}\n")),Object(a.b)("h3",{id:"getdevicepushtokenasync-devicepushtoken"},Object(a.b)("inlineCode",{parentName:"h3"},"getDevicePushTokenAsync(): DevicePushToken")),Object(a.b)("p",null,"Returns a native APNS, FCM token or a ",Object(a.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription"},Object(a.b)("inlineCode",{parentName:"a"},"PushSubscription")," data")," that can be used with another push notification service."),Object(a.b)("h4",{id:"returns-1"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," that resolves to an object with the following fields:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"type (",Object(a.b)("em",{parentName:"strong"},"string"),")")," -- Either ",Object(a.b)("inlineCode",{parentName:"li"},"ios"),", ",Object(a.b)("inlineCode",{parentName:"li"},"android")," or ",Object(a.b)("inlineCode",{parentName:"li"},"web"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"data (",Object(a.b)("em",{parentName:"strong"},"string")," or ",Object(a.b)("em",{parentName:"strong"},"object"),")")," -- Either the push token as a string (for ",Object(a.b)("inlineCode",{parentName:"li"},'type == "ios" | "android"'),") or an object conforming to the type below (for ",Object(a.b)("inlineCode",{parentName:"li"},'type == "web"'),"):",Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",{parentName:"pre",className:"language-ts"},"{\n  endpoint: string;\n  keys: {\n    p256dh: string;\n    auth: string;\n  }\n}\n")))),Object(a.b)("h3",{id:"addpushtokenlistenerlistener-pushtokenlistener-subscription"},Object(a.b)("inlineCode",{parentName:"h3"},"addPushTokenListener(listener: PushTokenListener): Subscription")),Object(a.b)("p",null,"In rare situations a push token may be changed by the push notification service while the app is running. When a token is rolled, the old one becomes invalid and sending notifications to it will fail. A push token listener will let you handle this situation gracefully by registering the new token with your backend right away."),Object(a.b)("h4",{id:"arguments-1"},"Arguments"),Object(a.b)("p",null,"A single and required argument is a function accepting a push token as an argument. It will be called whenever the push token changes."),Object(a.b)("h4",{id:"returns-2"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#subscription"},Object(a.b)("inlineCode",{parentName:"a"},"Subscription"))," object representing the subscription of the provided listener."),Object(a.b)("h4",{id:"examples-1"},"Examples"),Object(a.b)("p",null,"Registering a push token listener using a React hook"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport * as Notifications from 'expo-notifications';\n\nimport { registerDevicePushTokenAsync } from '../api';\n\nexport default function App() {\n  React.useEffect(() => {\n    const subscription = Notifications.addPushTokenListener(registerDevicePushTokenAsync);\n    return () => subscription.remove();\n  }, []);\n\n  return (\n    // Your app content\n  );\n}\n")),Object(a.b)("h3",{id:"removepushtokensubscriptionsubscription-subscription-void"},Object(a.b)("inlineCode",{parentName:"h3"},"removePushTokenSubscription(subscription: Subscription): void")),Object(a.b)("p",null,"Removes a push token subscription returned by a ",Object(a.b)("inlineCode",{parentName:"p"},"addPushTokenListener")," call."),Object(a.b)("h4",{id:"arguments-2"},"Arguments"),Object(a.b)("p",null,"A single and required argument is a subscription returned by ",Object(a.b)("inlineCode",{parentName:"p"},"addPushTokenListener"),"."),Object(a.b)("h2",{id:"listening-to-notification-events"},"Listening to notification events"),Object(a.b)("p",null,"Notification events include incoming notifications, interactions your users perform with notifications (this can be tapping on a notification, or interacting with it via ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#managing-notification-categories-interactive-notifications"},"notification categories"),"), and rare occasions when your notifications may be dropped."),Object(a.b)("p",null,"A few different listeners are exposed, so we've provided a chart below which will hopefully help you understand when you can expect each one to be triggered:"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:"left"},"User interacted with notification?"),Object(a.b)("th",{parentName:"tr",align:"center"},"App state"),Object(a.b)("th",{parentName:"tr",align:null},"Listener(s) triggered"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:"left"},"false"),Object(a.b)("td",{parentName:"tr",align:"center"},"Foreground"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("inlineCode",{parentName:"td"},"NotificationReceivedListener"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:"left"},"false"),Object(a.b)("td",{parentName:"tr",align:"center"},"Background"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("inlineCode",{parentName:"td"},"BackgroundNotificationTask"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:"left"},"false"),Object(a.b)("td",{parentName:"tr",align:"center"},"Killed"),Object(a.b)("td",{parentName:"tr",align:null},"none")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:"left"},"true"),Object(a.b)("td",{parentName:"tr",align:"center"},"Foreground"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("inlineCode",{parentName:"td"},"NotificationReceivedListener")," & ",Object(a.b)("inlineCode",{parentName:"td"},"NotificationResponseReceivedListener"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:"left"},"true"),Object(a.b)("td",{parentName:"tr",align:"center"},"Background"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("inlineCode",{parentName:"td"},"NotificationResponseReceivedListener"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:"left"},"true"),Object(a.b)("td",{parentName:"tr",align:"center"},"Killed"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("inlineCode",{parentName:"td"},"NotificationResponseReceivedListener"))))),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"In the chart above, whenever ",Object(a.b)("inlineCode",{parentName:"p"},"NotificationResponseReceivedListener")," is triggered, the same would apply to the ",Object(a.b)("inlineCode",{parentName:"p"},"useLastNotificationResponse")," hook.")),Object(a.b)("h3",{id:"uselastnotificationresponse-undefined--notificationresponse--null"},Object(a.b)("inlineCode",{parentName:"h3"},"useLastNotificationResponse(): undefined | NotificationResponse | null")),Object(a.b)("p",null,"A React hook always returning the notification response that was received most recently (a notification response designates an interaction with a notification, such as tapping on it)."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"If you don't want to use a hook, you can use ",Object(a.b)("inlineCode",{parentName:"p"},"Notifications.getLastNotificationResponseAsync()")," instead.")),Object(a.b)("h4",{id:"returns-3"},"Returns"),Object(a.b)("p",null,"The hook may return one of these three types/values:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"undefined")," -- until we're sure of what to return"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"null")," -- if no notification response has been received yet"),Object(a.b)("li",{parentName:"ul"},"a ",Object(a.b)("a",{parentName:"li",href:"/versions/latest/sdk/notifications/#notificationresponse"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationResponse"))," object -- if a notification response was received")),Object(a.b)("h4",{id:"examples-2"},"Examples"),Object(a.b)("p",null,"Responding to a notification tap by opening a URL that could be put into the notification's ",Object(a.b)("inlineCode",{parentName:"p"},"data")," (opening the URL is your responsibility and is not a part of the ",Object(a.b)("inlineCode",{parentName:"p"},"expo-notifications")," API):"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"import * as Notifications from 'expo-notifications';\nimport { Linking } from 'react-native';\n\nexport default function App() {\n  const lastNotificationResponse = Notifications.useLastNotificationResponse();\n  React.useEffect(() => {\n    if (\n      lastNotificationResponse &&\n      lastNotificationResponse.notification.request.content.data.url &&\n      lastNotificationResponse.actionIdentifier === Notifications.DEFAULT_ACTION_IDENTIFIER\n    ) {\n      Linking.openURL(lastNotificationResponse.notification.request.content.data.url);\n    }\n  }, [lastNotificationResponse]);\n\n  return (\n    /*\n     * your app\n     */\n  );\n}\n")),Object(a.b)("h3",{id:"addnotificationreceivedlistenerlistener-event-notification--void-void"},Object(a.b)("inlineCode",{parentName:"h3"},"addNotificationReceivedListener(listener: (event: Notification) => void): void")),Object(a.b)("p",null,"Listeners registered by this method will be called whenever a notification is received while the app is running."),Object(a.b)("h4",{id:"arguments-3"},"Arguments"),Object(a.b)("p",null,"A single and required argument is a function accepting a notification (",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notification"},Object(a.b)("inlineCode",{parentName:"a"},"Notification")),") as an argument."),Object(a.b)("h4",{id:"returns-4"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#subscription"},Object(a.b)("inlineCode",{parentName:"a"},"Subscription"))," object representing the subscription of the provided listener."),Object(a.b)("h4",{id:"examples-3"},"Examples"),Object(a.b)("p",null,"Registering a notification listener using a React hook"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport * as Notifications from 'expo-notifications';\n\nexport default function App() {\n  React.useEffect(() => {\n    const subscription = Notifications.addNotificationReceivedListener(notification => {\n      console.log(notification);\n    });\n    return () => subscription.remove();\n  }, []);\n\n  return (\n    // Your app content\n  );\n}\n")),Object(a.b)("h3",{id:"addnotificationsdroppedlistenerlistener---void-void"},Object(a.b)("inlineCode",{parentName:"h3"},"addNotificationsDroppedListener(listener: () => void): void")),Object(a.b)("p",null,"Listeners registered by this method will be called whenever some notifications have been dropped by the server. Applicable only to Firebase Cloud Messaging which we use as notifications service on Android. It corresponds to ",Object(a.b)("inlineCode",{parentName:"p"},"onDeletedMessages()")," callback. ",Object(a.b)("a",{parentName:"p",href:"https://firebase.google.com/docs/cloud-messaging/android/receive#override-ondeletedmessages"},"More information can be found in Firebase docs"),"."),Object(a.b)("h4",{id:"arguments-4"},"Arguments"),Object(a.b)("p",null,"A single and required argument is a function\u2013callback."),Object(a.b)("h4",{id:"returns-5"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#subscription"},Object(a.b)("inlineCode",{parentName:"a"},"Subscription"))," object representing the subscription of the provided listener."),Object(a.b)("h3",{id:"addnotificationresponsereceivedlistenerlistener-event-notificationresponse--void-void"},Object(a.b)("inlineCode",{parentName:"h3"},"addNotificationResponseReceivedListener(listener: (event: NotificationResponse) => void): void")),Object(a.b)("p",null,"Listeners registered by this method will be called whenever a user interacts with a notification (eg. taps on it)."),Object(a.b)("h4",{id:"arguments-5"},"Arguments"),Object(a.b)("p",null,"A single and required argument is a function accepting notification response (",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationresponse"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationResponse")),") as an argument."),Object(a.b)("h4",{id:"returns-6"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#subscription"},Object(a.b)("inlineCode",{parentName:"a"},"Subscription"))," object representing the subscription of the provided listener."),Object(a.b)("h4",{id:"examples-4"},"Examples"),Object(a.b)("h4",{id:"registering-a-notification-listener-using-a-react-hook"},"Registering a notification listener using a React hook"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport { Linking } from 'react-native';\nimport * as Notifications from 'expo-notifications';\n\nexport default function Container() {\n  React.useEffect(() => {\n    const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n      const url = response.notification.request.content.data.url;\n      Linking.openURL(url);\n    });\n    return () => subscription.remove();\n  }, []);\n\n  return (\n    // Your app content\n  );\n}\n")),Object(a.b)("h4",{id:"handling-push-notifications-with-react-navigation"},"Handling push notifications with React Navigation"),Object(a.b)("p",null,"If you'd like to deep link to a specific screen in your app when you receive a push notification, you can configure React Navigation's ",Object(a.b)("a",{parentName:"p",href:"https://reactnavigation.org/docs/navigation-container#linking"},"linking")," prop to do that:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport { Linking } from 'react-native';\nimport * as Notifications from 'expo-notifications';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    <NavigationContainer\n      linking={{\n        config: {\n          // Configuration for linking\n        },\n        async getInitialURL() {\n          // First, you may want to do the default deep link handling\n          // Check if app was opened from a deep link\n          const url = await Linking.getInitialURL();\n\n          if (url != null) {\n            return url;\n          }\n\n          // Handle URL from expo push notifications\n          const response = await Notifications.getLastNotificationResponseAsync();\n          const url = response?.notification.request.content.data.url;\n\n          return url;\n        }\n        subscribe(listener) {\n          const onReceiveURL = ({ url }: { url: string }) => listener(url);\n\n          // Listen to incoming links from deep linking\n          Linking.addEventListener('url', onReceiveURL);\n\n          // Listen to expo push notifications\n          const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n            const url = response.notification.request.content.data.url;\n\n            // Any custom logic to see whether the URL needs to be handled\n            //...\n\n            // Let React Navigation handle the URL\n            listener(url);\n          });\n\n          return () => {\n            // Clean up the event listeners\n            Linking.removeEventListener('url', onReceiveURL);\n            subscription.remove();\n          };\n        },\n      }}>\n      {/* Your app content */}\n    </NavigationContainer>\n  );\n}\n")),Object(a.b)("p",null,"See more details on ",Object(a.b)("a",{parentName:"p",href:"https://reactnavigation.org/docs/deep-linking/#third-party-integrations"},"React Navigation documentation"),"."),Object(a.b)("h3",{id:"removenotificationsubscriptionsubscription-subscription-void"},Object(a.b)("inlineCode",{parentName:"h3"},"removeNotificationSubscription(subscription: Subscription): void")),Object(a.b)("p",null,"Removes a notification subscription returned by a ",Object(a.b)("inlineCode",{parentName:"p"},"addNotification*Listener")," call."),Object(a.b)("h4",{id:"arguments-6"},"Arguments"),Object(a.b)("p",null,"A single and required argument is a subscription returned by ",Object(a.b)("inlineCode",{parentName:"p"},"addNotification*Listener"),"."),Object(a.b)("h2",{id:"handling-incoming-notifications-when-the-app-is-in-foreground"},"Handling incoming notifications when the app is in foreground"),Object(a.b)("h3",{id:"setnotificationhandlerhandler-notificationhandler--null-void"},Object(a.b)("inlineCode",{parentName:"h3"},"setNotificationHandler(handler: NotificationHandler | null): void")),Object(a.b)("p",null,"When a notification is received while the app is running, using this function you can set a callback that will decide whether the notification should be shown to the user or not."),Object(a.b)("p",null,"When a notification is received, ",Object(a.b)("inlineCode",{parentName:"p"},"handleNotification")," is called with the incoming notification as an argument. The function should respond with a behavior object within 3 seconds, otherwise the notification will be discarded. If the notification is handled successfully, ",Object(a.b)("inlineCode",{parentName:"p"},"handleSuccess")," is called with the identifier of the notification, otherwise (or on timeout) ",Object(a.b)("inlineCode",{parentName:"p"},"handleError")," will be called."),Object(a.b)("p",null,"The default behavior when the handler is not set or does not respond in time is not to show the notification."),Object(a.b)("h4",{id:"arguments-7"},"Arguments"),Object(a.b)("p",null,"The function receives a single argument which should be either ",Object(a.b)("inlineCode",{parentName:"p"},"null")," (if you want to clear the handler) or an object of fields:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"handleNotification (",Object(a.b)("em",{parentName:"strong"},"(Notification) =",">"," Promise\\<NotificationBehavior",">"),")")," -- (required) a function accepting an incoming notification returning a ",Object(a.b)("inlineCode",{parentName:"li"},"Promise")," resolving to a behavior (",Object(a.b)("a",{parentName:"li",href:"/versions/latest/sdk/notifications/#notificationbehavior"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationBehavior")),") applicable to the notification"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"handleSuccess (",Object(a.b)("em",{parentName:"strong"},"(notificationId: string) =",">"," void"),")")," -- (optional) a function called whenever an incoming notification is handled successfully"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"handleError (",Object(a.b)("em",{parentName:"strong"},"(error: Error) =",">"," void"),")")," -- (optional) a function called whenever handling of an incoming notification fails")),Object(a.b)("h4",{id:"examples-5"},"Examples"),Object(a.b)("p",null,"Implementing a notification handler that always shows the notification when it is received"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"import * as Notifications from 'expo-notifications';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n")),Object(a.b)("h2",{id:"handling-incoming-notifications-when-the-app-is-not-in-the-foreground-not-supported-in-expo-go"},"Handling incoming notifications when the app is not in the foreground (not supported in Expo Go)"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Please note:")," In order to handle notifications while the app is backgrounded on iOS, you ",Object(a.b)("em",{parentName:"p"},"must")," add ",Object(a.b)("inlineCode",{parentName:"p"},"remote-notification")," to the ",Object(a.b)("inlineCode",{parentName:"p"},"ios.infoPlist.UIBackgroundModes")," key in your app.json, ",Object(a.b)("strong",{parentName:"p"},"and")," add ",Object(a.b)("inlineCode",{parentName:"p"},'"content-available": 1')," to your push notification payload. Under normal circumstances, the \u201ccontent-available\u201d flag should launch your app if it isn\u2019t running and wasn\u2019t killed by the user, ",Object(a.b)("em",{parentName:"p"},"however"),", this is ultimately decided by the OS so it might not always happen.")),Object(a.b)("h3",{id:"registertaskasynctaskname-string-void"},Object(a.b)("inlineCode",{parentName:"h3"},"registerTaskAsync(taskName: string): void")),Object(a.b)("p",null,"When a notification is received while the app is backgrounded, using this function you can set a callback that will be run in response to that notification. Under the hood, this function is run using ",Object(a.b)("inlineCode",{parentName:"p"},"expo-task-manager"),". You ",Object(a.b)("strong",{parentName:"p"},"must")," define the task ",Object(a.b)("em",{parentName:"p"},"first"),", with ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/task-manager/#taskmanagerdefinetasktaskname-task"},Object(a.b)("inlineCode",{parentName:"a"},"TaskManager.defineTask")),". Make sure you define it in the global scope."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"taskName")," argument is the string you passed to ",Object(a.b)("inlineCode",{parentName:"p"},"TaskManager.defineTask"),' as the "taskName". The callback function you define with ',Object(a.b)("inlineCode",{parentName:"p"},"TaskManager.defineTask")," will receive an object with the following fields:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"data"),": The remote payload delivered by either FCM (Android) or APNs (iOS). ",Object(a.b)("a",{parentName:"li",href:"/versions/latest/sdk/notifications/#pushnotificationtrigger"},"See here for details"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"error"),": The error (if any) that occurred during execution of the task."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"executionInfo"),": JSON object of additional info related to the task, including the ",Object(a.b)("inlineCode",{parentName:"li"},"taskName"),".")),Object(a.b)("h4",{id:"example"},"Example"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"import * as TaskManager from 'expo-task-manager';\nimport * as Notifications from 'expo-notifications';\n\nconst BACKGROUND_NOTIFICATION_TASK = 'BACKGROUND-NOTIFICATION-TASK';\n\nTaskManager.defineTask(BACKGROUND_NOTIFICATION_TASK, ({ data, error, executionInfo }) => {\n  console.log('Received a notification in the background!');\n  // Do something with the notification data\n});\n\nNotifications.registerTaskAsync(BACKGROUND_NOTIFICATION_TASK);\n")),Object(a.b)("h3",{id:"unregistertaskasynctaskname-string-void"},Object(a.b)("inlineCode",{parentName:"h3"},"unregisterTaskAsync(taskName: string): void")),Object(a.b)("p",null,"Used to unregister tasks registered with ",Object(a.b)("inlineCode",{parentName:"p"},"registerTaskAsync"),"."),Object(a.b)("h2",{id:"fetching-information-about-notifications-related-permissions"},"Fetching information about notifications-related permissions"),Object(a.b)("h3",{id:"getpermissionsasync-promisenotificationpermissionsstatus"},Object(a.b)("inlineCode",{parentName:"h3"},"getPermissionsAsync(): Promise<NotificationPermissionsStatus>")),Object(a.b)("p",null,"Calling this function checks current permissions settings related to notifications. It lets you verify whether the app is currently allowed to display alerts, play sounds, etc. There is no user-facing effect of calling this."),Object(a.b)("h4",{id:"returns-7"},"Returns"),Object(a.b)("p",null,"It returns a ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving to an object representing permission settings (",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationpermissionsstatus"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationPermissionsStatus")),"). On iOS, make sure you ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#interpreting-the-ios-permissions-response"},"properly interpret the permissions response"),"."),Object(a.b)("h4",{id:"examples-6"},"Examples"),Object(a.b)("p",null,"Check if the app is allowed to send any type of notifications (interrupting and non-interrupting\u2013provisional on iOS)"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"import * as Notifications from 'expo-notifications';\n\nexport async function allowsNotificationsAsync() {\n  const settings = await Notifications.getPermissionsAsync();\n  return (\n    settings.granted || settings.ios?.status === Notifications.IosAuthorizationStatus.PROVISIONAL\n  );\n}\n")),Object(a.b)("h3",{id:"requestpermissionsasyncrequest-notificationpermissionsrequest-promisenotificationpermissionsstatus"},Object(a.b)("inlineCode",{parentName:"h3"},"requestPermissionsAsync(request?: NotificationPermissionsRequest): Promise<NotificationPermissionsStatus>")),Object(a.b)("p",null,"Prompts the user for notification permissions according to request. ",Object(a.b)("strong",{parentName:"p"},"Request defaults to asking the user to allow displaying alerts, setting badge count and playing sounds"),"."),Object(a.b)("h4",{id:"arguments-8"},"Arguments"),Object(a.b)("p",null,"An optional object of conforming to the following interface:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"{\n  android?: {};\n  ios?: {\n    allowAlert?: boolean;\n    allowBadge?: boolean;\n    allowSound?: boolean;\n    allowDisplayInCarPlay?: boolean;\n    allowCriticalAlerts?: boolean;\n    provideAppNotificationSettings?: boolean;\n    allowProvisional?: boolean;\n    allowAnnouncements?: boolean;\n  }\n}\n")),Object(a.b)("p",null,"Each option corresponds to a different native platform authorization option (a list of iOS options is available ",Object(a.b)("a",{parentName:"p",href:"https://developer.apple.com/documentation/usernotifications/unauthorizationoptions"},"here"),", on Android all available permissions are granted by default and if a user declines any permission an app can't prompt the user to change)."),Object(a.b)("h4",{id:"returns-8"},"Returns"),Object(a.b)("p",null,"It returns a ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving to an object representing permission settings (",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationpermissionsstatus"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationPermissionsStatus")),"). On iOS, make sure you ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#interpreting-the-ios-permissions-response"},"properly interpret the permissions response"),"."),Object(a.b)("h4",{id:"examples-7"},"Examples"),Object(a.b)("p",null,"Prompts the user to allow the app to show alerts, play sounds, set badge count and let Siri read out messages through AirPods"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"import * as Notifications from 'expo-notifications';\n\nexport function requestPermissionsAsync() {\n  return await Notifications.requestPermissionsAsync({\n    ios: {\n      allowAlert: true,\n      allowBadge: true,\n      allowSound: true,\n      allowAnnouncements: true,\n    },\n  });\n}\n")),Object(a.b)("h3",{id:"interpreting-the-ios-permissions-response"},"Interpreting the iOS permissions response"),Object(a.b)("p",null,"On iOS, permissions for sending notifications are a little more granular than they are on Android. Because of this, you should rely on the ",Object(a.b)("inlineCode",{parentName:"p"},"NotificationPermissionsStatus"),"'s ",Object(a.b)("inlineCode",{parentName:"p"},"ios.status")," field, instead of the root ",Object(a.b)("inlineCode",{parentName:"p"},"status")," field. This value will be one of the following, accessible under ",Object(a.b)("inlineCode",{parentName:"p"},"Notifications.IosAuthorizationStatus"),":"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"NOT_DETERMINED"),": The user hasn't yet made a choice about whether the app is allowed to schedule notifications"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"DENIED"),": The app isn't authorized to schedule or receive notifications"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"AUTHORIZED"),": The app is authorized to schedule or receive notifications"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"PROVISIONAL"),": The application is provisionally authorized to post noninterruptive user notifications"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"EPHEMERAL"),": The app is authorized to schedule or receive notifications for a limited amount of time")),Object(a.b)("h2",{id:"managing-application-badge-icon"},"Managing application badge icon"),Object(a.b)("h3",{id:"getbadgecountasync-promisenumber"},Object(a.b)("inlineCode",{parentName:"h3"},"getBadgeCountAsync(): Promise<number>")),Object(a.b)("p",null,"Fetches the number currently set as the badge of the app icon on device's home screen. A ",Object(a.b)("inlineCode",{parentName:"p"},"0")," value means that the badge is not displayed."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Note:")," Not all Android launchers support application badges. If the launcher does not support icon badges, the method will always resolve to ",Object(a.b)("inlineCode",{parentName:"p"},"0"),".")),Object(a.b)("h4",{id:"returns-9"},"Returns"),Object(a.b)("p",null,"It returns a ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving to a number representing current badge of the app icon."),Object(a.b)("h3",{id:"setbadgecountasyncbadgecount-number-options-setbadgecountoptions-promiseboolean"},Object(a.b)("inlineCode",{parentName:"h3"},"setBadgeCountAsync(badgeCount: number, options?: SetBadgeCountOptions): Promise<boolean>")),Object(a.b)("p",null,"Sets the badge of the app's icon to the specified number. Setting to ",Object(a.b)("inlineCode",{parentName:"p"},"0")," clears the badge. On iOS, this method requires that you have requested the user's permission for ",Object(a.b)("inlineCode",{parentName:"p"},"allowBadge")," via ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#requestpermissionsasyncrequest-notificationpermissionsrequest-promisenotificationpermissionsstatus"},Object(a.b)("inlineCode",{parentName:"a"},"requestPermissionsAsync")),", otherwise it will automatically return ",Object(a.b)("inlineCode",{parentName:"p"},"false"),"."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Note:")," Not all Android launchers support application badges. If the launcher does not support icon badges, the method will resolve to ",Object(a.b)("inlineCode",{parentName:"p"},"false"),".")),Object(a.b)("h4",{id:"arguments-9"},"Arguments"),Object(a.b)("p",null,"The function accepts a number as the first argument. A value of ",Object(a.b)("inlineCode",{parentName:"p"},"0")," will clear the badge."),Object(a.b)("p",null,"As a second, optional argument you can pass in an object of options configuring behavior applied in Web environment. The object should be of format:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"{\n  web?: badgin.Options\n}\n")),Object(a.b)("p",null,"where the type ",Object(a.b)("inlineCode",{parentName:"p"},"badgin.Options")," is an object described ",Object(a.b)("a",{parentName:"p",href:"https://github.com/jaulz/badgin#options"},"in the ",Object(a.b)("inlineCode",{parentName:"a"},"badgin"),"'s documentation"),"."),Object(a.b)("h4",{id:"returns-10"},"Returns"),Object(a.b)("p",null,"It returns a ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving to a boolean representing whether setting of the badge succeeded."),Object(a.b)("h2",{id:"scheduling-notifications"},"Scheduling notifications"),Object(a.b)("h3",{id:"getallschedulednotificationsasync-promisenotification"},Object(a.b)("inlineCode",{parentName:"h3"},"getAllScheduledNotificationsAsync(): Promise<Notification[]>")),Object(a.b)("p",null,"Fetches information about all scheduled notifications."),Object(a.b)("h4",{id:"returns-11"},"Returns"),Object(a.b)("p",null,"It returns a ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving to an array of objects conforming to the ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notification"},Object(a.b)("inlineCode",{parentName:"a"},"Notification"))," interface."),Object(a.b)("h3",{id:"presentnotificationasynccontent-notificationcontentinput-identifier-string-promisestring"},Object(a.b)("inlineCode",{parentName:"h3"},"presentNotificationAsync(content: NotificationContentInput, identifier?: string): Promise<string>")),Object(a.b)("p",null,"Schedules a notification for immediate trigger."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Note:")," This method has been deprecated in favor of using an explicit ",Object(a.b)("inlineCode",{parentName:"p"},"NotificationHandler")," and the ",Object(a.b)("inlineCode",{parentName:"p"},"scheduleNotificationAsync")," method. More info may be found at ",Object(a.b)("a",{parentName:"p",href:"https://expo.fyi/presenting-notifications-deprecated"},"https://expo.fyi/presenting-notifications-deprecated"),".")),Object(a.b)("h4",{id:"arguments-10"},"Arguments"),Object(a.b)("p",null,"The only argument to this function is a ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationcontentinput"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationContentInput")),"."),Object(a.b)("h4",{id:"returns-12"},"Returns"),Object(a.b)("p",null,"It returns a ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving with the notification's identifier once the notification is successfully scheduled for immediate display."),Object(a.b)("h4",{id:"examples-8"},"Examples"),Object(a.b)("h4",{id:"presenting-the-notification-to-the-user-deprecated-way"},"Presenting the notification to the user (deprecated way)"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"import * as Notifications from 'expo-notifications';\n\nNotifications.presentNotificationAsync({\n  title: 'Look at that notification',\n  body: \"I'm so proud of myself!\",\n});\n")),Object(a.b)("h4",{id:"presenting-the-notification-to-the-user-recommended-way"},"Presenting the notification to the user (recommended way)"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"import * as Notifications from 'expo-notifications';\n\n// First, set the handler that will cause the notification\n// to show the alert\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\n// Second, call the method\n\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: 'Look at that notification',\n    body: \"I'm so proud of myself!\",\n  },\n  trigger: null,\n});\n")),Object(a.b)("h3",{id:"schedulenotificationasyncnotificationrequest-notificationrequestinput-promisestring"},Object(a.b)("inlineCode",{parentName:"h3"},"scheduleNotificationAsync(notificationRequest: NotificationRequestInput): Promise<string>")),Object(a.b)("p",null,"Schedules a notification to be triggered in the future."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Note:")," Please note that this does not mean that the notification will be presented when it is triggered. For the notification to be presented you have to set a notification handler with ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#setnotificationhandlerhandler-notificationhandler--null-void"},Object(a.b)("inlineCode",{parentName:"a"},"setNotificationHandler"))," that will return an appropriate notification behavior. For more information see the example below.")),Object(a.b)("h4",{id:"arguments-11"},"Arguments"),Object(a.b)("p",null,"The one and only argument to this method is a ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationrequestinput"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationRequestInput"))," describing the notification to be triggered."),Object(a.b)("h4",{id:"returns-13"},"Returns"),Object(a.b)("p",null,"It returns a ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving to a string --- a notification identifier you can later use to cancel the notification or to identify an incoming notification."),Object(a.b)("h4",{id:"examples-9"},"Examples"),Object(a.b)("h4",{id:"scheduling-the-notification-that-will-trigger-once-in-one-minute-from-now"},"Scheduling the notification that will trigger once, in one minute from now"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"import * as Notifications from 'expo-notifications';\n\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: \"Time's up!\",\n    body: 'Change sides!',\n  },\n  trigger: {\n    seconds: 60,\n  },\n});\n")),Object(a.b)("h4",{id:"scheduling-the-notification-that-will-trigger-repeatedly-every-20-minutes"},"Scheduling the notification that will trigger repeatedly, every 20 minutes"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"import * as Notifications from 'expo-notifications';\n\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: 'Remember to drink water!',\n  },\n  trigger: {\n    seconds: 60 * 20,\n    repeats: true,\n  },\n});\n")),Object(a.b)("h4",{id:"scheduling-the-notification-that-will-trigger-once-at-the-beginning-of-next-hour"},"Scheduling the notification that will trigger once, at the beginning of next hour"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"import * as Notifications from 'expo-notifications';\n\nconst trigger = new Date(Date.now() + 60 * 60 * 1000);\ntrigger.setMinutes(0);\ntrigger.setSeconds(0);\n\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: 'Happy new hour!',\n  },\n  trigger,\n});\n")),Object(a.b)("h3",{id:"cancelschedulednotificationasyncidentifier-string-promisevoid"},Object(a.b)("inlineCode",{parentName:"h3"},"cancelScheduledNotificationAsync(identifier: string): Promise<void>")),Object(a.b)("p",null,"Cancels a single scheduled notification. The scheduled notification of given ID will not trigger."),Object(a.b)("h4",{id:"arguments-12"},"Arguments"),Object(a.b)("p",null,"The notification identifier with which ",Object(a.b)("inlineCode",{parentName:"p"},"scheduleNotificationAsync")," resolved when the notification has been scheduled."),Object(a.b)("h4",{id:"returns-14"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving once the scheduled notification is successfully cancelled or if there is no scheduled notification for given identifier."),Object(a.b)("h4",{id:"examples-10"},"Examples"),Object(a.b)("h4",{id:"scheduling-and-then-canceling-the-notification"},"Scheduling and then canceling the notification"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"import * as Notifications from 'expo-notifications';\n\nasync function scheduleAndCancel() {\n  const identifier = await Notifications.scheduleNotificationAsync({\n    content: {\n      title: 'Hey!',\n    },\n    trigger: { seconds: 5, repeats: true },\n  });\n  await Notifications.cancelScheduledNotificationAsync(identifier);\n}\n")),Object(a.b)("h3",{id:"cancelallschedulednotificationsasync-promisevoid"},Object(a.b)("inlineCode",{parentName:"h3"},"cancelAllScheduledNotificationsAsync(): Promise<void>")),Object(a.b)("p",null,"Cancels all scheduled notifications."),Object(a.b)("h4",{id:"returns-15"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving once all the scheduled notifications are successfully cancelled or if there are no scheduled notifications."),Object(a.b)("h3",{id:"getnexttriggerdateasynctrigger-schedulablenotificationtriggerinput-promisenumber--null"},Object(a.b)("inlineCode",{parentName:"h3"},"getNextTriggerDateAsync(trigger: SchedulableNotificationTriggerInput): Promise<number | null>")),Object(a.b)("p",null,"Allows you to check what will be the next trigger date for given notification trigger input."),Object(a.b)("h4",{id:"arguments-13"},"Arguments"),Object(a.b)("p",null,"The schedulable notification trigger you would like to check next trigger date for (of type ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#schedulablenotificationtriggerinput"},Object(a.b)("inlineCode",{parentName:"a"},"SchedulableNotificationTriggerInput")),")."),Object(a.b)("h4",{id:"returns-16"},"Returns"),Object(a.b)("p",null,"If the return value is ",Object(a.b)("inlineCode",{parentName:"p"},"null"),", the notification won't be triggered. Otherwise, the return value is the Unix timestamp in milliseconds at which the notification will be triggered."),Object(a.b)("h4",{id:"examples-11"},"Examples"),Object(a.b)("h4",{id:"calculating-next-trigger-date-for-a-notification-trigger"},"Calculating next trigger date for a notification trigger"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"import * as Notifications from 'expo-notifications';\n\nasync function logNextTriggerDate() {\n  try {\n    const nextTriggerDate = await Notifications.getNextTriggerDateAsync({\n      hour: 9,\n      minute: 0,\n    });\n    console.log(nextTriggerDate === null ? 'No next trigger date' : new Date(nextTriggerDate));\n  } catch (e) {\n    console.warn(`Couldn't have calculated next trigger date: ${e}`);\n  }\n}\n")),Object(a.b)("h2",{id:"dismissing-notifications"},"Dismissing notifications"),Object(a.b)("h3",{id:"getpresentednotificationsasync-promisenotification"},Object(a.b)("inlineCode",{parentName:"h3"},"getPresentedNotificationsAsync(): Promise<Notification[]>")),Object(a.b)("p",null,"Fetches information about all notifications present in the notification tray (Notification Center)."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Note:")," This method is not supported on Android below 6.0 (API level 23) \u2013 on these devices it will resolve to an empty array.")),Object(a.b)("h4",{id:"returns-17"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving with a list of notifications (",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notification"},Object(a.b)("inlineCode",{parentName:"a"},"Notification")),") currently present in the notification tray (Notification Center)."),Object(a.b)("h3",{id:"dismissnotificationasyncidentifier-string-promisevoid"},Object(a.b)("inlineCode",{parentName:"h3"},"dismissNotificationAsync(identifier: string): Promise<void>")),Object(a.b)("p",null,"Removes notification displayed in the notification tray (Notification Center)."),Object(a.b)("h4",{id:"arguments-14"},"Arguments"),Object(a.b)("p",null,"The first and only argument to the function is the notification identifier, obtained either in ",Object(a.b)("inlineCode",{parentName:"p"},"setNotificationHandler")," or in the listener added with ",Object(a.b)("inlineCode",{parentName:"p"},"addNotificationReceivedListener"),"."),Object(a.b)("h4",{id:"returns-18"},"Returns"),Object(a.b)("p",null,"Resolves once the request to dismiss the notification is successfully dispatched to the notifications manager."),Object(a.b)("h3",{id:"dismissallnotificationsasync-promisevoid"},Object(a.b)("inlineCode",{parentName:"h3"},"dismissAllNotificationsAsync(): Promise<void>")),Object(a.b)("p",null,"Removes all application's notifications displayed in the notification tray (Notification Center)."),Object(a.b)("h4",{id:"returns-19"},"Returns"),Object(a.b)("p",null,"Resolves once the request to dismiss the notifications is successfully dispatched to the notifications manager."),Object(a.b)("h2",{id:"managing-notification-channels-android-specific"},"Managing notification channels (Android-specific)"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Starting in Android 8.0 (API level 26), all notifications must be assigned to a channel. For each channel, you can set the visual and auditory behavior that is applied to all notifications in that channel. Then, users can change these settings and decide which notification channels from your app should be intrusive or visible at all. ",Object(a.b)("a",{parentName:"p",href:"https://developer.android.com/training/notify-user/channels"},"(source: developer.android.com)"))),Object(a.b)("p",null,"If you do not specify a notification channel, ",Object(a.b)("inlineCode",{parentName:"p"},"expo-notifications")," will create a fallback channel for you, named ",Object(a.b)("em",{parentName:"p"},"Miscellaneous"),". We encourage you to always ensure appropriate channels with informative names are set up for the application and to always send notifications to these channels."),Object(a.b)("p",null,"Calling these methods is a no-op for platforms that do not support this feature (iOS, Web and Android below version 8.0 (26))."),Object(a.b)("h3",{id:"getnotificationchannelsasync-promisenotificationchannel"},Object(a.b)("inlineCode",{parentName:"h3"},"getNotificationChannelsAsync(): Promise<NotificationChannel[]>")),Object(a.b)("p",null,"Fetches information about all known notification channels."),Object(a.b)("h4",{id:"returns-20"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving to an array of channels. On platforms that do not support notification channels, it will always resolve to an empty array."),Object(a.b)("h3",{id:"getnotificationchannelasyncidentifier-string-promisenotificationchannel--null"},Object(a.b)("inlineCode",{parentName:"h3"},"getNotificationChannelAsync(identifier: string): Promise<NotificationChannel | null>")),Object(a.b)("p",null,"Fetches information about a single notification channel."),Object(a.b)("h4",{id:"arguments-15"},"Arguments"),Object(a.b)("p",null,"The only argument to this method is the channel's identifier."),Object(a.b)("h4",{id:"returns-21"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving to the channel object (of type ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationchannel"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationChannel")),") or to ",Object(a.b)("inlineCode",{parentName:"p"},"null")," if there was no channel found for this identifier. On platforms that do not support notification channels, it will always resolve to ",Object(a.b)("inlineCode",{parentName:"p"},"null"),"."),Object(a.b)("h3",{id:"setnotificationchannelasyncidentifier-string-channel-notificationchannelinput-promisenotificationchannel--null"},Object(a.b)("inlineCode",{parentName:"h3"},"setNotificationChannelAsync(identifier: string, channel: NotificationChannelInput): Promise<NotificationChannel | null>")),Object(a.b)("p",null,"Assigns the channel configuration to a channel of a specified name (creating it if need be). This method lets you assign given notification channel to a notification channel group."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Note:")," For some settings to be applied on all Android versions, it may be necessary to duplicate the configuration across both a single notification ",Object(a.b)("em",{parentName:"p"},"and")," it's respective notification channel. For example, for a notification to play a custom sound on Android versions ",Object(a.b)("strong",{parentName:"p"},"below")," 8.0, the custom notification sound has to be set on the notification (through the ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationcontentinput"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationContentInput")),"), and for the custom sound to play on Android versions ",Object(a.b)("strong",{parentName:"p"},"above")," 8.0, the relevant notification channel must have the custom sound configured (through the ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationchannelinput"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationChannelInput")),"). For more information, see ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#setting-custom-notification-sounds-on-android"},'"Setting custom notification sounds on Android"'),".")),Object(a.b)("h4",{id:"arguments-16"},"Arguments"),Object(a.b)("p",null,"First argument to the method is the channel identifier."),Object(a.b)("p",null,"Second argument is the channel's configuration of type ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationchannelinput"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationChannelInput"))),Object(a.b)("h4",{id:"returns-22"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving to the object (of type ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationchannel"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationChannel")),") describing the modified channel or to ",Object(a.b)("inlineCode",{parentName:"p"},"null")," if the platform does not support notification channels."),Object(a.b)("h3",{id:"deletenotificationchannelasyncidentifier-string-promisevoid"},Object(a.b)("inlineCode",{parentName:"h3"},"deleteNotificationChannelAsync(identifier: string): Promise<void>")),Object(a.b)("p",null,"Removes the notification channel."),Object(a.b)("h4",{id:"arguments-17"},"Arguments"),Object(a.b)("p",null,"First and only argument to the method is the channel identifier."),Object(a.b)("h4",{id:"returns-23"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving once the channel is removed (or if there was no channel for given identifier)."),Object(a.b)("h3",{id:"getnotificationchannelgroupsasync-promisenotificationchannelgroup"},Object(a.b)("inlineCode",{parentName:"h3"},"getNotificationChannelGroupsAsync(): Promise<NotificationChannelGroup[]>")),Object(a.b)("p",null,"Fetches information about all known notification channel groups."),Object(a.b)("h4",{id:"returns-24"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving to an array of channel groups. On platforms that do not support notification channel groups, it will always resolve to an empty array."),Object(a.b)("h3",{id:"getnotificationchannelgroupasyncidentifier-string-promisenotificationchannelgroup--null"},Object(a.b)("inlineCode",{parentName:"h3"},"getNotificationChannelGroupAsync(identifier: string): Promise<NotificationChannelGroup | null>")),Object(a.b)("p",null,"Fetches information about a single notification channel group."),Object(a.b)("h4",{id:"arguments-18"},"Arguments"),Object(a.b)("p",null,"The only argument to this method is the channel group's identifier."),Object(a.b)("h4",{id:"returns-25"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving to the channel group object (of type ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationchannelgroup"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationChannelGroup")),") or to ",Object(a.b)("inlineCode",{parentName:"p"},"null")," if there was no channel group found for this identifier. On platforms that do not support notification channels, it will always resolve to ",Object(a.b)("inlineCode",{parentName:"p"},"null"),"."),Object(a.b)("h3",{id:"setnotificationchannelgroupasyncidentifier-string-channel-notificationchannelgroupinput-promisenotificationchannelgroup--null"},Object(a.b)("inlineCode",{parentName:"h3"},"setNotificationChannelGroupAsync(identifier: string, channel: NotificationChannelGroupInput): Promise<NotificationChannelGroup | null>")),Object(a.b)("p",null,"Assigns the channel group configuration to a channel group of a specified name (creating it if need be)."),Object(a.b)("h4",{id:"arguments-19"},"Arguments"),Object(a.b)("p",null,"First argument to the method is the channel group identifier."),Object(a.b)("p",null,"Second argument is the channel group's configuration of type ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationchannelgroupinput"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationChannelGroupInput"))),Object(a.b)("h4",{id:"returns-26"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving to the object (of type ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationchannelgroup"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationChannelGroup")),") describing the modified channel group or to ",Object(a.b)("inlineCode",{parentName:"p"},"null")," if the platform does not support notification channels."),Object(a.b)("h3",{id:"deletenotificationchannelgroupasyncidentifier-string-promisevoid"},Object(a.b)("inlineCode",{parentName:"h3"},"deleteNotificationChannelGroupAsync(identifier: string): Promise<void>")),Object(a.b)("p",null,"Removes the notification channel group and all notification channels that belong to it."),Object(a.b)("h4",{id:"arguments-20"},"Arguments"),Object(a.b)("p",null,"First and only argument to the method is the channel group identifier."),Object(a.b)("h4",{id:"returns-27"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving once the channel group is removed (or if there was no channel group for given identifier)."),Object(a.b)("h2",{id:"managing-notification-categories-interactive-notifications"},"Managing notification categories (interactive notifications)"),Object(a.b)("p",null,"Notification categories allow you to create interactive push notifications, so that a user can respond directly to the incoming notification either via buttons or a text response. A category defines the set of actions a user can take, and then those actions are applied to a notification by specifying the ",Object(a.b)("inlineCode",{parentName:"p"},"categoryIdentifier")," in the ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationcontent"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationContent")),"."),Object(a.b)(l.a,{src:"/static/images/sdk/notifications/categories.png",style:{maxWidth:800},alt:"image of notification categories on iOS and Android",mdxType:"ImageSpotlight"}),Object(a.b)("p",null,"On iOS, notification categories also allow you to customize your notifications further. With each category, not only can you set interactive actions a user can take, but you can also configure things like the placeholder text to display when the user disables notification previews for your app."),Object(a.b)("p",null,"Calling one of the following methods is a no-op on Web."),Object(a.b)("h3",{id:"setnotificationcategoryasyncidentifier-string-actions-notificationaction-options-categoryoptions-promisenotificationcategory--null"},Object(a.b)("inlineCode",{parentName:"h3"},"setNotificationCategoryAsync(identifier: string, actions: NotificationAction[], options: CategoryOptions): Promise<NotificationCategory | null>")),Object(a.b)("h4",{id:"arguments-21"},"Arguments"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"identifier"),": A string to associate as the ID of this category. You will pass this string in as the ",Object(a.b)("inlineCode",{parentName:"li"},"categoryIdentifier")," in your ",Object(a.b)("a",{parentName:"li",href:"/versions/latest/sdk/notifications/#notificationcontent"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationContent"))," to associate a notification with this category. ",Object(a.b)("strong",{parentName:"li"},"Don't use the characters ",Object(a.b)("inlineCode",{parentName:"strong"},":")," or ",Object(a.b)("inlineCode",{parentName:"strong"},"-")," in your category identifier. If you do, categories might not work as expected.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"actions"),": An array of ",Object(a.b)("a",{parentName:"li",href:"/versions/latest/sdk/notifications/#notificationaction"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationAction"),"s"),", which describe the actions associated with this category. Each of these actions takes the shape:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"identifier"),": A unique string that identifies this action. If a user takes this action (i.e. selects this button in the system's Notification UI), your app will receive this ",Object(a.b)("inlineCode",{parentName:"li"},"actionIdentifier")," via the ",Object(a.b)("a",{parentName:"li",href:"/versions/latest/sdk/notifications/#addnotificationresponsereceivedlistenerlistener-event-notificationresponse--void-void"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationResponseReceivedListener")),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"buttonTitle"),": The title of the button triggering this action."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"textInput"),": ",Object(a.b)("strong",{parentName:"li"},"Optional")," object which, if provided, will result in a button that prompts the user for a text response.",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"submitButtonTitle"),": (",Object(a.b)("strong",{parentName:"li"},"iOS only"),") A string which will be used as the title for the button used for submitting the text response."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"placeholder"),": A string that serves as a placeholder until the user begins typing. Defaults to no placeholder string."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"options"),": ",Object(a.b)("strong",{parentName:"li"},"Optional")," object of additional configuration options.",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"opensAppToForeground"),": Boolean indicating whether triggering this action foregrounds the app (defaults to ",Object(a.b)("inlineCode",{parentName:"li"},"true"),"). If ",Object(a.b)("inlineCode",{parentName:"li"},"false")," and your app is killed (not just backgrounded), ",Object(a.b)("a",{parentName:"li",href:"/versions/latest/sdk/notifications/#addnotificationresponsereceivedlistenerlistener-event-notificationresponse--void-void"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationResponseReceived")," listeners")," will not be triggered when a user selects this action."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"isAuthenticationRequired"),": (",Object(a.b)("strong",{parentName:"li"},"iOS only"),") Boolean indicating whether triggering the action will require authentication from the user."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"isDestructive"),": (",Object(a.b)("strong",{parentName:"li"},"iOS only"),") Boolean indicating whether the button title will be highlighted a different color (usually red). This usually signifies a destructive action such as deleting data."))))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"options"),": An optional object of additional configuration options for your category (",Object(a.b)("strong",{parentName:"li"},"these are all iOS only"),"):",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"previewPlaceholder"),": Customizable placeholder for the notification preview text. This is shown if the user has disabled notification previews for the app. Defaults to the localized iOS system default placeholder (",Object(a.b)("inlineCode",{parentName:"li"},"Notification"),")."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"intentIdentifiers"),": Array of ",Object(a.b)("a",{parentName:"li",href:"https://developer.apple.com/documentation/sirikit/intent_class_identifiers"},"Intent Class Identifiers"),". When a notification is delivered, the presence of an intent identifier lets the system know that the notification is potentially related to the handling of a request made through Siri. Defaults to an empty array."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"categorySummaryFormat"),": A format string for the summary description used when the system groups the category\u2019s notifications."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"customDismissAction"),": A boolean indicating whether to send actions for handling when the notification is dismissed (the user must explicitly dismiss the notification interface- ignoring a notification or flicking away a notification banner does not trigger this action). Defaults to ",Object(a.b)("inlineCode",{parentName:"li"},"false"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"allowInCarPlay"),": A boolean indicating whether to allow CarPlay to display notifications of this type. ",Object(a.b)("strong",{parentName:"li"},"Apps must be approved for CarPlay to make use of this feature.")," Defaults to ",Object(a.b)("inlineCode",{parentName:"li"},"false"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"showTitle"),": A boolean indicating whether to show the notification's title, even if the user has disabled notification previews for the app. Defaults to ",Object(a.b)("inlineCode",{parentName:"li"},"false"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"showSubtitle"),": A boolean indicating whether to show the notification's subtitle, even if the user has disabled notification previews for the app. Defaults to ",Object(a.b)("inlineCode",{parentName:"li"},"false"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"allowAnnouncement"),": A boolean indicating whether to allow notifications to be automatically read by Siri when the user is using AirPods. Defaults to ",Object(a.b)("inlineCode",{parentName:"li"},"false"),".")))),Object(a.b)("h4",{id:"returns-28"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving to the category you just created."),Object(a.b)("h3",{id:"getnotificationcategoriesasync-promisenotificationcategory"},Object(a.b)("inlineCode",{parentName:"h3"},"getNotificationCategoriesAsync(): Promise<NotificationCategory[]>")),Object(a.b)("p",null,"Fetches information about all known notification categories."),Object(a.b)("h4",{id:"returns-29"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving to an array of ",Object(a.b)("inlineCode",{parentName:"p"},"NotificationCategory"),"s. On platforms that do not support notification channels, it will always resolve to an empty array."),Object(a.b)("h3",{id:"deletenotificationcategoryasyncidentifier-string-promiseboolean"},Object(a.b)("inlineCode",{parentName:"h3"},"deleteNotificationCategoryAsync(identifier: string): Promise<boolean>")),Object(a.b)("p",null,"Deletes the category associated with the provided identifier."),Object(a.b)("h4",{id:"arguments-22"},"Arguments"),Object(a.b)("p",null,"Identifier initially provided to ",Object(a.b)("inlineCode",{parentName:"p"},"setNotificationCategoryAsync")," when creating the category."),Object(a.b)("h4",{id:"returns-30"},"Returns"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," resolving to ",Object(a.b)("inlineCode",{parentName:"p"},"true")," if the category was successfully deleted, or ",Object(a.b)("inlineCode",{parentName:"p"},"false")," if it was not. An example of when this method would return ",Object(a.b)("inlineCode",{parentName:"p"},"false")," is if you try to delete a category that doesn't exist."),Object(a.b)("h2",{id:"types"},"Types"),Object(a.b)("h4",{id:"devicepushtoken"},Object(a.b)("inlineCode",{parentName:"h4"},"DevicePushToken")),Object(a.b)("p",null,"In simple terms, an object of ",Object(a.b)("inlineCode",{parentName:"p"},"type: Platform.OS")," and ",Object(a.b)("inlineCode",{parentName:"p"},"data: any"),". The ",Object(a.b)("inlineCode",{parentName:"p"},"data")," type depends on the environment -- on a native device it will be a string, which you can then use to send notifications via Firebase Cloud Messaging (Android) or APNS (iOS); on web it will be a registration object (VAPID)."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface NativeDevicePushToken {\n  type: 'ios' | 'android';\n  data: string;\n}\n\nexport interface WebDevicePushToken {\n  type: 'web';\n  data: {\n    endpoint: string;\n    keys: {\n      p256dh: string;\n      auth: string;\n    };\n  };\n}\n\nexport type DevicePushToken = NativeDevicePushToken | WebDevicePushToken;\n")),Object(a.b)("h4",{id:"pushtokenlistener"},Object(a.b)("inlineCode",{parentName:"h4"},"PushTokenListener")),Object(a.b)("p",null,"A function accepting a device push token (",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#devicepushtoken"},Object(a.b)("inlineCode",{parentName:"a"},"DevicePushToken")),") as an argument."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Note:")," You should not call ",Object(a.b)("inlineCode",{parentName:"p"},"getDevicePushTokenAsync")," inside this function, as it triggers the listener and may lead to an infinite loop.")),Object(a.b)("h4",{id:"expopushtoken"},Object(a.b)("inlineCode",{parentName:"h4"},"ExpoPushToken")),Object(a.b)("p",null,"Borrowing from ",Object(a.b)("inlineCode",{parentName:"p"},"DevicePushToken")," a little bit, it's an object of ",Object(a.b)("inlineCode",{parentName:"p"},"type: 'expo'")," and ",Object(a.b)("inlineCode",{parentName:"p"},"data: string"),". You can use the ",Object(a.b)("inlineCode",{parentName:"p"},"data")," value to send notifications via Expo Notifications service."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface ExpoPushToken {\n  type: 'expo';\n  data: string;\n}\n")),Object(a.b)("h4",{id:"subscription"},Object(a.b)("inlineCode",{parentName:"h4"},"Subscription")),Object(a.b)("p",null,"A common-in-React-Native type to abstract an active subscription. Call ",Object(a.b)("inlineCode",{parentName:"p"},".remove()")," to remove the subscription. You can then discard the object."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export type Subscription = {\n  remove: () => void;\n};\n")),Object(a.b)("h4",{id:"notification"},Object(a.b)("inlineCode",{parentName:"h4"},"Notification")),Object(a.b)("p",null,"An object representing a single notification that has been triggered by some request (",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notificationrequest"},Object(a.b)("inlineCode",{parentName:"a"},"NotificationRequest")),") at some point in time."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface Notification {\n  date: number;\n  request: NotificationRequest;\n}\n")),Object(a.b)("h4",{id:"notificationrequest"},Object(a.b)("inlineCode",{parentName:"h4"},"NotificationRequest")),Object(a.b)("p",null,"An object representing a request to present a notification. It has content \u2014 how it's being represented \u2014 and a trigger \u2014 what triggers the notification. Many notifications (",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#notification"},Object(a.b)("inlineCode",{parentName:"a"},"Notification")),") may be triggered with the same request (eg. a repeating notification)."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface NotificationRequest {\n  identifier: string;\n  content: NotificationContent;\n  trigger: NotificationTrigger;\n}\n")),Object(a.b)("h4",{id:"notificationcontent"},Object(a.b)("inlineCode",{parentName:"h4"},"NotificationContent")),Object(a.b)("p",null,"An object representing notification's content."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export type NotificationContent = {\n  // Notification title - the bold text displayed above the rest of the content\n  title: string | null;\n  // On iOS - subtitle - the bold text displayed between title and the rest of the content\n  // On Android - subText - the display depends on the platform\n  subtitle: string | null;\n  // Notification body - the main content of the notification\n  body: string | null;\n  // Data associated with the notification, not displayed\n  data: { [key: string]: unknown };\n  // Application badge number associated with the notification\n  badge: number | null;\n  sound: 'default' | 'defaultCritical' | 'custom' | null;\n  categoryIdentifier: string | null;\n} & (\n  | {\n      // iOS-specific additions\n      // See https://developer.apple.com/documentation/usernotifications/unnotificationcontent?language=objc\n      // for more information on specific fields.\n      launchImageName: string | null;\n      attachments: {\n        identifier: string | null;\n        url: string | null;\n        type: string | null;\n      }[];\n      summaryArgument?: string | null;\n      summaryArgumentCount?: number;\n      threadIdentifier: string | null;\n      targetContentIdentifier?: string;\n    }\n  | {\n      // Android-specific additions\n      // See https://developer.android.com/reference/android/app/Notification.html#fields\n      // for more information on specific fields.\n      priority?: AndroidNotificationPriority;\n      vibrationPattern?: number[];\n      // Format: '#AARRGGBB'\n      color?: string;\n    }\n);\n")),Object(a.b)("h4",{id:"notificationcontentinput"},Object(a.b)("inlineCode",{parentName:"h4"},"NotificationContentInput")),Object(a.b)("p",null,"An object representing notification content that you pass in to ",Object(a.b)("inlineCode",{parentName:"p"},"presentNotificationAsync")," or as a part of ",Object(a.b)("inlineCode",{parentName:"p"},"NotificationRequestInput"),"."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface NotificationContentInput {\n  // Fields corresponding to NotificationContent\n  title?: string;\n  subtitle?: string;\n  body?: string;\n  data?: { [key: string]: unknown };\n  badge?: number;\n  sound?: boolean | string;\n\n  // Android-specific fields\n  // See https://developer.android.com/reference/android/app/Notification.html#fields\n  // for more information on specific fields.\n  vibrate?: boolean | number[];\n  priority?: AndroidNotificationPriority;\n  // Format: '#AARRGGBB', '#RRGGBB' or one of the named colors,\n  // see https://developer.android.com/reference/kotlin/android/graphics/Color?hl=en\n  color?: string;\n  // If set to false, the notification will not be automatically dismissed when clicked.\n  // The setting used when the value is not provided or is invalid is true (the notification\n  // will be dismissed automatically). Corresponds directly to Android's `setAutoCancel`\n  // behavior. In Firebase terms this property of a notification is called `sticky`.\n  // See:\n  // - https://developer.android.com/reference/android/app/Notification.Builder#setAutoCancel(boolean),\n  // - https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#AndroidNotification.FIELDS.sticky\n  autoDismiss?: boolean;\n  // If set to true, the notification cannot be dismissed by swipe. This setting defaults\n  // to false if not provided or is invalid. Corresponds directly do Android's `isOngoing` behavior.\n  // See: https://developer.android.com/reference/android/app/Notification.Builder#setOngoing(boolean)\n  sticky?: boolean;\n\n  // iOS-specific fields\n  // See https://developer.apple.com/documentation/usernotifications/unmutablenotificationcontent?language=objc\n  // for more information on specific fields.\n  launchImageName?: string;\n  attachments?: {\n    url: string;\n    identifier?: string;\n\n    typeHint?: string;\n    hideThumbnail?: boolean;\n    thumbnailClipArea?: { x: number; y: number; width: number; height: number };\n    thumbnailTime?: number;\n  }[];\n}\n")),Object(a.b)("h4",{id:"notificationrequestinput"},Object(a.b)("inlineCode",{parentName:"h4"},"NotificationRequestInput")),Object(a.b)("p",null,"An object representing a notification request you can pass into ",Object(a.b)("inlineCode",{parentName:"p"},"scheduleNotificationAsync"),"."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface NotificationRequestInput {\n  identifier?: string;\n  content: NotificationContentInput;\n  trigger: NotificationTriggerInput;\n}\n")),Object(a.b)("h4",{id:"androidnotificationpriority"},Object(a.b)("inlineCode",{parentName:"h4"},"AndroidNotificationPriority")),Object(a.b)("p",null,"An enum corresponding to values appropriate for Android's ",Object(a.b)("a",{parentName:"p",href:"https://developer.android.com/reference/android/app/Notification#priority"},Object(a.b)("inlineCode",{parentName:"a"},"Notification#priority"))," field."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export enum AndroidNotificationPriority {\n  MIN = 'min',\n  LOW = 'low',\n  DEFAULT = 'default',\n  HIGH = 'high',\n  MAX = 'max',\n}\n")),Object(a.b)("h4",{id:"notificationtrigger"},Object(a.b)("inlineCode",{parentName:"h4"},"NotificationTrigger")),Object(a.b)("p",null,"A union type containing different triggers which may cause the notification to be delivered to the application."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export type NotificationTrigger =\n  | PushNotificationTrigger\n  | CalendarNotificationTrigger\n  | LocationNotificationTrigger\n  | TimeIntervalNotificationTrigger\n  | DailyNotificationTrigger\n  | UnknownNotificationTrigger;\n")),Object(a.b)("h4",{id:"pushnotificationtrigger"},Object(a.b)("inlineCode",{parentName:"h4"},"PushNotificationTrigger")),Object(a.b)("p",null,"An object representing a notification delivered by a push notification system."),Object(a.b)("p",null,"On Android under ",Object(a.b)("inlineCode",{parentName:"p"},"remoteMessage")," field a JS version of the Firebase ",Object(a.b)("inlineCode",{parentName:"p"},"RemoteMessage")," may be accessed. On iOS under ",Object(a.b)("inlineCode",{parentName:"p"},"payload")," you may find full contents of ",Object(a.b)("a",{parentName:"p",href:"https://developer.apple.com/documentation/usernotifications/unnotificationcontent?language=objc"},Object(a.b)("inlineCode",{parentName:"a"},"UNNotificationContent"),"'s")," ",Object(a.b)("a",{parentName:"p",href:"https://developer.apple.com/documentation/usernotifications/unnotificationcontent/1649869-userinfo?language=objc"},Object(a.b)("inlineCode",{parentName:"a"},"userInfo")),", i.e. ",Object(a.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CreatingtheNotificationPayload.html"},"remote notification payload")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export type PushNotificationTrigger = { type: 'push' } & (\n  | { payload: Record<string, unknown> } // iOS\n  | { remoteMessage: FirebaseRemoteMessage } // Android\n  | {}\n);\n")),Object(a.b)("h4",{id:"firebaseremotemessage"},Object(a.b)("inlineCode",{parentName:"h4"},"FirebaseRemoteMessage")),Object(a.b)("p",null,"A Firebase ",Object(a.b)("inlineCode",{parentName:"p"},"RemoteMessage")," that caused the notification to be delivered to the app."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface FirebaseRemoteMessage {\n  collapseKey: string | null;\n  data: { [key: string]: string };\n  from: string | null;\n  messageId: string | null;\n  messageType: string | null;\n  originalPriority: number;\n  priority: number;\n  sentTime: number;\n  to: string | null;\n  ttl: number;\n  notification: null | {\n    body: string | null;\n    bodyLocalizationArgs: string[] | null;\n    bodyLocalizationKey: string | null;\n    channelId: string | null;\n    clickAction: string | null;\n    color: string | null;\n    usesDefaultLightSettings: boolean;\n    usesDefaultSound: boolean;\n    usesDefaultVibrateSettings: boolean;\n    eventTime: number | null;\n    icon: string | null;\n    imageUrl: string | null;\n    lightSettings: number[] | null;\n    link: string | null;\n    localOnly: boolean;\n    notificationCount: number | null;\n    notificationPriority: number | null;\n    sound: string | null;\n    sticky: boolean;\n    tag: string | null;\n    ticker: string | null;\n    title: string | null;\n    titleLocalizationArgs: string[] | null;\n    titleLocalizationKey: string | null;\n    vibrateTimings: number[] | null;\n    visibility: number | null;\n  };\n}\n")),Object(a.b)("h4",{id:"timeintervalnotificationtrigger"},Object(a.b)("inlineCode",{parentName:"h4"},"TimeIntervalNotificationTrigger")),Object(a.b)("p",null,"A trigger related to an elapsed time interval. May be repeating (see ",Object(a.b)("inlineCode",{parentName:"p"},"repeats")," field)."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface TimeIntervalNotificationTrigger {\n  type: 'timeInterval';\n  repeats: boolean;\n  seconds: number;\n}\n")),Object(a.b)("h4",{id:"dailynotificationtrigger"},Object(a.b)("inlineCode",{parentName:"h4"},"DailyNotificationTrigger")),Object(a.b)("p",null,"A trigger related to a daily notification. This is an Android-only type, the same functionality will be achieved on iOS with a ",Object(a.b)("inlineCode",{parentName:"p"},"CalendarNotificationTrigger"),"."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface DailyNotificationTrigger {\n  type: 'daily';\n  hour: number;\n  minute: number;\n}\n")),Object(a.b)("h4",{id:"weeklynotificationtrigger"},Object(a.b)("inlineCode",{parentName:"h4"},"WeeklyNotificationTrigger")),Object(a.b)("p",null,"A trigger related to a weekly notification. This is an Android-only type, the same functionality will be achieved on iOS with a ",Object(a.b)("inlineCode",{parentName:"p"},"CalendarNotificationTrigger"),"."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface WeeklyNotificationTrigger {\n  type: 'weekly';\n  weekday: number;\n  hour: number;\n  minute: number;\n}\n")),Object(a.b)("h4",{id:"yearlynotificationtrigger"},Object(a.b)("inlineCode",{parentName:"h4"},"YearlyNotificationTrigger")),Object(a.b)("p",null,"A trigger related to a yearly notification. This is an Android-only type, the same functionality will be achieved on iOS with a ",Object(a.b)("inlineCode",{parentName:"p"},"CalendarNotificationTrigger"),"."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface YearlyNotificationTrigger {\n  type: 'yearly';\n  day: number;\n  month: number;\n  hour: number;\n  minute: number;\n}\n")),Object(a.b)("h4",{id:"calendarnotificationtrigger"},Object(a.b)("inlineCode",{parentName:"h4"},"CalendarNotificationTrigger")),Object(a.b)("p",null,"A trigger related to a ",Object(a.b)("a",{parentName:"p",href:"https://developer.apple.com/documentation/usernotifications/uncalendarnotificationtrigger?language=objc"},Object(a.b)("inlineCode",{parentName:"a"},"UNCalendarNotificationTrigger")),", available only on iOS."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface CalendarNotificationTrigger {\n  type: 'calendar';\n  repeats: boolean;\n  dateComponents: {\n    era?: number;\n    year?: number;\n    month?: number;\n    day?: number;\n    hour?: number;\n    minute?: number;\n    second?: number;\n    weekday?: number;\n    weekdayOrdinal?: number;\n    quarter?: number;\n    weekOfMonth?: number;\n    weekOfYear?: number;\n    yearForWeekOfYear?: number;\n    nanosecond?: number;\n    isLeapMonth: boolean;\n    timeZone?: string;\n    calendar?: string;\n  };\n}\n")),Object(a.b)("h4",{id:"locationnotificationtrigger"},Object(a.b)("inlineCode",{parentName:"h4"},"LocationNotificationTrigger")),Object(a.b)("p",null,"A trigger related to a ",Object(a.b)("a",{parentName:"p",href:"https://developer.apple.com/documentation/usernotifications/unlocationnotificationtrigger?language=objc"},Object(a.b)("inlineCode",{parentName:"a"},"UNLocationNotificationTrigger")),", available only on iOS."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface LocationNotificationTrigger {\n  type: 'location';\n  repeats: boolean;\n  region: CircularRegion | BeaconRegion;\n}\n\ninterface Region {\n  type: string;\n  identifier: string;\n  notifyOnEntry: boolean;\n  notifyOnExit: boolean;\n}\n\nexport interface CircularRegion extends Region {\n  type: 'circular';\n  radius: number;\n  center: {\n    latitude: number;\n    longitude: number;\n  };\n}\n\nexport interface BeaconRegion extends Region {\n  type: 'beacon';\n  notifyEntryStateOnDisplay: boolean;\n  major: number | null;\n  minor: number | null;\n  uuid?: string;\n  beaconIdentityConstraint?: {\n    uuid: string;\n    major: number | null;\n    minor: number | null;\n  };\n}\n")),Object(a.b)("h4",{id:"unknownnotificationtrigger"},Object(a.b)("inlineCode",{parentName:"h4"},"UnknownNotificationTrigger")),Object(a.b)("p",null,"Represents a notification trigger that is unknown to ",Object(a.b)("inlineCode",{parentName:"p"},"expo-notifications")," and that it didn't know how to serialize for JS."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface UnknownNotificationTrigger {\n  type: 'unknown';\n}\n")),Object(a.b)("h4",{id:"notificationtriggerinput"},Object(a.b)("inlineCode",{parentName:"h4"},"NotificationTriggerInput")),Object(a.b)("p",null,"A type representing possible triggers with which you can schedule notifications. A ",Object(a.b)("inlineCode",{parentName:"p"},"null")," trigger means that the notification should be scheduled for delivery immediately."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export type NotificationTriggerInput =\n  | null\n  | ChannelAwareTriggerInput\n  | SchedulableNotificationTriggerInput;\n")),Object(a.b)("h4",{id:"schedulablenotificationtriggerinput"},Object(a.b)("inlineCode",{parentName:"h4"},"SchedulableNotificationTriggerInput")),Object(a.b)("p",null,"A type representing time-based, schedulable triggers. For these triggers you can check the next trigger date with ",Object(a.b)("a",{parentName:"p",href:"/versions/latest/sdk/notifications/#getnexttriggerdateasynctrigger-schedulablenotificationtriggerinput-promisenumber--null"},Object(a.b)("inlineCode",{parentName:"a"},"getNextTriggerDateAsync")),"."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export type SchedulableNotificationTriggerInput =\n  | DateTriggerInput\n  | TimeIntervalTriggerInput\n  | DailyTriggerInput\n  | WeeklyTriggerInput\n  | YearlyTriggerInput\n  | CalendarTriggerInput;\n")),Object(a.b)("h4",{id:"channelawaretriggerinput"},Object(a.b)("inlineCode",{parentName:"h4"},"ChannelAwareTriggerInput")),Object(a.b)("p",null,"A trigger that will cause the notification to be delivered immediately."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export type ChannelAwareTriggerInput = {\n  channelId: string;\n};\n")),Object(a.b)("h4",{id:"datetriggerinput"},Object(a.b)("inlineCode",{parentName:"h4"},"DateTriggerInput")),Object(a.b)("p",null,"A trigger that will cause the notification to be delivered once at the specified ",Object(a.b)("inlineCode",{parentName:"p"},"Date"),". If you pass in a ",Object(a.b)("inlineCode",{parentName:"p"},"number")," it will be interpreted as a UNIX timestamp."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export type DateTriggerInput = Date | number | { channelId?: string; date: Date | number };\n")),Object(a.b)("h4",{id:"timeintervaltriggerinput"},Object(a.b)("inlineCode",{parentName:"h4"},"TimeIntervalTriggerInput")),Object(a.b)("p",null,"A trigger that will cause the notification to be delivered once or many times (depends on the ",Object(a.b)("inlineCode",{parentName:"p"},"repeats")," field) after ",Object(a.b)("inlineCode",{parentName:"p"},"seconds")," time elapse."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface TimeIntervalTriggerInput {\n  channelId?: string;\n  repeats?: boolean;\n  seconds: number;\n}\n")),Object(a.b)("h4",{id:"dailytriggerinput"},Object(a.b)("inlineCode",{parentName:"h4"},"DailyTriggerInput")),Object(a.b)("p",null,"A trigger that will cause the notification to be delivered once per day."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface DailyTriggerInput {\n  channelId?: string;\n  hour: number;\n  minute: number;\n  repeats: true;\n}\n")),Object(a.b)("h4",{id:"weeklytriggerinput"},Object(a.b)("inlineCode",{parentName:"h4"},"WeeklyTriggerInput")),Object(a.b)("p",null,"A trigger that will cause the notification to be delivered once every week."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Note:")," Weekdays are specified with a number from 1 through 7, with 1 indicating Sunday.")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface WeeklyTriggerInput {\n  channelId?: string;\n  weekday: number;\n  hour: number;\n  minute: number;\n  repeats: true;\n}\n")),Object(a.b)("h4",{id:"yearlytriggerinput"},Object(a.b)("inlineCode",{parentName:"h4"},"YearlyTriggerInput")),Object(a.b)("p",null,"A trigger that will cause the notification to be delivered once every year."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Note:")," all properties are specified in JavaScript Date's ranges.")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface YearlyTriggerInput {\n  channelId?: string;\n  day: number;\n  month: number;\n  hour: number;\n  minute: number;\n  repeats: true;\n}\n")),Object(a.b)("h4",{id:"calendartriggerinput"},Object(a.b)("inlineCode",{parentName:"h4"},"CalendarTriggerInput")),Object(a.b)("p",null,"A trigger that will cause the notification to be delivered once or many times when the date components match the specified values. Corresponds to native ",Object(a.b)("a",{parentName:"p",href:"https://developer.apple.com/documentation/usernotifications/uncalendarnotificationtrigger?language=objc"},Object(a.b)("inlineCode",{parentName:"a"},"UNCalendarNotificationTrigger")),"."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Note:")," This type of trigger is only available on iOS.")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface CalendarTriggerInput {\n  channelId?: string;\n  repeats?: boolean;\n  timezone?: string;\n\n  year?: number;\n  month?: number;\n  weekday?: number;\n  weekOfMonth?: number;\n  weekOfYear?: number;\n  weekdayOrdinal?: number;\n  day?: number;\n\n  hour?: number;\n  minute?: number;\n  second?: number;\n}\n")),Object(a.b)("h4",{id:"notificationresponse"},Object(a.b)("inlineCode",{parentName:"h4"},"NotificationResponse")),Object(a.b)("p",null,"An object representing user's interaction with the notification."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Note:")," If the user taps on a notification ",Object(a.b)("inlineCode",{parentName:"p"},"actionIdentifier")," will be equal to ",Object(a.b)("inlineCode",{parentName:"p"},"Notifications.DEFAULT_ACTION_IDENTIFIER"),".")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface NotificationResponse {\n  notification: Notification;\n  actionIdentifier: string;\n  userText?: string;\n}\n")),Object(a.b)("h4",{id:"notificationbehavior"},Object(a.b)("inlineCode",{parentName:"h4"},"NotificationBehavior")),Object(a.b)("p",null,"An object representing behavior that should be applied to the incoming notification."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface NotificationBehavior {\n  shouldShowAlert: boolean;\n  shouldPlaySound: boolean;\n  shouldSetBadge: boolean;\n  priority?: AndroidNotificationPriority;\n}\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"On Android, setting ",Object(a.b)("inlineCode",{parentName:"p"},"shouldPlaySound: false")," will result in the drop-down notification alert ",Object(a.b)("strong",{parentName:"p"},"not")," showing, no matter what the priority is. This setting will also override any channel-specific sounds you may have configured.")),Object(a.b)("h4",{id:"notificationchannel"},Object(a.b)("inlineCode",{parentName:"h4"},"NotificationChannel")),Object(a.b)("p",null,"An object representing a notification channel (feature available only on Android)."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export enum AndroidNotificationVisibility {\n  UNKNOWN,\n  PUBLIC,\n  PRIVATE,\n  SECRET,\n}\n\nexport enum AndroidAudioContentType {\n  UNKNOWN,\n  SPEECH,\n  MUSIC,\n  MOVIE,\n  SONIFICATION,\n}\n\nexport enum AndroidImportance {\n  UNKNOWN,\n  UNSPECIFIED,\n  NONE,\n  MIN,\n  LOW,\n  DEFAULT,\n  HIGH,\n  MAX,\n}\n\nexport enum AndroidAudioUsage {\n  UNKNOWN,\n  MEDIA,\n  VOICE_COMMUNICATION,\n  VOICE_COMMUNICATION_SIGNALLING,\n  ALARM,\n  NOTIFICATION,\n  NOTIFICATION_RINGTONE,\n  NOTIFICATION_COMMUNICATION_REQUEST,\n  NOTIFICATION_COMMUNICATION_INSTANT,\n  NOTIFICATION_COMMUNICATION_DELAYED,\n  NOTIFICATION_EVENT,\n  ASSISTANCE_ACCESSIBILITY,\n  ASSISTANCE_NAVIGATION_GUIDANCE,\n  ASSISTANCE_SONIFICATION,\n  GAME,\n}\n\nexport interface AudioAttributes {\n  usage: AndroidAudioUsage;\n  contentType: AndroidAudioContentType;\n  flags: {\n    enforceAudibility: boolean;\n    requestHardwareAudioVideoSynchronization: boolean;\n  };\n}\n\nexport interface NotificationChannel {\n  id: string;\n  name: string | null;\n  importance: AndroidImportance;\n  bypassDnd: boolean;\n  description: string | null;\n  groupId?: string | null;\n  lightColor: string;\n  lockscreenVisibility: AndroidNotificationVisibility;\n  showBadge: boolean;\n  sound: 'default' | 'custom' | null;\n  audioAttributes: AudioAttributes;\n  vibrationPattern: number[] | null;\n  enableLights: boolean;\n  enableVibrate: boolean;\n}\n")),Object(a.b)("h4",{id:"notificationchannelinput"},Object(a.b)("inlineCode",{parentName:"h4"},"NotificationChannelInput")),Object(a.b)("p",null,"An object representing a notification channel to be set."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface NotificationChannelInput {\n  name: string | null;\n  importance: AndroidImportance;\n  // Optional attributes\n  bypassDnd?: boolean;\n  description?: string | null;\n  groupId?: string | null;\n  lightColor?: string;\n  lockscreenVisibility?: AndroidNotificationVisibility;\n  showBadge?: boolean;\n  sound?: string | null;\n  audioAttributes?: Partial<AudioAttributes>;\n  vibrationPattern?: number[] | null;\n  enableLights?: boolean;\n  enableVibrate?: boolean;\n}\n")),Object(a.b)("h4",{id:"notificationchannelgroup"},Object(a.b)("inlineCode",{parentName:"h4"},"NotificationChannelGroup")),Object(a.b)("p",null,"An object representing a notification channel group (feature available only on Android)."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface NotificationChannelGroup {\n  id: string;\n  name: string | null;\n  description?: string | null;\n  isBlocked?: boolean;\n  channels: NotificationChannel[];\n}\n")),Object(a.b)("h4",{id:"notificationchannelgroupinput"},Object(a.b)("inlineCode",{parentName:"h4"},"NotificationChannelGroupInput")),Object(a.b)("p",null,"An object representing a notification channel group to be set."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface NotificationChannelGroupInput {\n  name: string | null;\n  description?: string | null;\n}\n")),Object(a.b)("h4",{id:"notificationcategory"},Object(a.b)("inlineCode",{parentName:"h4"},"NotificationCategory")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface NotificationCategory {\n  identifier: string;\n  actions: NotificationAction[];\n  options: {\n    // These options are ALL iOS-only\n    previewPlaceholder?: string;\n    intentIdentifiers?: string[];\n    categorySummaryFormat?: string;\n    customDismissAction?: boolean;\n    allowInCarPlay?: boolean;\n    showTitle?: boolean;\n    showSubtitle?: boolean;\n    allowAnnouncement?: boolean;\n  };\n}\n")),Object(a.b)("h4",{id:"notificationaction"},Object(a.b)("inlineCode",{parentName:"h4"},"NotificationAction")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface NotificationAction {\n  identifier: string;\n  buttonTitle: string;\n  textInput?: {\n    submitButtonTitle: string;\n    placeholder: string;\n  };\n  options: {\n    isDestructive?: boolean;\n    isAuthenticationRequired?: boolean;\n    opensAppToForeground?: boolean;\n  };\n}\n")),Object(a.b)("h4",{id:"notificationpermissionsstatus"},Object(a.b)("inlineCode",{parentName:"h4"},"NotificationPermissionsStatus")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface NotificationPermissionsStatus {\n  status: 'granted' | 'undetermined' | 'denied'; // on iOS, you should check `ios.status`\n  granted: boolean;\n  expires: 'never' | number;\n  canAskAgain: boolean;\n  android?: {\n    importance: number;\n    interruptionFilter?: number;\n  };\n  ios?: {\n    status: IosAuthorizationStatus;\n    allowsDisplayInNotificationCenter: boolean | null;\n    allowsDisplayOnLockScreen: boolean | null;\n    allowsDisplayInCarPlay: boolean | null;\n    allowsAlert: boolean | null;\n    allowsBadge: boolean | null;\n    allowsSound: boolean | null;\n    allowsCriticalAlerts?: boolean | null;\n    alertStyle: IosAlertStyle;\n    allowsPreviews?: IosAllowsPreviews;\n    providesAppNotificationSettings?: boolean;\n    allowsAnnouncements?: boolean | null;\n  };\n}\n")))}m.isMDXComponent=!0}},[["KoZW",1,0,2,3,4,5,6,7,8,10,16]]]);