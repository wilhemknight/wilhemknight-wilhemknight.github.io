_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[312],{"+buO":function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/versions/latest/sdk/branch",function(){return t("65rM")}])},"65rM":function(e,n,t){"use strict";t.r(n),t.d(n,"meta",(function(){return b})),t.d(n,"headings",(function(){return p})),t.d(n,"default",(function(){return s}));var a=t("HALo"),i=t("dhJC"),r=(t("q1tI"),t("7ljp")),o=t("hykZ"),c=["components"],b={title:"Branch",sourceCodeUrl:"https://github.com/expo/expo/tree/sdk-44/packages/expo-branch"},p=[{depth:2,type:"text",title:"Installation"},{depth:2,type:"text",title:"Configuration"},{depth:3,type:"text",title:"Enable Branch support for Universal Links (iOS only)"},{depth:2,type:"text",title:"Importing Branch"},{depth:2,type:"text",title:"Using the Branch API"},{depth:2,type:"text",title:"Example"}],l={meta:b,headings:p};function s(e){var n=e.components,t=Object(i.a)(e,c);return Object(r.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"\u26a0\ufe0f ",Object(r.b)("strong",{parentName:"p"},"This module only works in standalone apps on the classic build service (",Object(r.b)("inlineCode",{parentName:"strong"},"expo build"),")"),". For ",Object(r.b)("strong",{parentName:"p"},"EAS Build"),", you should use the official ",Object(r.b)("a",{parentName:"p",href:"https://github.com/BranchMetrics/react-native-branch-deep-linking-attribution"},"react-native-branch")," with ",Object(r.b)("a",{parentName:"p",href:"https://github.com/expo/config-plugins/tree/master/packages/react-native-branch"},"@config-plugins/react-native-branch")," instead.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"expo-branch"))," provides support for the ",Object(r.b)("a",{parentName:"p",href:"https://branch.io/"},"Branch")," SDK, which is used for install referrals and attribution with deep links."),Object(r.b)(o.a,{android:!0,emulator:!0,ios:!0,simulator:!0,mdxType:"PlatformsSection"}),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)("p",null,"For ",Object(r.b)("a",{parentName:"p",href:"/introduction/managed-vs-bare/#managed-workflow"},"managed")," apps, you'll need to run ",Object(r.b)("inlineCode",{parentName:"p"},"expo install expo-branch"),". In a ",Object(r.b)("a",{parentName:"p",href:"/introduction/managed-vs-bare/#bare-workflow"},"bare")," React Native app, you should use ",Object(r.b)("a",{parentName:"p",href:"https://github.com/BranchMetrics/react-native-branch-deep-linking-attribution"},"react-native-branch-deep-linking-attribution")," instead."),Object(r.b)("h2",{id:"configuration"},"Configuration"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Add the ",Object(r.b)("strong",{parentName:"li"},"Branch Key")," to your ",Object(r.b)("strong",{parentName:"li"},"app.json")," in the section ",Object(r.b)("inlineCode",{parentName:"li"},"android.config.branch.apiKey")," and ",Object(r.b)("inlineCode",{parentName:"li"},"ios.config.branch.apiKey"),". You can find your key on ",Object(r.b)("a",{parentName:"li",href:"https://dashboard.branch.io/account-settings/app"},"this page")," of the Branch Dashboard."),Object(r.b)("li",{parentName:"ul"},"Add a ",Object(r.b)("strong",{parentName:"li"},"linking scheme")," to your ",Object(r.b)("strong",{parentName:"li"},"app.json")," in the ",Object(r.b)("inlineCode",{parentName:"li"},"scheme")," section if you don't already have one."),Object(r.b)("li",{parentName:"ul"},"On iOS, the ",Object(r.b)("inlineCode",{parentName:"li"},"Branch")," module will automatically be bundled with your ",Object(r.b)("strong",{parentName:"li"},".ipa"),". For Android, ",Object(r.b)("inlineCode",{parentName:"li"},"expo-branch")," must be present in your dependencies in ",Object(r.b)("strong",{parentName:"li"},"package.json")," at the time ",Object(r.b)("inlineCode",{parentName:"li"},"expo build:android")," is run in order for the module to be bundled with your ",Object(r.b)("strong",{parentName:"li"},".apk"),"."),Object(r.b)("li",{parentName:"ul"},"For Android, add a new intent filter that registers the Branch ",Object(r.b)("inlineCode",{parentName:"li"},"link-domain"),", under ",Object(r.b)("inlineCode",{parentName:"li"},"android.intentFilters")," in ",Object(r.b)("strong",{parentName:"li"},"app.json"),".")),Object(r.b)("h3",{id:"enable-branch-support-for-universal-links-ios-only"},"Enable Branch support for Universal Links (iOS only)"),Object(r.b)("p",null,"Branch can track universal links from domains you associate with your app. ",Object(r.b)("strong",{parentName:"p"},"Note:")," Universal Links handled by Branch won't be forwarded to the ",Object(r.b)("a",{parentName:"p",href:"/versions/latest/sdk/linking/"},"Linking")," module."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Enable associated domains on ",Object(r.b)("a",{parentName:"p",href:"https://developer.apple.com/account/ios/identifier/bundle"},"Apple's Developer Portal")," for your app id. To do so go in the ",Object(r.b)("inlineCode",{parentName:"p"},"App IDs")," section and click on your app id. Select ",Object(r.b)("inlineCode",{parentName:"p"},"Edit"),", check the ",Object(r.b)("inlineCode",{parentName:"p"},"Associated Domains")," checkbox and click ",Object(r.b)("inlineCode",{parentName:"p"},"Done"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Enable Universal Links in the ",Object(r.b)("a",{parentName:"p",href:"https://dashboard.branch.io/link-settings"},"Link Settings")," section of the Branch Dashboard and fill in your Bundle Identifier and Apple App Prefix.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Add an associated domain to support universal links to your ",Object(r.b)("strong",{parentName:"p"},"app.json")," in the ",Object(r.b)("inlineCode",{parentName:"p"},"ios.associatedDomains")," section. This should be in the form of ",Object(r.b)("inlineCode",{parentName:"p"},"applinks:<link-domain>")," where ",Object(r.b)("inlineCode",{parentName:"p"},"link-domain")," can be found in the Link Domain section of the ",Object(r.b)("a",{parentName:"p",href:"https://dashboard.branch.io/link-settings"},"Link Settings")," page on the Branch Dashboard. You will ",Object(r.b)("a",{parentName:"p",href:"/../../../../../../workflow/publishing/#some-native-configuration-cant-be-updated-by"},"need to rebuild")," your app for the new associated domain to be picked up."))),Object(r.b)("h2",{id:"importing-branch"},"Importing Branch"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"import Branch, { BranchEvent } from 'expo-branch';\n")),Object(r.b)("h2",{id:"using-the-branch-api"},"Using the Branch API"),Object(r.b)("p",null,"We pull in the API from ",Object(r.b)("a",{parentName:"p",href:"https://github.com/BranchMetrics/react-native-branch-deep-linking-attribution#usage"},"react-native-branch-deep-linking-attribution"),", so the documentation there is the best resource to follow. Make sure you import Branch using the above instructions (from ",Object(r.b)("inlineCode",{parentName:"p"},"Branch"),")."),Object(r.b)("h2",{id:"example"},"Example"),Object(r.b)("p",null,"Listen for links:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"Branch.subscribe(bundle => {\n  if (bundle && bundle.params && !bundle.error) {\n    // `bundle.params` contains all the info about the link.\n  }\n});\n")),Object(r.b)("p",null,"Open a share dialog:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"class ArticleScreen extends Component {\n  componentDidMount() {\n    this.createBranchUniversalObject();\n  }\n\n  async createBranchUniversalObject() {\n    const { article } = this.props;\n\n    this._branchUniversalObject = await Branch.createBranchUniversalObject(\n      `article_${article.id}`,\n      {\n        title: article.title,\n        contentImageUrl: article.thumbnail,\n        contentDescription: article.description,\n        // This metadata can be used to easily navigate back to this screen\n        // when implementing deep linking with `Branch.subscribe`.\n        metadata: {\n          screen: 'articleScreen',\n          params: JSON.stringify({ articleId: article.id }),\n        },\n      }\n    );\n  }\n\n  onShareLinkPress = async () => {\n    const shareOptions = {\n      messageHeader: this.props.article.title,\n      messageBody: `Checkout my new article!`,\n    };\n    await this._branchUniversalObject.showShareSheet(shareOptions);\n  };\n}\n")))}s.isMDXComponent=!0}},[["+buO",1,0,2,3,4,5]]]);