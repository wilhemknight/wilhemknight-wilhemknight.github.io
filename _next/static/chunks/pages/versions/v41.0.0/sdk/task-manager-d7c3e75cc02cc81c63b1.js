_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[870],{"6+8P":function(e,t,a){"use strict";a.r(t),a.d(t,"meta",(function(){return p})),a.d(t,"headings",(function(){return c})),a.d(t,"default",(function(){return b}));var n=a("HALo"),s=a("dhJC"),r=(a("q1tI"),a("7ljp")),o=a("hykZ"),i=["components"],p={title:"TaskManager",sourceCodeUrl:"https://github.com/expo/expo/tree/sdk-41/packages/expo-task-manager"},c=[{depth:2,type:"text",title:"Installation"},{depth:2,type:"text",title:"Configuration for standalone apps"},{depth:3,type:"text",title:"Background modes on iOS"},{depth:3,type:"text",title:"AppDelegate.h"},{depth:2,type:"text",title:"API"},{depth:3,type:"inlineCode",title:"TaskManager.defineTask(taskName, task)"},{depth:4,type:"text",title:"Arguments"},{depth:3,type:"inlineCode",title:"TaskManager.isAvailableAsync()"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"TaskManager.isTaskRegisteredAsync(taskName)"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"TaskManager.getTaskOptionsAsync(taskName)"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"TaskManager.getRegisteredTasksAsync()"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"TaskManager.unregisterTaskAsync(taskName)"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"TaskManager.unregisterAllTasksAsync()"},{depth:3,type:"text",title:"Returns"},{depth:2,type:"text",title:"Example"}],l={meta:p,headings:c};function b(e){var t=e.components,a=Object(s.a)(e,i);return Object(r.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"expo-task-manager"))," provides an API that allows you to manage long-running tasks, in particular those tasks that can run while your app is in the background.\nSome features of this module are used by other modules under the hood. Here is a list of Expo modules that use TaskManager:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/versions/v41.0.0/sdk/location/"},"Location")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/versions/v41.0.0/sdk/background-fetch/"},"BackgroundFetch"))),Object(r.b)(o.a,{android:!0,emulator:!0,ios:!0,simulator:!0,mdxType:"PlatformsSection"}),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)("p",null,"For ",Object(r.b)("a",{parentName:"p",href:"/introduction/managed-vs-bare/#managed-workflow"},"managed")," apps, you'll need to run ",Object(r.b)("inlineCode",{parentName:"p"},"expo install expo-task-manager"),". To use it in ",Object(r.b)("a",{parentName:"p",href:"/introduction/managed-vs-bare/#bare-workflow"},"bare")," React Native app, follow its ",Object(r.b)("a",{parentName:"p",href:"https://github.com/expo/expo/tree/main/packages/expo-task-manager"},"installation instructions"),";"),Object(r.b)("h2",{id:"configuration-for-standalone-apps"},"Configuration for standalone apps"),Object(r.b)("h3",{id:"background-modes-on-ios"},"Background modes on iOS"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"TaskManager")," works out of the box in the Expo Go app on Android, but on iOS you'll need to test using ",Object(r.b)("a",{parentName:"p",href:"/guides/adhoc-builds/"},"a custom Expo Go build"),"."),Object(r.b)("p",null,"Standalone apps need some extra configuration: on iOS, each background feature requires a special key in ",Object(r.b)("inlineCode",{parentName:"p"},"UIBackgroundModes")," array in your ",Object(r.b)("strong",{parentName:"p"},"Info.plist")," file. In standalone apps this array is empty by default, so in order to use background features you will need to add appropriate keys to your ",Object(r.b)("strong",{parentName:"p"},"app.json")," configuration.\nHere is an example of an ",Object(r.b)("strong",{parentName:"p"},"app.json")," configuration that enables background location and background fetch:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'{\n  "expo": {\n    ...\n    "ios": {\n      ...\n      "infoPlist": {\n        ...\n        "UIBackgroundModes": [\n          "location",\n          "fetch"\n        ]\n      }\n    }\n  }\n}\n')),Object(r.b)("p",null,"For bare React Native apps, you need to add those keys manually. You can do it by clicking on your project in Xcode, then ",Object(r.b)("inlineCode",{parentName:"p"},"Signing & Capabilities"),", adding the ",Object(r.b)("inlineCode",{parentName:"p"},"BackgroundMode")," capability (if absent), and checking either ",Object(r.b)("inlineCode",{parentName:"p"},"Location updates")," or ",Object(r.b)("inlineCode",{parentName:"p"},"Background fetch"),", depending on your needs."),Object(r.b)("h3",{id:"appdelegateh"},"AppDelegate.h"),Object(r.b)("p",null,"Make sure that in your ",Object(r.b)("inlineCode",{parentName:"p"},"AppDelegate.h"),", ",Object(r.b)("inlineCode",{parentName:"p"},"AppDelegate")," subclasses the ",Object(r.b)("inlineCode",{parentName:"p"},"UMAppDelegateWrapper")," class from ",Object(r.b)("inlineCode",{parentName:"p"},"@unimodules/core"),", like so:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-objc"},"#import <UMCore/UMAppDelegateWrapper.h>\n\n@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n")),Object(r.b)("h2",{id:"api"},"API"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import * as TaskManager from 'expo-task-manager';\n")),Object(r.b)("h3",{id:"taskmanagerdefinetasktaskname-task"},Object(r.b)("inlineCode",{parentName:"h3"},"TaskManager.defineTask(taskName, task)")),Object(r.b)("p",null,"Defines task function.\nIt must be called in the global scope of your JavaScript bundle. In particular, it ",Object(r.b)("strong",{parentName:"p"},"cannot")," be called in any of React lifecycle methods like ",Object(r.b)("inlineCode",{parentName:"p"},"componentDidMount"),".\nThis limitation is due to the fact that when the application is launched in the background, we need to spin up your JavaScript app, run your task and then shut down \u2014 no views are mounted in this scenario."),Object(r.b)("h4",{id:"arguments"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"taskName (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- Name of the task."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"task (",Object(r.b)("em",{parentName:"strong"},"function"),")")," -- A function that will be invoked when the task with given ",Object(r.b)("strong",{parentName:"li"},"taskName")," is executed.")),Object(r.b)("h3",{id:"taskmanagerisavailableasync"},Object(r.b)("inlineCode",{parentName:"h3"},"TaskManager.isAvailableAsync()")),Object(r.b)("p",null,"Determine if the ",Object(r.b)("inlineCode",{parentName:"p"},"TaskManager")," API can be used in this app."),Object(r.b)("h4",{id:"returns"},"Returns"),Object(r.b)("p",null,"A promise resolves to ",Object(r.b)("inlineCode",{parentName:"p"},"true")," if the API can be used, and ",Object(r.b)("inlineCode",{parentName:"p"},"false")," otherwise."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Always returns ",Object(r.b)("inlineCode",{parentName:"li"},"false")," in the browser.")),Object(r.b)("h3",{id:"taskmanageristaskregisteredasynctaskname"},Object(r.b)("inlineCode",{parentName:"h3"},"TaskManager.isTaskRegisteredAsync(taskName)")),Object(r.b)("p",null,"Determine whether the task is registered. Registered tasks are stored in a persistent storage and preserved between sessions."),Object(r.b)("h4",{id:"arguments-1"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"taskName (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- Name of the task.")),Object(r.b)("h4",{id:"returns-1"},"Returns"),Object(r.b)("p",null,"Returns a promise resolving to a boolean value whether or not the task with given name is already registered."),Object(r.b)("h3",{id:"taskmanagergettaskoptionsasynctaskname"},Object(r.b)("inlineCode",{parentName:"h3"},"TaskManager.getTaskOptionsAsync(taskName)")),Object(r.b)("p",null,"Retrieves options associated with the task, that were passed to the function registering the task (eg. ",Object(r.b)("inlineCode",{parentName:"p"},"Location.startLocationUpdatesAsync"),")."),Object(r.b)("h4",{id:"arguments-2"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"taskName (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- Name of the task.")),Object(r.b)("h4",{id:"returns-2"},"Returns"),Object(r.b)("p",null,"Returns a promise resolving to the options object that was passed while registering task with given name or ",Object(r.b)("inlineCode",{parentName:"p"},"null")," if task couldn't be found."),Object(r.b)("h3",{id:"taskmanagergetregisteredtasksasync"},Object(r.b)("inlineCode",{parentName:"h3"},"TaskManager.getRegisteredTasksAsync()")),Object(r.b)("p",null,"Provides information about tasks registered in the app."),Object(r.b)("h4",{id:"returns-3"},"Returns"),Object(r.b)("p",null,"Returns a promise resolving to an array of tasks registered in the app.\nExample:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"[\n  {\n    taskName: 'location-updates-task-name',\n    taskType: 'location',\n    options: {\n      accuracy: Location.Accuracy.High,\n      showsBackgroundLocationIndicator: false,\n    },\n  },\n  {\n    taskName: 'geofencing-task-name',\n    taskType: 'geofencing',\n    options: {\n      regions: [...],\n    },\n  },\n]\n")),Object(r.b)("h3",{id:"taskmanagerunregistertaskasynctaskname"},Object(r.b)("inlineCode",{parentName:"h3"},"TaskManager.unregisterTaskAsync(taskName)")),Object(r.b)("p",null,"Unregisters task from the app, so the app will not be receiving updates for that task anymore.\n",Object(r.b)("em",{parentName:"p"},"It is recommended to use methods specialized by modules that registered the task, eg. ",Object(r.b)("a",{parentName:"em",href:"/versions/v41.0.0/sdk/location/#expolocationstoplocationupdatesasynctaskname"},"Location.stopLocationUpdatesAsync"),".")),Object(r.b)("h4",{id:"arguments-3"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"taskName (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- Name of the task to unregister.")),Object(r.b)("h4",{id:"returns-4"},"Returns"),Object(r.b)("p",null,"Returns a promise resolving as soon as the task is unregistered."),Object(r.b)("h3",{id:"taskmanagerunregisteralltasksasync"},Object(r.b)("inlineCode",{parentName:"h3"},"TaskManager.unregisterAllTasksAsync()")),Object(r.b)("p",null,"Unregisters all tasks registered for the running app."),Object(r.b)("h3",{id:"returns-5"},"Returns"),Object(r.b)("p",null,"Returns a promise that resolves as soon as all tasks are completely unregistered."),Object(r.b)("h2",{id:"example"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\nimport { Text, TouchableOpacity } from 'react-native';\nimport * as TaskManager from 'expo-task-manager';\nimport * as Location from 'expo-location';\n\nconst LOCATION_TASK_NAME = 'background-location-task';\n\nexport default class Component extends React.Component {\n  onPress = async () => {\n    const { status } = await Location.requestPermissionsAsync();\n    if (status === 'granted') {\n      await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {\n        accuracy: Location.Accuracy.Balanced,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <TouchableOpacity onPress={this.onPress}>\n        <Text>Enable background location</Text>\n      </TouchableOpacity>\n    );\n  }\n}\n\nTaskManager.defineTask(LOCATION_TASK_NAME, ({ data, error }) => {\n  if (error) {\n    // Error occurred - check `error.message` for more details.\n    return;\n  }\n  if (data) {\n    const { locations } = data;\n    // do something with the locations captured in the background\n  }\n});\n")))}b.isMDXComponent=!0},cbrg:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/versions/v41.0.0/sdk/task-manager",function(){return a("6+8P")}])}},[["cbrg",1,0,2,3,4,5]]]);