_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[1025],{"1sz4":function(e,t,a){"use strict";a.r(t),a.d(t,"meta",(function(){return c})),a.d(t,"headings",(function(){return l})),a.d(t,"default",(function(){return m}));var n=a("HALo"),r=a("dhJC"),i=(a("q1tI"),a("7ljp")),s=a("HCau"),o=a("hykZ"),b=["components"],c={title:"SQLite",sourceCodeUrl:"https://github.com/expo/expo/tree/sdk-42/packages/expo-sqlite"},l=[{depth:2,type:"text",title:"Installation"},{depth:2,type:"text",title:"API"},{depth:3,type:"inlineCode",title:"SQLite.openDatabase(name, version, description, size)"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"Database  objects"},{depth:4,type:"text",title:"Parameters"},{depth:3,type:"inlineCode",title:"Transaction  objects"},{depth:4,type:"text",title:"Parameters"},{depth:3,type:"inlineCode",title:"ResultSet  objects"},{depth:2,type:"text",title:"Guides"},{depth:3,type:"text",title:"Importing an existing database"},{depth:3,type:"text",title:"Executing statements outside of a transaction"}],p={meta:c,headings:l};function m(e){var t=e.components,a=Object(r.a)(e,b);return Object(i.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"expo-sqlite"))," gives your app access to a database that can be queried through a ",Object(i.b)("a",{parentName:"p",href:"https://www.w3.org/TR/webdatabase/"},"WebSQL"),"-like API. The database is persisted across restarts of your app."),Object(i.b)("p",null,"An ",Object(i.b)("a",{parentName:"p",href:"https://github.com/expo/examples/tree/master/with-sqlite"},"example to do list app")," is available that uses this module for storage."),Object(i.b)(o.a,{android:!0,emulator:!0,ios:!0,simulator:!0,mdxType:"PlatformsSection"}),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)(s.b,{packageName:"expo-sqlite",mdxType:"InstallSection"}),Object(i.b)("h2",{id:"api"},"API"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import * as SQLite from 'expo-sqlite';\n")),Object(i.b)("h3",{id:"sqliteopendatabasename-version-description-size"},Object(i.b)("inlineCode",{parentName:"h3"},"SQLite.openDatabase(name, version, description, size)")),Object(i.b)("p",null,"Open a database, creating it if it doesn't exist, and return a ",Object(i.b)("inlineCode",{parentName:"p"},"Database")," object. On disk, the database will be created under the app's ",Object(i.b)("a",{parentName:"p",href:"/versions/v42.0.0/sdk/filesystem/"},"documents directory"),", i.e. ",Object(i.b)("inlineCode",{parentName:"p"},"${FileSystem.documentDirectory}/SQLite/${name}"),"."),Object(i.b)("h4",{id:"arguments"},"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"name (",Object(i.b)("em",{parentName:"strong"},"string"),")")," -- Name of the database file to open.")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"version"),", ",Object(i.b)("inlineCode",{parentName:"p"},"description")," and ",Object(i.b)("inlineCode",{parentName:"p"},"size")," arguments are ignored, but are accepted by the function for compatibility with the WebSQL specification."),Object(i.b)("h4",{id:"returns"},"Returns"),Object(i.b)("p",null,"Returns a ",Object(i.b)("inlineCode",{parentName:"p"},"Database")," object, described below."),Object(i.b)("h3",{id:"database-objects"},Object(i.b)("inlineCode",{parentName:"h3"},"Database")," objects"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Database")," objects are returned by calls to ",Object(i.b)("inlineCode",{parentName:"p"},"SQLite.openDatabase()"),". Such an object represents a connection to a database on your device. They support one method:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"db.transaction(callback, error, success)")),Object(i.b)("p",{parentName:"li"},"Execute a database transaction."),Object(i.b)("h4",{parentName:"li",id:"parameters"},"Parameters"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"callback (",Object(i.b)("em",{parentName:"strong"},"function"),")")," -- A function representing the transaction to perform. Takes a ",Object(i.b)("inlineCode",{parentName:"li"},"Transaction")," (see below) as its only parameter, on which it can add SQL statements to execute."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"error (",Object(i.b)("em",{parentName:"strong"},"function"),")")," -- Called if an error occurred processing this transaction. Takes a single parameter describing the error."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"success (",Object(i.b)("em",{parentName:"strong"},"function"),")")," -- Called when the transaction has completed executing on the database.")))),Object(i.b)("h3",{id:"transaction-objects"},Object(i.b)("inlineCode",{parentName:"h3"},"Transaction")," objects"),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"Transaction")," object is passed in as a parameter to the ",Object(i.b)("inlineCode",{parentName:"p"},"callback")," parameter for the ",Object(i.b)("inlineCode",{parentName:"p"},"db.transaction()")," method on a ",Object(i.b)("inlineCode",{parentName:"p"},"Database")," (see above). It allows enqueuing SQL statements to perform in a database transaction. It supports one method:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"tx.executeSql(sqlStatement, arguments, success, error)")),Object(i.b)("p",{parentName:"li"},"Enqueue a SQL statement to execute in the transaction. Authors are strongly recommended to make use of the ",Object(i.b)("inlineCode",{parentName:"p"},"?")," placeholder feature of the method to avoid against SQL injection attacks, and to never construct SQL statements on the fly."),Object(i.b)("h4",{parentName:"li",id:"parameters-1"},"Parameters"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"sqlStatement (",Object(i.b)("em",{parentName:"strong"},"string"),")")," -- A string containing a database query to execute expressed as SQL. The string may contain ",Object(i.b)("inlineCode",{parentName:"li"},"?")," placeholders, with values to be substituted listed in the ",Object(i.b)("inlineCode",{parentName:"li"},"arguments")," parameter."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"arguments (",Object(i.b)("em",{parentName:"strong"},"array"),")")," -- An array of values (numbers or strings) to substitute for ",Object(i.b)("inlineCode",{parentName:"li"},"?")," placeholders in the SQL statement."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"success (",Object(i.b)("em",{parentName:"strong"},"function"),")")," -- Called when the query is successfully completed during the transaction. Takes two parameters: the transaction itself, and a ",Object(i.b)("inlineCode",{parentName:"li"},"ResultSet")," object (see below) with the results of the query."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"error (",Object(i.b)("em",{parentName:"strong"},"function"),")")," -- Called if an error occurred executing this particular query in the transaction. Takes two parameters: the transaction itself, and the error object.")))),Object(i.b)("h3",{id:"resultset-objects"},Object(i.b)("inlineCode",{parentName:"h3"},"ResultSet")," objects"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"ResultSet")," objects are returned through second parameter of the ",Object(i.b)("inlineCode",{parentName:"p"},"success")," callback for the ",Object(i.b)("inlineCode",{parentName:"p"},"tx.executeSql()")," method on a ",Object(i.b)("inlineCode",{parentName:"p"},"Transaction")," (see above). They have the following form:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"{\n  insertId,\n  rowsAffected,\n  rows: {\n    length,\n    item(),\n    _array,\n  },\n}\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"insertId (",Object(i.b)("em",{parentName:"strong"},"number"),")")," -- The row ID of the row that the SQL statement inserted into the database, if a row was inserted.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"rowsAffected (",Object(i.b)("em",{parentName:"strong"},"number"),")")," -- The number of rows that were changed by the SQL statement.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"rows.length (",Object(i.b)("em",{parentName:"strong"},"number"),")")," -- The number of rows returned by the query.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"rows.item (",Object(i.b)("em",{parentName:"strong"},"function"),")")," -- ",Object(i.b)("inlineCode",{parentName:"p"},"rows.item(index)")," returns the row with the given ",Object(i.b)("inlineCode",{parentName:"p"},"index"),". If there is no such row, returns ",Object(i.b)("inlineCode",{parentName:"p"},"null"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"rows.",Object(i.b)("em",{parentName:"strong"},"array (","_","number"),")")," -- The actual array of rows returned by the query. Can be used directly instead of getting rows through ",Object(i.b)("inlineCode",{parentName:"p"},"rows.item()"),"."))),Object(i.b)("h2",{id:"guides"},"Guides"),Object(i.b)("h3",{id:"importing-an-existing-database"},"Importing an existing database"),Object(i.b)("p",null,"In order to open a new SQLite database using an existing ",Object(i.b)("inlineCode",{parentName:"p"},".db")," file you already have, you need to do three things:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"expo install expo-file-system expo-asset")),Object(i.b)("li",{parentName:"ul"},"create a ",Object(i.b)("strong",{parentName:"li"},"metro.config.js")," file in the root of your project with the following contents (",Object(i.b)("a",{parentName:"li",href:"/guides/customizing-metro/#adding-more-file-extensions-to--assetexts"},"curious why? read here"),"):")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"const { getDefaultConfig } = require('expo/metro-config');\n\nconst defaultConfig = getDefaultConfig(__dirname);\n\nmodule.exports = {\n  resolver: {\n    assetExts: [...defaultConfig.resolver.assetExts, 'db'],\n  },\n};\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Use the following function (or similar) to open your database:")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"async function openDatabase(pathToDatabaseFile: string): Promise<SQLite.WebSQLDatabase> {\n  if (!(await FileSystem.getInfoAsync(FileSystem.documentDirectory + 'SQLite')).exists) {\n    await FileSystem.makeDirectoryAsync(FileSystem.documentDirectory + 'SQLite');\n  }\n  await FileSystem.downloadAsync(\n    Asset.fromModule(require(pathToDatabaseFile)).uri,\n    FileSystem.documentDirectory + 'SQLite/myDatabaseName.db'\n  );\n  return SQLite.openDatabase('myDatabaseName.db');\n}\n")),Object(i.b)("h3",{id:"executing-statements-outside-of-a-transaction"},"Executing statements outside of a transaction"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Please note that you should use this kind of execution only when it is necessary. For instance, when code is a no-op within transactions (like eg. ",Object(i.b)("inlineCode",{parentName:"p"},"PRAGMA foreign_keys = ON;"),").")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const db = SQLite.openDatabase('dbName', version);\n\ndb.exec([{ sql: 'PRAGMA foreign_keys = ON;', args: [] }], false, () =>\n  console.log('Foreign keys turned on')\n);\n")))}m.isMDXComponent=!0},yZjd:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/versions/v42.0.0/sdk/sqlite",function(){return a("1sz4")}])}},[["yZjd",1,0,2,3,4,5,6]]]);