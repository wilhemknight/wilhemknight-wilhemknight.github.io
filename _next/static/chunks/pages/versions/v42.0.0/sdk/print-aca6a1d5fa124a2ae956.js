_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[1007],{"7Asc":function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/versions/v42.0.0/sdk/print",function(){return n("tFTc")}])},I0q5:function(e,t,n){"use strict";n.d(t,"a",(function(){return O}));var i=n("z7pX"),a=n("H+61"),r=n("UlJF"),o=n("+Css"),c=n("7LId"),s=n("VIvw"),p=n("iHvq"),l=n("cpVT"),d=n("q1tI"),u=n("ufKf"),m=n("3zh3"),b=n("AeFk"),h=function(e){var t=e.size,n=void 0===t?24:t,i=e.stroke,a=void 0===i?m.palette.dark.white:i;return Object(b.c)("svg",{"aria-label":"check",width:n,height:n,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg"},Object(b.c)("path",{d:"M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6m4-3h6v6m-11 5L21 3",stroke:a,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"}))},f=n("5BX9");function y(e){var t=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=Object(p.a)(e);if(t){var a=Object(p.a)(this).constructor;n=Reflect.construct(i,arguments,a)}else n=i.apply(this,arguments);return Object(s.a)(this,n)}}var g="v".concat(n("kiQV").version),O=function(e){Object(c.a)(n,e);var t=y(n);function n(){var e;Object(a.a)(this,n);for(var r=arguments.length,c=new Array(r),s=0;s<r;s++)c[s]=arguments[s];return e=t.call.apply(t,[this].concat(c)),Object(l.a)(Object(o.a)(e),"contentRef",d.createRef()),Object(l.a)(Object(o.a)(e),"state",{ready:!1}),Object(l.a)(Object(o.a)(e),"getSelectedDocsVersion",(function(){var t=e.context.version;return"latest"===t?g:t})),Object(l.a)(Object(o.a)(e),"getSnackSdkVersion",(function(){var t=e.getSelectedDocsVersion();return"unversioned"===t&&(t=g),t.replace("v","")})),Object(l.a)(Object(o.a)(e),"getExamplesPath",(function(){return"".concat(document.location.origin,"/static/examples/").concat(e.getSelectedDocsVersion())})),Object(l.a)(Object(o.a)(e),"getDependencies",(function(){return Object(i.a)(e.props.dependencies).join(",")})),Object(l.a)(Object(o.a)(e),"getCode",(function(){return(e.contentRef.current&&e.contentRef.current.textContent||"").replace(/%%placeholder-start%%.*%%placeholder-end%%/g,"")})),e}return Object(r.a)(n,[{key:"componentDidMount",value:function(){this.setState({ready:!0})}},{key:"render",value:function(){return Object(b.c)("div",null,Object(b.c)("div",{ref:this.contentRef,style:this.props.contentHidden?{display:"none"}:void 0},this.props.children),Object(b.c)("form",{action:u.a,method:"POST",target:"_blank"},Object(b.c)("input",{type:"hidden",name:"platform",value:this.props.defaultPlatform||"android"}),Object(b.c)("input",{type:"hidden",name:"name",value:this.props.label||"Example"}),Object(b.c)("input",{type:"hidden",name:"dependencies",value:this.getDependencies()}),Object(b.c)("input",{type:"hidden",name:"sdkVersion",value:this.getSnackSdkVersion()}),this.props.platforms&&Object(b.c)("input",{type:"hidden",name:"supportedPlatforms",value:this.props.platforms.join(",")}),this.state.ready&&Object(b.c)("input",{type:"hidden",name:"files",value:JSON.stringify(Object(u.b)({templateId:this.props.templateId,code:this.getCode(),files:this.props.files,baseURL:this.getExamplesPath()}))}),Object(b.c)("button",{className:"snack-inline-example-button",disabled:!this.state.ready},Object(b.c)(h,{size:16})," ",this.props.buttonTitle||"Try this example on Snack")))}}]),n}(d.Component);Object(l.a)(O,"contextType",f.a),Object(l.a)(O,"defaultProps",{dependencies:[]})},tFTc:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return d})),n.d(t,"headings",(function(){return u})),n.d(t,"default",(function(){return b}));var i=n("HALo"),a=n("dhJC"),r=(n("q1tI"),n("7ljp")),o=n("3Ukx"),c=n("HCau"),s=n("hykZ"),p=n("I0q5"),l=["components"],d={title:"Print",sourceCodeUrl:"https://github.com/expo/expo/tree/sdk-42/packages/expo-print"},u=[{depth:2,type:"text",title:"Installation"},{depth:2,type:"text",title:"Usage"},{depth:2,type:"text",title:"API"},{depth:2,type:"text",title:"Local images"},{depth:2,type:"text",title:"Page margins"}],m={meta:d,headings:u};function b(e){var t=e.components,n=Object(a.a)(e,l);return Object(r.b)("wrapper",Object(i.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"expo-print"))," provides an API for iOS (AirPrint) and Android printing functionality."),Object(r.b)(s.a,{android:!0,emulator:!0,ios:!0,simulator:!0,web:!0,mdxType:"PlatformsSection"}),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)(c.b,{packageName:"expo-print",mdxType:"InstallSection"}),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)(p.a,{label:"Print usage",dependencies:["expo-print","expo-sharing"],mdxType:"SnackInline"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-jsx"},"import * as React from 'react';\nimport { View, StyleSheet, Button, Platform, Text } from 'react-native';\nimport * as Print from 'expo-print';\nimport { shareAsync } from 'expo-sharing';\n\nconst html = `\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\" />\n  </head>\n  <body style=\"text-align: center;\">\n    <h1 style=\"font-size: 50px; font-family: Helvetica Neue; font-weight: normal;\">\n      Hello Expo!\n    </h1>\n    <img\n      src=\"https://d30j33t1r58ioz.cloudfront.net/static/guides/sdk.png\"\n      style=\"width: 90vw;\" />\n  </body>\n</html>\n`;\n\nexport default function App() {\n  const [selectedPrinter, setSelectedPrinter] = React.useState();\n\n  const print = async () => {\n    // On iOS/android prints the given html. On web prints the HTML from the current page.\n    /* @info */ await Print.printAsync({\n      html,\n      printerUrl: selectedPrinter?.url, // iOS only\n    });/* @end */\n\n  }\n\n  const printToFile = async () => {\n    // On iOS/android prints the given html. On web prints the HTML from the current page.\n    /* @info */const { uri } = await Print.printToFileAsync({\n      html\n    });\n    /* @end */console.log('File has been saved to:', uri);\n    await shareAsync(uri, { UTI: '.pdf', mimeType: 'application/pdf' });\n  }\n\n  const selectPrinter = async () => {\n    /* @info */const printer = await Print.selectPrinterAsync(); // iOS only\n    /* @end */\n    setSelectedPrinter(printer);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Button title='Print' onPress={print}  />\n      <View style={styles.spacer} />\n      <Button title='Print to PDF file' onPress={printToFile}/>\n      {Platform.OS === 'ios' &&\n        <>\n          <View style={styles.spacer} />\n          <Button title='Select printer' onPress={selectPrinter}/>\n          <View style={styles.spacer} />\n          {selectedPrinter ? <Text style={styles.printer}>{`Selected printer: ${selectedPrinter.name}`}</Text> : undefined}\n        </>\n      }\n    </View>\n  );\n}\n\n/* @hide const styles = StyleSheet.create({ ... }); */\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    flexDirection: 'column',\n    padding: 8,\n  },\n  spacer: {\n    height: 8\n  },\n  printer: {\n    textAlign: 'center',\n  }\n});\n/* @end */\n"))),Object(r.b)("h2",{id:"api"},"API"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import * as Print from 'expo-print';\n")),Object(r.b)(o.a,{packageName:"expo-print",apiName:"Print",mdxType:"APISection"}),Object(r.b)("h2",{id:"local-images"},"Local images"),Object(r.b)("p",null,"On iOS, printing from HTML source doesn't support local asset URLs (due to WKWebView limitations). Instead, images need to be converted to base64 and inlined into the HTML."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import { Asset } from 'expo-asset';\nimport { printAsync } from 'expo-print';\nimport { manipulateAsync } from 'expo-image-manipulator';\n\nasync function generateHTML() {\n  const asset = Asset.fromModule(require('../../assets/logo.png'));\n  const image = await manipulateAsync(\n    asset.localUri ?? asset.uri,\n    [],\n    { base64: true }\n  );\n  return `\n    <html>\n      <img\n        src=\"data:image/jpeg;base64,${image.base64}\"\n        style=\"width: 90vw;\" />\n    </html>\n  `;\n}\n\nasync function print() {\n  const html = await generateHTML();\n  await printAsync({ html });\n}\n")),Object(r.b)("h2",{id:"page-margins"},"Page margins"),Object(r.b)("p",null,"If you're using ",Object(r.b)("inlineCode",{parentName:"p"},"html")," option in ",Object(r.b)("inlineCode",{parentName:"p"},"printAsync")," or ",Object(r.b)("inlineCode",{parentName:"p"},"printToFileAsync"),", the resulting print might contain page margins (it depends on WebView engine).\nThey are set by ",Object(r.b)("inlineCode",{parentName:"p"},"@page")," style block and you can override them in your HTML code:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-html"},"<style>\n  @page {\n    margin: 20px;\n  }\n</style>\n")),Object(r.b)("p",null,"See ",Object(r.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@page"},"@page docs on MDN")," for more details."))}b.isMDXComponent=!0},ufKf:function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return a}));var i="https://snack.expo.dev";function a(e){var t=e.templateId,n=e.code,i=e.files,a=e.baseURL,r={};return i&&Object.keys(i).forEach((function(e){var t=i[e],n=/\.(jsx?|tsx?|json|md)$/i.test(e);r[e]=n?{type:"CODE",url:t.match(/^https?:\/\//)?t:"".concat(a,"/").concat(t)}:{type:"ASSET",contents:t}})),t?r["App.js"]={type:"CODE",url:"".concat(a,"/").concat(t,".js")}:n&&(r["App.js"]={type:"CODE",contents:n}),r}}},[["7Asc",1,0,2,3,4,5,6,7,8,9,10,11,12,13,14]]]);