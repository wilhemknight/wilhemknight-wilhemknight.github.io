_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[942],{Cgj1:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return l})),n.d(t,"headings",(function(){return s})),n.d(t,"default",(function(){return m}));var a=n("HALo"),r=n("dhJC"),o=(n("q1tI"),n("7ljp")),i=n("HCau"),p=n("hykZ"),c=["components"],l={title:"Appearance",sourceCodeUrl:"https://github.com/expo/react-native-appearance"},s=[{depth:2,type:"text",title:"Installation"},{depth:2,type:"text",title:"Configuration"},{depth:2,type:"text",title:"API"},{depth:2,type:"text",title:"Tips"}],b={meta:l,headings:s};function m(e){var t=e.components,n=Object(r.a)(e,c);return Object(o.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\u26a0\ufe0f The ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"react-native-appearance"))," package has been replaced by ",Object(o.b)("a",{parentName:"p",href:"/versions/v42.0.0/react-native/appearance/"},"Appearance")," and ",Object(o.b)("a",{parentName:"p",href:"/versions/v42.0.0/react-native/usecolorscheme/"},"useColorScheme")," from ",Object(o.b)("inlineCode",{parentName:"p"},"react-native"),". The ",Object(o.b)("inlineCode",{parentName:"p"},"react-native-appearance")," package will be removed from the Expo SDK in SDK 43.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"react-native-appearance"))," allows you to detect the user's preferred color scheme (",Object(o.b)("inlineCode",{parentName:"p"},"light"),", ",Object(o.b)("inlineCode",{parentName:"p"},"dark")," or ",Object(o.b)("inlineCode",{parentName:"p"},"no-preference"),") on iOS 13+ and Android 10+."),Object(o.b)(p.a,{android:!0,emulator:!0,ios:!0,simulator:!0,web:!0,mdxType:"PlatformsSection"}),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)(i.b,{packageName:"react-native-appearance",href:"https://github.com/expo/react-native-appearance#linking",mdxType:"InstallSection"}),Object(o.b)("h2",{id:"configuration"},"Configuration"),Object(o.b)("p",null,"You can configure supported appearance styles in managed apps inside ",Object(o.b)("strong",{parentName:"p"},"app.json")," with the ",Object(o.b)("inlineCode",{parentName:"p"},"userInterfaceStyle")," key. You can also configure specific platform to support different appearance styles by setting either ",Object(o.b)("inlineCode",{parentName:"p"},"android.userInterfaceStyle")," or ",Object(o.b)("inlineCode",{parentName:"p"},"ios.userInterfaceStyle")," to preferred value.\nThe available options are: ",Object(o.b)("inlineCode",{parentName:"p"},"automatic")," (follow system appearance settings and notify about any change user makes), ",Object(o.b)("inlineCode",{parentName:"p"},"light")," (restrict app to support light theme only), and ",Object(o.b)("inlineCode",{parentName:"p"},"dark")," (restrict app to support dark theme only).\nIf this key is absent, the app will default to the ",Object(o.b)("inlineCode",{parentName:"p"},"light")," style."),Object(o.b)("p",null,"Example ",Object(o.b)("strong",{parentName:"p"},"app.json")," configuration:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'{\n  "expo": {\n    "userInterfaceStyle": "automatic",\n    "ios": {\n      "userInterfaceStyle": "light"\n    },\n    "android": {\n      "userInterfaceStyle": "dark"\n    }\n  }\n}\n')),Object(o.b)("p",null,"In bare apps:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"iOS"),": you can configure supported styles with the ",Object(o.b)("a",{parentName:"li",href:"https://developer.apple.com/documentation/bundleresources/information_property_list/uiuserinterfacestyle"},"UIUserInterfaceStyle")," key in your app ",Object(o.b)("strong",{parentName:"li"},"Info.plist"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Android"),": please follow steps from the ",Object(o.b)("a",{parentName:"li",href:"https://github.com/expo/react-native-appearance#configuration"},Object(o.b)("inlineCode",{parentName:"a"},"react-native-appearance")," repo"),".")),Object(o.b)("h2",{id:"api"},"API"),Object(o.b)("p",null,"To import this library, use:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import { Appearance, AppearanceProvider, useColorScheme } from 'react-native-appearance';\n")),Object(o.b)("p",null,"Next you need to wrap your app root component with an ",Object(o.b)("inlineCode",{parentName:"p"},"AppearanceProvider"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import { AppearanceProvider } from 'react-native-appearance';\n\nexport default () => (\n  <AppearanceProvider>\n    <App />\n  </AppearanceProvider>\n);\n")),Object(o.b)("p",null,"Get the current color scheme imperatively with ",Object(o.b)("inlineCode",{parentName:"p"},"Appearance.getColorScheme()")," and listen to changes with ",Object(o.b)("inlineCode",{parentName:"p"},"Appearance.addChangeListener")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"let colorScheme = Appearance.getColorScheme();\n\nlet subscription = Appearance.addChangeListener(({ colorScheme }) => {\n  // do something with color scheme\n});\n\n// when you're done\nsubscription.remove();\n")),Object(o.b)("p",null,"If you're using hooks, this is made even easier with the ",Object(o.b)("inlineCode",{parentName:"p"},"useColorScheme()")," hook:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"function MyComponent() {\n  let colorScheme = useColorScheme();\n\n  if (colorScheme === 'dark') {\n    // render some dark thing\n  } else {\n    // render some light thing\n  }\n}\n")),Object(o.b)("p",null,"Below you can find an example of a simple application utilizing color scheme of the system:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\nimport { Text, SafeAreaView, StatusBar, StyleSheet } from 'react-native';\nimport { AppearanceProvider, useColorScheme } from 'react-native-appearance';\n\nexport default function AppContainer() {\n  return (\n    <AppearanceProvider>\n      <App />\n    </AppearanceProvider>\n  );\n}\n\nfunction App() {\n  const colorScheme = useColorScheme();\n\n  const themeStatusBarStyle = colorScheme === 'light' ? 'dark-content' : 'light-content';\n  const themeTextStyle = colorScheme === 'light' ? styles.lightThemeText : styles.darkThemeText;\n  const themeContainerStyle =\n    colorScheme === 'light' ? styles.lightContainer : styles.darkContainer;\n\n  return (\n    <SafeAreaView style={[styles.container, themeContainerStyle]}>\n      <StatusBar barStyle={themeStatusBarStyle} />\n      <Text style={[styles.text, themeTextStyle]}>Color scheme: {colorScheme}</Text>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  lightContainer: {\n    backgroundColor: '#D0D0C0',\n  },\n  darkContainer: {\n    backgroundColor: '#242C40',\n  },\n  lightThemeText: {\n    color: '#242C40',\n  },\n  darkThemeText: {\n    color: '#D0D0C0',\n  },\n});\n")),Object(o.b)("h2",{id:"tips"},"Tips"),Object(o.b)("p",null,"While you're developing, you may want to change your simulator's or device's appearance."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"If working with an iOS emulator locally, you can use the ",Object(o.b)("inlineCode",{parentName:"li"},"command")," + ",Object(o.b)("inlineCode",{parentName:"li"},"shift")," + ",Object(o.b)("inlineCode",{parentName:"li"},"a")," shortcut to toggle between light and dark mode."),Object(o.b)("li",{parentName:"ul"},"If using an Android emulator, you can run ",Object(o.b)("inlineCode",{parentName:"li"},'adb shell "cmd uimode night yes"')," to enable dark mode, and ",Object(o.b)("inlineCode",{parentName:"li"},'adb shell "cmd uimode night no"')," to disable dark mode."),Object(o.b)("li",{parentName:"ul"},"If using a real device or an Android emulator, you can toggle the system dark mode setting in the device's settings.")))}m.isMDXComponent=!0},PyYm:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/versions/v42.0.0/sdk/appearance",function(){return n("Cgj1")}])}},[["PyYm",1,0,2,3,4,5,6]]]);