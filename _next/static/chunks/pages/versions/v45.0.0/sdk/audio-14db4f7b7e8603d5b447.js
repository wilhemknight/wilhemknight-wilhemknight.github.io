_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[1432],{"0TlU":function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return c})),n.d(t,"headings",(function(){return s})),n.d(t,"default",(function(){return O}));var a=n("HALo"),i=n("dhJC"),r=(n("q1tI"),n("7ljp")),o=n("HCau"),l=n("hykZ"),p=n("I0q5"),b=["components"],c={title:"Audio",sourceCodeUrl:"https://github.com/expo/expo/tree/sdk-45/packages/expo-av",packageName:"expo-av"},s=[{depth:2,type:"text",title:"Installation"},{depth:2,type:"text",title:"Usage"},{depth:3,type:"text",title:"Playing sounds"},{depth:3,type:"text",title:"Recording sounds"},{depth:2,type:"text",title:"API"},{depth:2,type:"text",title:"Request recording permissions"},{depth:3,type:"inlineCode",title:"Audio.requestPermissionsAsync()"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"Audio.getPermissionsAsync()"},{depth:4,type:"text",title:"Returns"},{depth:2,type:"text",title:"Enabling Audio and customizing Audio Mode"},{depth:3,type:"inlineCode",title:"Audio.setIsEnabledAsync(value)"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"Audio.setAudioModeAsync(mode)"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Playing or recording audio in background (iOS)"},{depth:2,type:"text",title:"Playing sounds"},{depth:3,type:"inlineCode",title:"Audio.Sound"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Example"},{depth:4,type:"text",title:"Parameters"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Example"},{depth:4,type:"text",title:"Parameters"},{depth:4,type:"text",title:"Parameters"},{depth:2,type:"inlineCode",title:"AVMetadata"},{depth:2,type:"inlineCode",title:"AudioSample"},{depth:2,type:"text",title:"Recording sounds"},{depth:3,type:"inlineCode",title:"Audio.Recording"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Example"},{depth:4,type:"text",title:"Parameters"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Example"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Parameters"},{depth:4,type:"text",title:"Parameters"},{depth:4,type:"text",title:"Parameters"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Parameters"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Returns"},{depth:4,type:"text",title:"Parameters"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"RecordingOptions"}],d={meta:c,headings:s};function O(e){var t=e.components,n=Object(i.a)(e,b);return Object(r.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"expo-av"))," allows you to implement audio playback and recording in your app."),Object(r.b)("p",null,"Note that audio automatically stops if headphones / bluetooth audio devices are disconnected."),Object(r.b)("p",null,"Try the ",Object(r.b)("a",{parentName:"p",href:"https://expo.dev/@documentation/playlist-example"},"playlist example app")," (source code is ",Object(r.b)("a",{parentName:"p",href:"https://github.com/expo/playlist-example"},"on GitHub"),") to see an example usage of the media playback API, and the ",Object(r.b)("a",{parentName:"p",href:"https://expo.dev/@documentation/record"},"recording example app")," (source code is ",Object(r.b)("a",{parentName:"p",href:"https://github.com/expo/audio-recording-example"},"on GitHub"),") to see an example usage of the recording API."),Object(r.b)(l.a,{android:!0,emulator:!0,ios:!0,simulator:!0,web:!0,mdxType:"PlatformsSection"}),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)(o.a,{mdxType:"APIInstallSection"}),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("h3",{id:"playing-sounds"},"Playing sounds"),Object(r.b)(p.a,{label:"Playing sounds",dependencies:["expo-av","expo-asset"],files:{"assets/Hello.mp3":"https://snack-code-uploads.s3.us-west-1.amazonaws.com/~asset/c9c43b458d6daa9771a7287cae9f5b47"},mdxType:"SnackInline"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-jsx"},"import * as React from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [sound, setSound] = React.useState();\n\n  async function playSound() {\n    console.log('Loading Sound');\n    /* @info */ const { sound } = await Audio.Sound.createAsync(\n      /* @end */ require('./assets/Hello.mp3')\n    );\n    setSound(sound);\n\n    console.log('Playing Sound');\n    await /* @info */ sound.playAsync(); /* @end */\n  }\n\n  React.useEffect(() => {\n    return sound\n      ? () => {\n          console.log('Unloading Sound');\n          /* @info Always unload the Sound after using it to prevent memory leaks.*/ sound.unloadAsync(); /* @end */\n        }\n      : undefined;\n  }, [sound]);\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Play Sound\" onPress={playSound} />\n    </View>\n  );\n}\n\n/* @hide const styles = StyleSheet.create({ ... }); */\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n/* @end */\n"))),Object(r.b)("h3",{id:"recording-sounds"},"Recording sounds"),Object(r.b)(p.a,{label:"Recording sounds",dependencies:["expo-av","expo-asset"],mdxType:"SnackInline"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-jsx"},"import * as React from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [recording, setRecording] = React.useState();\n\n  async function startRecording() {\n    try {\n      console.log('Requesting permissions..');\n      /* @info */ await Audio.requestPermissionsAsync();\n      await Audio.setAudioModeAsync({\n        allowsRecordingIOS: true,\n        playsInSilentModeIOS: true,\n      }); /* @end */\n\n      console.log('Starting recording..');\n      /* @info */ const { recording } = await Audio.Recording.createAsync(\n        /* @end */ Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY\n      );\n      setRecording(recording);\n      console.log('Recording started');\n    } catch (err) {\n      console.error('Failed to start recording', err);\n    }\n  }\n\n  async function stopRecording() {\n    console.log('Stopping recording..');\n    setRecording(undefined);\n    /* @info */ await recording.stopAndUnloadAsync();\n    const uri = recording.getURI(); /* @end */\n\n    console.log('Recording stopped and stored at', uri);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title={recording ? 'Stop Recording' : 'Start Recording'}\n        onPress={recording ? stopRecording : startRecording}\n      />\n    </View>\n  );\n}\n\n/* @hide const styles = StyleSheet.create({ ... }); */\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n/* @end */\n"))),Object(r.b)("h2",{id:"api"},"API"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import { Audio } from 'expo-av';\n")),Object(r.b)("h2",{id:"request-recording-permissions"},"Request recording permissions"),Object(r.b)("h3",{id:"audiorequestpermissionsasync"},Object(r.b)("inlineCode",{parentName:"h3"},"Audio.requestPermissionsAsync()")),Object(r.b)("p",null,"Asks the user to grant permissions for audio recording."),Object(r.b)("h4",{id:"returns"},"Returns"),Object(r.b)("p",null,"A promise that resolves to an object of type ",Object(r.b)("a",{parentName:"p",href:"/versions/v45.0.0/sdk/permissions/#permissionresponse"},"PermissionResponse"),"."),Object(r.b)("h3",{id:"audiogetpermissionsasync"},Object(r.b)("inlineCode",{parentName:"h3"},"Audio.getPermissionsAsync()")),Object(r.b)("p",null,"Checks user's permissions for audio recording."),Object(r.b)("h4",{id:"returns-1"},"Returns"),Object(r.b)("p",null,"A promise that resolves to an object of type ",Object(r.b)("a",{parentName:"p",href:"/versions/v45.0.0/sdk/permissions/#permissionresponse"},"PermissionResponse"),"."),Object(r.b)("h2",{id:"enabling-audio-and-customizing-audio-mode"},"Enabling Audio and customizing Audio Mode"),Object(r.b)("h3",{id:"audiosetisenabledasyncvalue"},Object(r.b)("inlineCode",{parentName:"h3"},"Audio.setIsEnabledAsync(value)")),Object(r.b)("p",null,"Audio is enabled by default, but if you want to write your own Audio API in a bare workflow app, you might want to disable the Audio API."),Object(r.b)("h4",{id:"arguments"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"value (",Object(r.b)("em",{parentName:"strong"},"boolean"),")")," -- ",Object(r.b)("inlineCode",{parentName:"li"},"true")," enables Audio, and ",Object(r.b)("inlineCode",{parentName:"li"},"false")," disables it.")),Object(r.b)("h4",{id:"returns-2"},"Returns"),Object(r.b)("p",null,"A ",Object(r.b)("inlineCode",{parentName:"p"},"Promise")," that will reject if audio playback could not be enabled for the device."),Object(r.b)("h3",{id:"audiosetaudiomodeasyncmode"},Object(r.b)("inlineCode",{parentName:"h3"},"Audio.setAudioModeAsync(mode)")),Object(r.b)("p",null,"We provide this API to customize the audio experience on iOS and Android."),Object(r.b)("h4",{id:"arguments-1"},"Arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"mode (",Object(r.b)("em",{parentName:"strong"},"object"),")")," --"),Object(r.b)("p",{parentName:"li"},"A dictionary with the following key-value pairs:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"playsInSilentModeIOS")," : a boolean selecting if your experience's audio should play in silent mode on iOS. This value defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"false"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"allowsRecordingIOS")," : a boolean selecting if recording is enabled on iOS. This value defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"false"),". NOTE: when this flag is set to ",Object(r.b)("inlineCode",{parentName:"li"},"true"),", playback may be routed to the phone receiver instead of to the speaker."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"staysActiveInBackground")," : a boolean selecting if the audio session (playback or recording) should stay active even when the app goes into background. This value defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"false"),". ",Object(r.b)("strong",{parentName:"li"},"This is not available in Expo Go for iOS, it will only work in standalone apps"),". To enable it for standalone apps, ",Object(r.b)("a",{parentName:"li",href:"/versions/v45.0.0/sdk/audio/#playing-or-recording-audio-in-background-ios"},"follow the instructions below")," to add ",Object(r.b)("inlineCode",{parentName:"li"},"UIBackgroundModes")," to your app configuration."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"interruptionModeIOS")," : an enum selecting how your experience's audio should interact with the audio from other apps on iOS:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS")," : This is the default option. If this option is set, your experience's audio is mixed with audio playing in background apps."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"INTERRUPTION_MODE_IOS_DO_NOT_MIX")," : If this option is set, your experience's audio interrupts audio from other apps."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"INTERRUPTION_MODE_IOS_DUCK_OTHERS"),' : If this option is set, your experience\'s audio lowers the volume ("ducks") of audio from other apps while your audio plays.'))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"shouldDuckAndroid"),' : a boolean selecting if your experience\'s audio should automatically be lowered in volume ("duck") if audio from another app interrupts your experience. This value defaults to ',Object(r.b)("inlineCode",{parentName:"li"},"true"),". If ",Object(r.b)("inlineCode",{parentName:"li"},"false"),", audio from other apps will pause your audio."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"interruptionModeAndroid")," : an enum selecting how your experience's audio should interact with the audio from other apps on Android:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"INTERRUPTION_MODE_ANDROID_DO_NOT_MIX")," : If this option is set, your experience's audio interrupts audio from other apps."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"INTERRUPTION_MODE_ANDROID_DUCK_OTHERS"),' : This is the default option. If this option is set, your experience\'s audio lowers the volume ("ducks") of audio from other apps while your audio plays.'))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"playThroughEarpieceAndroid")," : a boolean selecting if the audio is routed to earpiece (on Android). This value defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"false"),".")))),Object(r.b)("h4",{id:"returns-3"},"Returns"),Object(r.b)("p",null,"A ",Object(r.b)("inlineCode",{parentName:"p"},"Promise")," that will reject if the audio mode could not be enabled for the device. Note that these are the only legal AudioMode combinations of (",Object(r.b)("inlineCode",{parentName:"p"},"playsInSilentModeIOS"),", ",Object(r.b)("inlineCode",{parentName:"p"},"allowsRecordingIOS"),", ",Object(r.b)("inlineCode",{parentName:"p"},"staysActiveInBackground"),", ",Object(r.b)("inlineCode",{parentName:"p"},"interruptionModeIOS"),"), and any other will result in promise rejection:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"false, false, false, INTERRUPTION_MODE_IOS_DO_NOT_MIX")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"false, false, false, INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"true, true, true, INTERRUPTION_MODE_IOS_DO_NOT_MIX")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"true, true, true, INTERRUPTION_MODE_IOS_DUCK_OTHERS")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"true, true, true, INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"true, true, false, INTERRUPTION_MODE_IOS_DO_NOT_MIX")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"true, true, false, INTERRUPTION_MODE_IOS_DUCK_OTHERS")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"true, true, false, INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"true, false, true, INTERRUPTION_MODE_IOS_DO_NOT_MIX")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"true, false, true, INTERRUPTION_MODE_IOS_DUCK_OTHERS")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"true, false, true, INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"true, false, false, INTERRUPTION_MODE_IOS_DO_NOT_MIX")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"true, false, false, INTERRUPTION_MODE_IOS_DUCK_OTHERS")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"true, false, false, INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS"))),Object(r.b)("h4",{id:"playing-or-recording-audio-in-background-ios"},"Playing or recording audio in background (iOS)"),Object(r.b)("p",null,"On iOS, audio playback and recording in background is only available in standalone apps, and it requires some extra configuration. On iOS, each background feature requires a special key in ",Object(r.b)("inlineCode",{parentName:"p"},"UIBackgroundModes")," array in your ",Object(r.b)("strong",{parentName:"p"},"Info.plist")," file. In standalone apps this array is empty by default, so in order to use background features you will need to add appropriate keys to your ",Object(r.b)("strong",{parentName:"p"},"app.json")," configuration."),Object(r.b)("p",null,"See an example of ",Object(r.b)("strong",{parentName:"p"},"app.json")," that enables audio playback in background:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'{\n  "expo": {\n    ...\n    "ios": {\n      ...\n      "infoPlist": {\n        ...\n        "UIBackgroundModes": [\n          "audio"\n        ]\n      }\n    }\n  }\n}\n')),Object(r.b)("h2",{id:"playing-sounds-1"},"Playing sounds"),Object(r.b)("h3",{id:"audiosound"},Object(r.b)("inlineCode",{parentName:"h3"},"Audio.Sound")),Object(r.b)("p",null,"This class represents a sound corresponding to an Asset or URL."),Object(r.b)("h4",{id:"returns-4"},"Returns"),Object(r.b)("p",null,"A newly constructed instance of ",Object(r.b)("inlineCode",{parentName:"p"},"Audio.Sound"),"."),Object(r.b)("h4",{id:"example"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"const sound = new Audio.Sound();\ntry {\n  await sound.loadAsync(require('./assets/sounds/hello.mp3'));\n  await sound.playAsync();\n  // Your sound is playing!\n\n  // Don't forget to unload the sound from memory\n  // when you are done using the Sound object\n  await sound.unloadAsync();\n} catch (error) {\n  // An error occurred!\n}\n")),Object(r.b)("p",null,"A static convenience method to construct and load a sound is also provided:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.Sound.createAsync(source, initialStatus = {}, onPlaybackStatusUpdate = null, downloadFirst = true)")),Object(r.b)("p",{parentName:"li"},"Creates and loads a sound from source, with optional ",Object(r.b)("inlineCode",{parentName:"p"},"initialStatus"),", ",Object(r.b)("inlineCode",{parentName:"p"},"onPlaybackStatusUpdate"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"downloadFirst"),"."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"const { sound } = await Audio.Sound.createAsync(\n  source,\n  initialStatus,\n  onPlaybackStatusUpdate,\n  downloadFirst\n);\n\n// Which is equivalent to the following:\nconst sound = new Audio.Sound();\nsound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\nawait sound.loadAsync(source, initialStatus, downloadFirst);\n")),Object(r.b)("h4",{parentName:"li",id:"parameters"},"Parameters"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"source (",Object(r.b)("em",{parentName:"strong"},"object")," / ",Object(r.b)("em",{parentName:"strong"},"number")," / ",Object(r.b)("em",{parentName:"strong"},"Asset"),")")," -- The source of the sound. The following forms are supported:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"A dictionary of the form ",Object(r.b)("inlineCode",{parentName:"li"},"{ uri: string, headers?: { [string]: string }, overrideFileExtensionAndroid?: string }")," with a network URL pointing to a media file on the web, an optional headers object passed in a network request to the ",Object(r.b)("inlineCode",{parentName:"li"},"uri")," and an optional Android-specific ",Object(r.b)("inlineCode",{parentName:"li"},"overrideFileExtensionAndroid")," string overriding extension inferred from the URL.\nThe ",Object(r.b)("inlineCode",{parentName:"li"},"overrideFileExtensionAndroid")," property may come in handy if the player receives an URL like ",Object(r.b)("inlineCode",{parentName:"li"},"example.com/play")," which redirects to ",Object(r.b)("inlineCode",{parentName:"li"},"example.com/player.m3u8"),". Setting this property to ",Object(r.b)("inlineCode",{parentName:"li"},"m3u8")," would allow the Android player to properly infer the content type of the media and use proper media file reader."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"require('path/to/file')")," for an audio file asset in the source code directory."),Object(r.b)("li",{parentName:"ul"},"An ",Object(r.b)("a",{parentName:"li",href:"/versions/v45.0.0/sdk/asset/"},Object(r.b)("inlineCode",{parentName:"a"},"Asset"))," object for an audio file asset."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"initialStatus (",Object(r.b)("em",{parentName:"strong"},"PlaybackStatusToSet"),")")," -- The initial intended ",Object(r.b)("inlineCode",{parentName:"p"},"PlaybackStatusToSet")," of the sound, whose values will override the default initial playback status. This value defaults to ",Object(r.b)("inlineCode",{parentName:"p"},"{}")," if no parameter is passed. See the ",Object(r.b)("a",{parentName:"p",href:"/versions/v45.0.0/sdk/av/"},"AV documentation")," for details on ",Object(r.b)("inlineCode",{parentName:"p"},"PlaybackStatusToSet")," and the default initial playback status.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"onPlaybackStatusUpdate (",Object(r.b)("em",{parentName:"strong"},"function"),")")," -- A function taking a single parameter ",Object(r.b)("inlineCode",{parentName:"p"},"PlaybackStatus"),". This value defaults to ",Object(r.b)("inlineCode",{parentName:"p"},"null")," if no parameter is passed. See the ",Object(r.b)("a",{parentName:"p",href:"/versions/v45.0.0/sdk/av/"},"AV documentation")," for details on the functionality provided by ",Object(r.b)("inlineCode",{parentName:"p"},"onPlaybackStatusUpdate"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"downloadFirst (",Object(r.b)("em",{parentName:"strong"},"boolean"),")")," -- If set to true, the system will attempt to download the resource to the device before loading. This value defaults to ",Object(r.b)("inlineCode",{parentName:"p"},"true"),". Note that at the moment, this will only work for ",Object(r.b)("inlineCode",{parentName:"p"},"source"),"s of the form ",Object(r.b)("inlineCode",{parentName:"p"},"require('path/to/file')")," or ",Object(r.b)("inlineCode",{parentName:"p"},"Asset")," objects."))),Object(r.b)("h4",{parentName:"li",id:"returns-5"},"Returns"),Object(r.b)("p",{parentName:"li"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"Promise")," that is rejected if creation failed, or fulfilled with the following dictionary if creation succeeded:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"sound")," : the newly created and loaded ",Object(r.b)("inlineCode",{parentName:"li"},"Sound")," object."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"status")," : the ",Object(r.b)("inlineCode",{parentName:"li"},"PlaybackStatus")," of the ",Object(r.b)("inlineCode",{parentName:"li"},"Sound")," object. See the ",Object(r.b)("a",{parentName:"li",href:"/versions/v45.0.0/sdk/av/"},"AV documentation")," for further information.")),Object(r.b)("h4",{parentName:"li",id:"example-1"},"Example"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"try {\n  const { sound: soundObject, status } = await Audio.Sound.createAsync(\n    require('./assets/sounds/hello.mp3'),\n    { shouldPlay: true }\n  );\n  // Your sound is playing!\n} catch (error) {\n  // An error occurred!\n}\n")))),Object(r.b)("p",null,"On the ",Object(r.b)("inlineCode",{parentName:"p"},"soundObject")," reference, the following API is provided:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"soundObject.setOnMetadataUpdate(onMetadataUpdate)")," ",Object(r.b)("em",{parentName:"p"},"[iOS only]"),"\nSets a function to be called whenever the metadata (of type ",Object(r.b)("inlineCode",{parentName:"p"},"AVMetadata"),", details below) of the sound object, if any, changes."),Object(r.b)("h4",{parentName:"li",id:"parameters-1"},"Parameters"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"onMetadataUpdate (",Object(r.b)("em",{parentName:"strong"},"function"),")")," -- A function taking a single object of type ",Object(r.b)("inlineCode",{parentName:"li"},"AVMetadata")," (described below) as a parameter."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"soundObject.setOnAudioSampleReceived(callback)"),"\nSets a function to be called during playback, receiving the audio sample as parameter."),Object(r.b)("h4",{parentName:"li",id:"parameters-2"},"Parameters"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"callback (",Object(r.b)("em",{parentName:"strong"},"function"),")")," - A function taking a single object of type ",Object(r.b)("inlineCode",{parentName:"li"},"AudioSample")," (described below) as a parameter.")))),Object(r.b)("p",null,"The rest of the API for ",Object(r.b)("inlineCode",{parentName:"p"},"Audio.Sound")," is the same as the imperative playback API for ",Object(r.b)("inlineCode",{parentName:"p"},"Video"),"-- see the ",Object(r.b)("a",{parentName:"p",href:"/versions/v45.0.0/sdk/av/"},"AV documentation")," for further information:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"soundObject.loadAsync(source, initialStatus = {}, downloadFirst = true)"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"soundObject.unloadAsync()"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"soundObject.getStatusAsync()"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"soundObject.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate)"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"soundObject.setStatusAsync(statusToSet)"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"soundObject.playAsync()"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"soundObject.replayAsync()"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"soundObject.pauseAsync()"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"soundObject.stopAsync()"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"soundObject.setPositionAsync(millis)"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"soundObject.setRateAsync(value, shouldCorrectPitch, pitchCorrectionQuality)"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"soundObject.setVolumeAsync(value)"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"soundObject.setIsMutedAsync(value)"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"soundObject.setIsLoopingAsync(value)"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"soundObject.setProgressUpdateIntervalAsync(millis)")))),Object(r.b)("h2",{id:"avmetadata"},Object(r.b)("inlineCode",{parentName:"h2"},"AVMetadata")),Object(r.b)("p",null,"Object passed to the ",Object(r.b)("inlineCode",{parentName:"p"},"onMetadataUpdate")," function. It has the following keys:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"title"),": a string with the title of the sound object. This key is optional.")),Object(r.b)("h2",{id:"audiosample"},Object(r.b)("inlineCode",{parentName:"h2"},"AudioSample")),Object(r.b)("p",null,"Object passed to the ",Object(r.b)("inlineCode",{parentName:"p"},"onAudioSampleReceived")," function. Represents a single sample from an audio source. The sample contains all frames (PCM Buffer values) for each channel of the audio, so if the audio is ",Object(r.b)("em",{parentName:"p"},"stereo")," (interleaved), there will be two channels, one for left and one for right audio."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"channels")," - an array representing the data from each channel in PCM Buffer format. Array elements are objects in the following format: ",Object(r.b)("inlineCode",{parentName:"li"},"{ frames: number[] }"),", where each frame is a number in PCM Buffer format (",Object(r.b)("inlineCode",{parentName:"li"},"-1")," to ",Object(r.b)("inlineCode",{parentName:"li"},"1")," range)."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"timestamp")," - a number representing the timestamp of the current sample in seconds, relative to the audio track's timeline.",Object(r.b)("blockquote",{parentName:"li"},Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"Known issue:")," When using the ",Object(r.b)("inlineCode",{parentName:"p"},"ExoPlayer")," Android implementation, the timestamp is always ",Object(r.b)("inlineCode",{parentName:"p"},"-1"),".")))),Object(r.b)("h2",{id:"recording-sounds-1"},"Recording sounds"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"Notes on web usage:")),Object(r.b)("ul",{parentName:"blockquote"},Object(r.b)("li",{parentName:"ul"},"A MediaRecorder issue on Chrome produces WebM files missing the duration metadata. ",Object(r.b)("a",{parentName:"li",href:"https://bugs.chromium.org/p/chromium/issues/detail?id=642012"},"See the open Chromium issue")),Object(r.b)("li",{parentName:"ul"},"MediaRecorder encoding options and other configurations are inconsistent across browsers, utilising a Polyfill such as ",Object(r.b)("a",{parentName:"li",href:"https://github.com/kbumsik/opus-media-recorder"},"kbumsik/opus-media-recorder")," or ",Object(r.b)("a",{parentName:"li",href:"https://github.com/ai/audio-recorder-polyfill"},"ai/audio-recorder-polyfill")," in your application will improve your experience. Any options passed to ",Object(r.b)("inlineCode",{parentName:"li"},"prepareToRecordAsync")," will be passed directly to the MediaRecorder API and as such the polyfill."),Object(r.b)("li",{parentName:"ul"},"Web browsers require sites to be served securely in order for them to listen to a mic. See ",Object(r.b)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#security"},"MediaDevices#getUserMedia Security")," for more details."))),Object(r.b)("h3",{id:"audiorecording"},Object(r.b)("inlineCode",{parentName:"h3"},"Audio.Recording")),Object(r.b)("p",null,"This class represents an audio recording. After creating an instance of this class, ",Object(r.b)("inlineCode",{parentName:"p"},"prepareToRecordAsync")," must be called in order to record audio. Once recording is finished, call ",Object(r.b)("inlineCode",{parentName:"p"},"stopAndUnloadAsync"),". Note that only one recorder is allowed to exist in the state between ",Object(r.b)("inlineCode",{parentName:"p"},"prepareToRecordAsync")," and ",Object(r.b)("inlineCode",{parentName:"p"},"stopAndUnloadAsync")," at any given time."),Object(r.b)("p",null,"Note that your experience must request audio recording permissions in order for recording to function. See the ",Object(r.b)("a",{parentName:"p",href:"/versions/v45.0.0/sdk/permissions/"},Object(r.b)("inlineCode",{parentName:"a"},"Permissions")," module")," for more details. Additionally, audio recording is ",Object(r.b)("a",{parentName:"p",href:"/workflow/ios-simulator/#limitations"},"not supported in the iOS Simulator"),"."),Object(r.b)("h4",{id:"returns-6"},"Returns"),Object(r.b)("p",null,"A newly constructed instance of ",Object(r.b)("inlineCode",{parentName:"p"},"Audio.Recording"),"."),Object(r.b)("h4",{id:"example-2"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"const recording = new Audio.Recording();\ntry {\n  await recording.prepareToRecordAsync(Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY);\n  await recording.startAsync();\n  // You are now recording!\n} catch (error) {\n  // An error occurred!\n}\n")),Object(r.b)("p",null,"A static convenience method to construct and start a recording is also provided:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.Recording.createAsync(options, onRecordingStatusUpdate = null, progressUpdateIntervalMillis = null)")),Object(r.b)("p",{parentName:"li"},"Creates and starts a recording using the given options, with optional ",Object(r.b)("inlineCode",{parentName:"p"},"onRecordingStatusUpdate")," and ",Object(r.b)("inlineCode",{parentName:"p"},"progressUpdateIntervalMillis"),"."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"const { recording, status } = await Audio.Recording.createAsync(\n  options,\n  onRecordingStatusUpdate,\n  progressUpdateIntervalMillis\n);\n\n// Which is equivalent to the following:\nconst recording = new Audio.Recording();\nawait recording.prepareToRecordAsync(options);\nrecording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\nawait recording.startAsync();\n")),Object(r.b)("h4",{parentName:"li",id:"parameters-3"},"Parameters"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"options (",Object(r.b)("em",{parentName:"strong"},"RecordingOptions"),")")," -- Options for the recording, including sample rate, bitrate, channels, format, encoder, and extension. If no options are passed to, the recorder will be created with options ",Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTIONS_PRESET_LOW_QUALITY"),". See below for details on ",Object(r.b)("inlineCode",{parentName:"p"},"RecordingOptions"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"onRecordingStatusUpdate (",Object(r.b)("em",{parentName:"strong"},"function"),")")," -- A function taking a single parameter ",Object(r.b)("inlineCode",{parentName:"p"},"status")," (a dictionary, described in ",Object(r.b)("inlineCode",{parentName:"p"},"getStatusAsync"),").")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"progressUpdateIntervalMillis (",Object(r.b)("em",{parentName:"strong"},"number"),")")," -- The interval between calls of ",Object(r.b)("inlineCode",{parentName:"p"},"onRecordingStatusUpdate"),". This value defaults to 500 milliseconds."))),Object(r.b)("h4",{parentName:"li",id:"returns-7"},"Returns"),Object(r.b)("p",{parentName:"li"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"Promise")," that is rejected if creation failed, or fulfilled with the following dictionary if creation succeeded:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"recording")," : the newly created and started ",Object(r.b)("inlineCode",{parentName:"li"},"Recording")," object."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"status")," : the ",Object(r.b)("inlineCode",{parentName:"li"},"RecordingStatus")," of the ",Object(r.b)("inlineCode",{parentName:"li"},"Recording")," object. See the ",Object(r.b)("a",{parentName:"li",href:"/versions/v45.0.0/sdk/av/"},"AV documentation")," for further information.")),Object(r.b)("h4",{parentName:"li",id:"example-3"},"Example"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"try {\n  const { recording: recordingObject, status } = await Audio.Recording.createAsync(\n    Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY\n  );\n  // You are now recording!\n} catch (error) {\n  // An error occurred!\n}\n"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"recordingInstance.getStatusAsync()")),Object(r.b)("p",{parentName:"li"},"Gets the ",Object(r.b)("inlineCode",{parentName:"p"},"status")," of the ",Object(r.b)("inlineCode",{parentName:"p"},"Recording"),"."),Object(r.b)("h4",{parentName:"li",id:"returns-8"},"Returns"),Object(r.b)("p",{parentName:"li"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"Promise")," that is resolved with the ",Object(r.b)("inlineCode",{parentName:"p"},"status")," of the ",Object(r.b)("inlineCode",{parentName:"p"},"Recording"),": a dictionary with the following key-value pairs."),Object(r.b)("p",{parentName:"li"},"Before ",Object(r.b)("inlineCode",{parentName:"p"},"prepareToRecordAsync")," is called, the ",Object(r.b)("inlineCode",{parentName:"p"},"status")," will be as follows:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"canRecord")," : a boolean set to ",Object(r.b)("inlineCode",{parentName:"li"},"false"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"isDoneRecording")," : a boolean set to ",Object(r.b)("inlineCode",{parentName:"li"},"false"),".")),Object(r.b)("p",{parentName:"li"},"After ",Object(r.b)("inlineCode",{parentName:"p"},"prepareToRecordAsync()")," is called, but before ",Object(r.b)("inlineCode",{parentName:"p"},"stopAndUnloadAsync()")," is called, the ",Object(r.b)("inlineCode",{parentName:"p"},"status")," will be as follows:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"canRecord")," : a boolean set to ",Object(r.b)("inlineCode",{parentName:"li"},"true"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"isRecording")," : a boolean describing if the ",Object(r.b)("inlineCode",{parentName:"li"},"Recording")," is currently recording."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"durationMillis")," : the current duration of the recorded audio."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"metering")," : a number that's the most recent reading of the loudness in dB. The value ranges from \u2013160 dBFS, indicating minimum power, to 0 dBFS, indicating maximum power. Present or not based on Recording options. See ",Object(r.b)("inlineCode",{parentName:"li"},"RecordingOptions")," for more information."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"mediaServicesDidReset")," : (iOS only) a boolean indictating whether media services were reset during recording. This may occur if the active input ceases to be available during recording (example: airpods are the active input and they run out of batteries during recording.)")),Object(r.b)("p",{parentName:"li"},"After ",Object(r.b)("inlineCode",{parentName:"p"},"stopAndUnloadAsync()")," is called, the ",Object(r.b)("inlineCode",{parentName:"p"},"status")," will be as follows:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"canRecord")," : a boolean set to ",Object(r.b)("inlineCode",{parentName:"li"},"false"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"isDoneRecording")," : a boolean set to ",Object(r.b)("inlineCode",{parentName:"li"},"true"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"durationMillis")," : the final duration of the recorded audio."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"recordingInstance.setOnRecordingStatusUpdate(onRecordingStatusUpdate)")),Object(r.b)("p",{parentName:"li"},"Sets a function to be called regularly with the ",Object(r.b)("inlineCode",{parentName:"p"},"status")," of the ",Object(r.b)("inlineCode",{parentName:"p"},"Recording"),". See ",Object(r.b)("inlineCode",{parentName:"p"},"getStatusAsync()")," for details on ",Object(r.b)("inlineCode",{parentName:"p"},"status"),"."),Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"onRecordingStatusUpdate")," will be called when another call to the API for this recording completes (such as ",Object(r.b)("inlineCode",{parentName:"p"},"prepareToRecordAsync()"),", ",Object(r.b)("inlineCode",{parentName:"p"},"startAsync()"),", ",Object(r.b)("inlineCode",{parentName:"p"},"getStatusAsync()"),", or ",Object(r.b)("inlineCode",{parentName:"p"},"stopAndUnloadAsync()"),"), and will also be called at regular intervals while the recording can record. Call ",Object(r.b)("inlineCode",{parentName:"p"},"setProgressUpdateInterval()")," to modify the interval with which ",Object(r.b)("inlineCode",{parentName:"p"},"onRecordingStatusUpdate")," is called while the recording can record."),Object(r.b)("h4",{parentName:"li",id:"parameters-4"},"Parameters"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"onRecordingStatusUpdate (",Object(r.b)("em",{parentName:"strong"},"function"),")")," -- A function taking a single parameter ",Object(r.b)("inlineCode",{parentName:"li"},"status")," (a dictionary, described in ",Object(r.b)("inlineCode",{parentName:"li"},"getStatusAsync"),")."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"recordingInstance.setProgressUpdateInterval(millis)")),Object(r.b)("p",{parentName:"li"},"Sets the interval with which ",Object(r.b)("inlineCode",{parentName:"p"},"onRecordingStatusUpdate")," is called while the recording can record. See ",Object(r.b)("inlineCode",{parentName:"p"},"setOnRecordingStatusUpdate")," for details. This value defaults to 500 milliseconds."),Object(r.b)("h4",{parentName:"li",id:"parameters-5"},"Parameters"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"millis (",Object(r.b)("em",{parentName:"strong"},"number"),")")," -- The new interval between calls of ",Object(r.b)("inlineCode",{parentName:"li"},"onRecordingStatusUpdate"),"."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"recordingInstance.prepareToRecordAsync(options)")),Object(r.b)("p",{parentName:"li"},"Loads the recorder into memory and prepares it for recording. This must be called before calling ",Object(r.b)("inlineCode",{parentName:"p"},"startAsync()"),". This method can only be called if the ",Object(r.b)("inlineCode",{parentName:"p"},"Recording")," instance has never yet been prepared."),Object(r.b)("h4",{parentName:"li",id:"parameters-6"},"Parameters"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"options (",Object(r.b)("em",{parentName:"strong"},"RecordingOptions"),")")," -- Options for the recording, including sample rate, bitrate, channels, format, encoder, and extension. If no options are passed to ",Object(r.b)("inlineCode",{parentName:"li"},"prepareToRecordAsync()"),", the recorder will be created with options ",Object(r.b)("inlineCode",{parentName:"li"},"Audio.RECORDING_OPTIONS_PRESET_LOW_QUALITY"),". See below for details on ",Object(r.b)("inlineCode",{parentName:"li"},"RecordingOptions"),".")),Object(r.b)("h4",{parentName:"li",id:"returns-9"},"Returns"),Object(r.b)("p",{parentName:"li"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"Promise")," that is fulfilled when the recorder is loaded and prepared, or rejects if this failed. If another ",Object(r.b)("inlineCode",{parentName:"p"},"Recording")," exists in your experience that is currently prepared to record, the ",Object(r.b)("inlineCode",{parentName:"p"},"Promise")," will reject. If the ",Object(r.b)("inlineCode",{parentName:"p"},"RecordingOptions")," provided are invalid, the ",Object(r.b)("inlineCode",{parentName:"p"},"Promise")," will also reject. The promise is resolved with the ",Object(r.b)("inlineCode",{parentName:"p"},"status")," of the recording (see ",Object(r.b)("inlineCode",{parentName:"p"},"getStatusAsync()")," for details).")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"recordingInstance.getAvailableInputs()")),Object(r.b)("p",{parentName:"li"},"Returns a list of available recording inputs. This method can only be called if the ",Object(r.b)("inlineCode",{parentName:"p"},"Recording")," has been prepared."),Object(r.b)("h4",{parentName:"li",id:"returns-10"},"Returns"),Object(r.b)("p",{parentName:"li"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"Promise")," that is fulfilled with an array of ",Object(r.b)("inlineCode",{parentName:"p"},"RecordingInput")," objects with ",Object(r.b)("inlineCode",{parentName:"p"},"name"),", ",Object(r.b)("inlineCode",{parentName:"p"},"uid")," and ",Object(r.b)("inlineCode",{parentName:"p"},"type")," params.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"recordingInstance.getCurrentInput()")),Object(r.b)("p",{parentName:"li"},"Returns a the currently-selected recording input. This method can only be called if the ",Object(r.b)("inlineCode",{parentName:"p"},"Recording")," has been prepared."),Object(r.b)("h4",{parentName:"li",id:"returns-11"},"Returns"),Object(r.b)("p",{parentName:"li"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"Promise")," that is fulfilled with a ",Object(r.b)("inlineCode",{parentName:"p"},"RecordingInput")," objects with ",Object(r.b)("inlineCode",{parentName:"p"},"name"),", ",Object(r.b)("inlineCode",{parentName:"p"},"uid")," and ",Object(r.b)("inlineCode",{parentName:"p"},"type")," params.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"recordingInstance.setInput(inputUid)")),Object(r.b)("p",{parentName:"li"},"Sets the current recording input."),Object(r.b)("h4",{parentName:"li",id:"parameters-7"},"Parameters"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"inputUid (",Object(r.b)("em",{parentName:"strong"},"string"),")")," -- The uid of a ",Object(r.b)("inlineCode",{parentName:"li"},"RecordingInput"),".")),Object(r.b)("h4",{parentName:"li",id:"returns-12"},"Returns"),Object(r.b)("p",{parentName:"li"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"Promise")," that is resolved if successful or rejected if not.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"recordingInstance.startAsync()")),Object(r.b)("p",{parentName:"li"},"Begins recording. This method can only be called if the ",Object(r.b)("inlineCode",{parentName:"p"},"Recording")," has been prepared."),Object(r.b)("h4",{parentName:"li",id:"returns-13"},"Returns"),Object(r.b)("p",{parentName:"li"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"Promise")," that is fulfilled when recording has begun, or rejects if recording could not start. The promise is resolved with the ",Object(r.b)("inlineCode",{parentName:"p"},"status")," of the recording (see ",Object(r.b)("inlineCode",{parentName:"p"},"getStatusAsync()")," for details).")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"recordingInstance.pauseAsync()")),Object(r.b)("p",{parentName:"li"},"Pauses recording. This method can only be called if the ",Object(r.b)("inlineCode",{parentName:"p"},"Recording")," has been prepared."),Object(r.b)("p",{parentName:"li"},"NOTE: This is only available on Android API version 24 and later."),Object(r.b)("h4",{parentName:"li",id:"returns-14"},"Returns"),Object(r.b)("p",{parentName:"li"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"Promise")," that is fulfilled when recording has paused, or rejects if recording could not be paused. If the Android API version is less than 24, the ",Object(r.b)("inlineCode",{parentName:"p"},"Promise")," will reject. The promise is resolved with the ",Object(r.b)("inlineCode",{parentName:"p"},"status")," of the recording (see ",Object(r.b)("inlineCode",{parentName:"p"},"getStatusAsync()")," for details).")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"recordingInstance.stopAndUnloadAsync()")),Object(r.b)("p",{parentName:"li"},"Stops the recording and deallocates the recorder from memory. This reverts the ",Object(r.b)("inlineCode",{parentName:"p"},"Recording")," instance to an unprepared state, and another ",Object(r.b)("inlineCode",{parentName:"p"},"Recording")," instance must be created in order to record again. This method can only be called if the ",Object(r.b)("inlineCode",{parentName:"p"},"Recording")," has been prepared."),Object(r.b)("p",{parentName:"li"},"NOTE: On Android this method may fail with ",Object(r.b)("inlineCode",{parentName:"p"},"E_AUDIO_NODATA")," when called too soon after ",Object(r.b)("inlineCode",{parentName:"p"},"startAsync")," and no audio data has been recorded yet. In that case the recorded file will be invalid and should be discarded."),Object(r.b)("h4",{parentName:"li",id:"returns-15"},"Returns"),Object(r.b)("p",{parentName:"li"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"Promise")," that is fulfilled when recording has stopped, or rejects if recording could not be stopped. The promise is resolved with the ",Object(r.b)("inlineCode",{parentName:"p"},"status")," of the recording (see ",Object(r.b)("inlineCode",{parentName:"p"},"getStatusAsync()")," for details).")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"recordingInstance.getURI()")),Object(r.b)("p",{parentName:"li"},"Gets the local URI of the ",Object(r.b)("inlineCode",{parentName:"p"},"Recording"),". Note that this will only succeed once the ",Object(r.b)("inlineCode",{parentName:"p"},"Recording")," is prepared to record. On web, this will not return the URI until the recording is finished."),Object(r.b)("h4",{parentName:"li",id:"returns-16"},"Returns"),Object(r.b)("p",{parentName:"li"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"string")," with the local URI of the ",Object(r.b)("inlineCode",{parentName:"p"},"Recording"),", or ",Object(r.b)("inlineCode",{parentName:"p"},"null")," if the ",Object(r.b)("inlineCode",{parentName:"p"},"Recording")," is not prepared to record (or, on Web, if the recording has not finished).")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"recordingInstance.createNewLoadedSoundAsync()")),Object(r.b)("p",{parentName:"li"},"Creates and loads a new ",Object(r.b)("inlineCode",{parentName:"p"},"Sound")," object to play back the ",Object(r.b)("inlineCode",{parentName:"p"},"Recording"),". Note that this will only succeed once the ",Object(r.b)("inlineCode",{parentName:"p"},"Recording")," is done recording (once ",Object(r.b)("inlineCode",{parentName:"p"},"stopAndUnloadAsync()")," has been called)."),Object(r.b)("h4",{parentName:"li",id:"parameters-8"},"Parameters"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"initialStatus (",Object(r.b)("em",{parentName:"strong"},"PlaybackStatusToSet"),")")," -- The initial intended ",Object(r.b)("inlineCode",{parentName:"p"},"PlaybackStatusToSet")," of the sound, whose values will override the default initial playback status. This value defaults to ",Object(r.b)("inlineCode",{parentName:"p"},"{}")," if no parameter is passed. See the ",Object(r.b)("a",{parentName:"p",href:"/versions/v45.0.0/sdk/av/"},"AV documentation")," for details on ",Object(r.b)("inlineCode",{parentName:"p"},"PlaybackStatusToSet")," and the default initial playback status.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"onPlaybackStatusUpdate (",Object(r.b)("em",{parentName:"strong"},"function"),")")," -- A function taking a single parameter ",Object(r.b)("inlineCode",{parentName:"p"},"PlaybackStatus"),". This value defaults to ",Object(r.b)("inlineCode",{parentName:"p"},"null")," if no parameter is passed. See the ",Object(r.b)("a",{parentName:"p",href:"/versions/v45.0.0/sdk/av/"},"AV documentation")," for details on the functionality provided by ",Object(r.b)("inlineCode",{parentName:"p"},"onPlaybackStatusUpdate")))),Object(r.b)("h4",{parentName:"li",id:"returns-17"},"Returns"),Object(r.b)("p",{parentName:"li"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"Promise")," that is rejected if creation failed, or fulfilled with the following dictionary if creation succeeded:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"sound")," : the newly created and loaded ",Object(r.b)("inlineCode",{parentName:"li"},"Sound")," object."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"status")," : the ",Object(r.b)("inlineCode",{parentName:"li"},"PlaybackStatus")," of the ",Object(r.b)("inlineCode",{parentName:"li"},"Sound")," object. See the ",Object(r.b)("a",{parentName:"li",href:"/versions/v45.0.0/sdk/av/"},"AV documentation")," for further information.")))),Object(r.b)("h3",{id:"recordingoptions"},Object(r.b)("inlineCode",{parentName:"h3"},"RecordingOptions")),Object(r.b)("p",null,"The recording extension, sample rate, bitrate, channels, format, encoder, etc can be customized by passing a dictionary of options to ",Object(r.b)("inlineCode",{parentName:"p"},"prepareToRecordAsync()"),"."),Object(r.b)("p",null,"We provide the following preset options for convenience, as used in the example above. See below for the definitions of these presets."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTIONS_PRESET_LOW_QUALITY")))),Object(r.b)("p",null,"We also provide the ability to define your own custom recording options, but ",Object(r.b)("strong",{parentName:"p"},"we recommend you use the presets, as not all combinations of options will allow you to successfully ",Object(r.b)("inlineCode",{parentName:"strong"},"prepareToRecordAsync()"),".")," You will have to test your custom options on iOS and Android to make sure it's working. In the future, we will enumerate all possible valid combinations, but at this time, our goal is to make the basic use-case easy (with presets) and the advanced use-case possible (by exposing all the functionality available in native). As always, feel free to ping us on the forums or Slack with any questions."),Object(r.b)("p",null,"In order to define your own custom recording options, you must provide a dictionary of the following key value pairs."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"isMeteringEnabled"),' : a boolean that determines whether audio level information will be part of the status object under the "metering" key.')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"keepAudioActiveHint")," : a boolean that hints to keep the audio active after ",Object(r.b)("inlineCode",{parentName:"p"},"prepareToRecordAsync")," completes. Setting this value can improve the speed at which the recording starts. Only set this value to ",Object(r.b)("inlineCode",{parentName:"p"},"true")," when you call ",Object(r.b)("inlineCode",{parentName:"p"},"startAsync")," immediately after ",Object(r.b)("inlineCode",{parentName:"p"},"prepareToRecordAsync"),". This value is automatically set when using ",Object(r.b)("inlineCode",{parentName:"p"},"Audio.recording.createAsync()"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"android")," : a dictionary of key-value pairs for the Android platform. This key is required."),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"extension")," : the desired file extension. This key is required. Example valid values are ",Object(r.b)("inlineCode",{parentName:"p"},".3gp")," and ",Object(r.b)("inlineCode",{parentName:"p"},".m4a"),". For more information, see the ",Object(r.b)("a",{parentName:"p",href:"https://developer.android.com/guide/topics/media/media-formats.html"},"Android docs for supported output formats"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"outputFormat")," : the desired file format. This key is required. See the next section for an enumeration of all valid values of ",Object(r.b)("inlineCode",{parentName:"p"},"outputFormat"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"audioEncoder")," : the desired audio encoder. This key is required. See the next section for an enumeration of all valid values of ",Object(r.b)("inlineCode",{parentName:"p"},"audioEncoder"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"sampleRate")," : the desired sample rate. This key is optional. An example valid value is ",Object(r.b)("inlineCode",{parentName:"p"},"44100"),"."),Object(r.b)("p",{parentName:"li"},"Note that the sampling rate depends on the format for the audio recording, as well as the capabilities of the platform. For instance, the sampling rate supported by AAC audio coding standard ranges from 8 to 96 kHz, the sampling rate supported by AMRNB is 8kHz, and the sampling rate supported by AMRWB is 16kHz. Please consult with the related audio coding standard for the supported audio sampling rate.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"numberOfChannels")," : the desired number of channels. This key is optional. Example valid values are ",Object(r.b)("inlineCode",{parentName:"p"},"1")," and ",Object(r.b)("inlineCode",{parentName:"p"},"2"),"."),Object(r.b)("p",{parentName:"li"},"Note that ",Object(r.b)("inlineCode",{parentName:"p"},"prepareToRecordAsync()")," may perform additional checks on the parameter to make sure whether the specified number of audio channels are applicable.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"bitRate")," : the desired bit rate. This key is optional. An example valid value is ",Object(r.b)("inlineCode",{parentName:"p"},"128000"),"."),Object(r.b)("p",{parentName:"li"},"Note that ",Object(r.b)("inlineCode",{parentName:"p"},"prepareToRecordAsync()")," may perform additional checks on the parameter to make sure whether the specified bit rate is applicable, and sometimes the passed bitRate will be clipped internally to ensure the audio recording can proceed smoothly based on the capabilities of the platform.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"maxFileSize")," : the desired maximum file size in bytes, after which the recording will stop (but ",Object(r.b)("inlineCode",{parentName:"p"},"stopAndUnloadAsync()")," must still be called after this point). This key is optional. An example valid value is ",Object(r.b)("inlineCode",{parentName:"p"},"65536"),".")))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"ios")," : a dictionary of key-value pairs for the iOS platform"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"extension")," : the desired file extension. This key is required. An example valid value is ",Object(r.b)("inlineCode",{parentName:"p"},".caf"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"outputFormat")," : the desired file format. This key is optional. See the next section for an enumeration of all valid values of ",Object(r.b)("inlineCode",{parentName:"p"},"outputFormat"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"audioQuality")," : the desired audio quality. This key is required. See the next section for an enumeration of all valid values of ",Object(r.b)("inlineCode",{parentName:"p"},"audioQuality"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"sampleRate")," : the desired sample rate. This key is required. An example valid value is ",Object(r.b)("inlineCode",{parentName:"p"},"44100"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"numberOfChannels")," : the desired number of channels. This key is required. Example valid values are ",Object(r.b)("inlineCode",{parentName:"p"},"1")," and ",Object(r.b)("inlineCode",{parentName:"p"},"2"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"bitRate")," : the desired bit rate. This key is required. An example valid value is ",Object(r.b)("inlineCode",{parentName:"p"},"128000"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"bitRateStrategy")," : the desired bit rate strategy. This key is optional. See the next section for an enumeration of all valid values of ",Object(r.b)("inlineCode",{parentName:"p"},"bitRateStrategy"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"bitDepthHint")," : the desired bit depth hint. This key is optional. An example valid value is ",Object(r.b)("inlineCode",{parentName:"p"},"16"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"linearPCMBitDepth")," : the desired PCM bit depth. This key is optional. An example valid value is ",Object(r.b)("inlineCode",{parentName:"p"},"16"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"linearPCMIsBigEndian")," : a boolean describing if the PCM data should be formatted in big endian. This key is optional.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"linearPCMIsFloat")," : a boolean describing if the PCM data should be encoded in floating point or integral values. This key is optional."))))),Object(r.b)("p",null,"Following is an enumeration of all of the valid values for certain ",Object(r.b)("inlineCode",{parentName:"p"},"RecordingOptions")," keys."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"Note")," Not all of the iOS formats included in this list of constants are currently supported by iOS, in spite of appearing in the Apple source code. For an accurate list of formats supported by iOS, see ",Object(r.b)("a",{parentName:"p",href:"https://developer.apple.com/library/content/documentation/MusicAudio/Conceptual/CoreAudioOverview/CoreAudioEssentials/CoreAudioEssentials.html#//apple_ref/doc/uid/TP40003577-CH10-SW26"},"Core Audio Codecs")," and ",Object(r.b)("a",{parentName:"p",href:"https://developer.apple.com/library/content/documentation/MusicAudio/Conceptual/CoreAudioOverview/CoreAudioEssentials/CoreAudioEssentials.html#//apple_ref/doc/uid/TP40003577-CH10-SW57"},"iPhone Audio File Formats"),".")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"android")," :"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"outputFormat")," :"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM"))))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"audioEncoder")," :"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD"))))))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"ios")," :"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"outputFormat")," :"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3"))))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"audioQuality")," :"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX"))))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"bitRateStrategy")," :"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Audio.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE")))))))),Object(r.b)("p",null,"For reference, following are the definitions of the two preset examples of ",Object(r.b)("inlineCode",{parentName:"p"},"RecordingOptions"),", as implemented in the Audio SDK:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"export const RECORDING_OPTIONS_PRESET_HIGH_QUALITY: RecordingOptions = {\n  isMeteringEnabled: true,\n  android: {\n    extension: '.m4a',\n    outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4,\n    audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n  },\n  ios: {\n    extension: '.caf',\n    audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n    linearPCMBitDepth: 16,\n    linearPCMIsBigEndian: false,\n    linearPCMIsFloat: false,\n  },\n};\n\nexport const RECORDING_OPTIONS_PRESET_LOW_QUALITY: RecordingOptions = {\n  isMeteringEnabled: true,\n  android: {\n    extension: '.3gp',\n    outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP,\n    audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n  },\n  ios: {\n    extension: '.caf',\n    audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n    linearPCMBitDepth: 16,\n    linearPCMIsBigEndian: false,\n    linearPCMIsFloat: false,\n  },\n};\n")))}O.isMDXComponent=!0},"5BX9":function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o})),n.d(t,"c",(function(){return l}));var a=n("q1tI"),i=n("AeFk"),r=Object(a.createContext)({version:"latest",hasVersion:!1,setVersion:function(e){throw new Error("PageApiVersionContext not found")}});function o(e){var t=p(e.router.pathname),n=null!==t,o=Object(a.useCallback)((function(t){e.router.push(function(e,t){var n=p(e);return n?e.replace(n,t):e}(e.router.pathname,t))}),[]);return Object(i.c)(r.Provider,{value:{setVersion:o,hasVersion:n,version:t||"latest"}},e.children)}function l(){return Object(a.useContext)(r)}function p(e){return function(e){return e.startsWith("/versions/")}(e)?e.split("/",3).pop():null}},"6FTQ":function(e,t,n){"use strict";function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}n.d(t,"a",(function(){return a}))},"8rE2":function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var a=n("6FTQ");function i(e,t){if(e){if("string"===typeof e)return Object(a.a)(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Object(a.a)(e,t):void 0}}},I0q5:function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var a=n("z7pX"),i=n("H+61"),r=n("UlJF"),o=n("+Css"),l=n("7LId"),p=n("VIvw"),b=n("iHvq"),c=n("cpVT"),s=n("q1tI"),d=n("ufKf"),O=n("3zh3"),u=n("AeFk"),m=function(e){var t=e.size,n=void 0===t?24:t,a=e.stroke,i=void 0===a?O.palette.dark.white:a;return Object(u.c)("svg",{"aria-label":"check",width:n,height:n,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg"},Object(u.c)("path",{d:"M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6m4-3h6v6m-11 5L21 3",stroke:i,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"}))},N=n("5BX9");function j(e){var t=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,a=Object(b.a)(e);if(t){var i=Object(b.a)(this).constructor;n=Reflect.construct(a,arguments,i)}else n=a.apply(this,arguments);return Object(p.a)(this,n)}}var h="v".concat(n("kiQV").version),f=function(e){Object(l.a)(n,e);var t=j(n);function n(){var e;Object(i.a)(this,n);for(var r=arguments.length,l=new Array(r),p=0;p<r;p++)l[p]=arguments[p];return e=t.call.apply(t,[this].concat(l)),Object(c.a)(Object(o.a)(e),"contentRef",s.createRef()),Object(c.a)(Object(o.a)(e),"state",{ready:!1}),Object(c.a)(Object(o.a)(e),"getSelectedDocsVersion",(function(){var t=e.context.version;return"latest"===t?h:t})),Object(c.a)(Object(o.a)(e),"getSnackSdkVersion",(function(){var t=e.getSelectedDocsVersion();return"unversioned"===t&&(t=h),t.replace("v","")})),Object(c.a)(Object(o.a)(e),"getExamplesPath",(function(){return"".concat(document.location.origin,"/static/examples/").concat(e.getSelectedDocsVersion())})),Object(c.a)(Object(o.a)(e),"getDependencies",(function(){return Object(a.a)(e.props.dependencies).join(",")})),Object(c.a)(Object(o.a)(e),"getCode",(function(){return(e.contentRef.current&&e.contentRef.current.textContent||"").replace(/%%placeholder-start%%.*%%placeholder-end%%/g,"")})),e}return Object(r.a)(n,[{key:"componentDidMount",value:function(){this.setState({ready:!0})}},{key:"render",value:function(){return Object(u.c)("div",null,Object(u.c)("div",{ref:this.contentRef,style:this.props.contentHidden?{display:"none"}:void 0},this.props.children),Object(u.c)("form",{action:d.a,method:"POST",target:"_blank"},Object(u.c)("input",{type:"hidden",name:"platform",value:this.props.defaultPlatform||"android"}),Object(u.c)("input",{type:"hidden",name:"name",value:this.props.label||"Example"}),Object(u.c)("input",{type:"hidden",name:"dependencies",value:this.getDependencies()}),Object(u.c)("input",{type:"hidden",name:"sdkVersion",value:this.getSnackSdkVersion()}),this.props.platforms&&Object(u.c)("input",{type:"hidden",name:"supportedPlatforms",value:this.props.platforms.join(",")}),this.state.ready&&Object(u.c)("input",{type:"hidden",name:"files",value:JSON.stringify(Object(d.b)({templateId:this.props.templateId,code:this.getCode(),files:this.props.files,baseURL:this.getExamplesPath()}))}),Object(u.c)("button",{className:"snack-inline-example-button",disabled:!this.state.ready},Object(u.c)(m,{size:16})," ",this.props.buttonTitle||"Try this example on Snack")))}}]),n}(s.Component);Object(c.a)(f,"contextType",N.a),Object(c.a)(f,"defaultProps",{dependencies:[]})},Yvrn:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/versions/v45.0.0/sdk/audio",function(){return n("0TlU")}])},cpVT:function(e,t,n){"use strict";function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,"a",(function(){return a}))},kiQV:function(e){e.exports=JSON.parse('{"name":"expo-docs","version":"44.0.0","private":true,"scripts":{"dev":"rimraf .next/preval && next dev -p 3002","build":"cross-env NODE_OPTIONS=--max-old-space-size=8192 next build","export":"yarn run build && next export && yarn run export-issue-404","export-issue-404":"echo \\"\ud83d\udee0  Patching https://github.com/vercel/next.js/issues/16528\\"; cp out/404/index.html out/404.html","export-server":"http-server out -p 8000","import-react-native-docs":"node ./scripts/import-react-native-docs.js","test-links":"node --async-stack-traces --unhandled-rejections=strict ./scripts/test-links.js","prettier":"prettier --write \'**/*.{js,ts,tsx,md}\'","lint":"tsc --noEmit && eslint .","lint-links":"remark -u validate-links ./pages","watch":"tsc --noEmit -w","test":"jest","schema-sync":"node --async-stack-traces --unhandled-rejections=strict ./scripts/schema-sync.js","remove-version":"node --unhandled-rejections=strict ./scripts/remove-version.js"},"resolutions":{"webpack":"^5.28.0"},"dependencies":{"@emotion/react":"^11.4.0","@expo/spawn-async":"^1.5.0","@expo/styleguide":"^4.0.1","@mdx-js/loader":"^1.6.22","@mdx-js/mdx":"^1.6.22","@mdx-js/react":"^1.6.22","@mdx-js/runtime":"^1.6.22","@reach/tabs":"^0.15.0","@sentry/browser":"^5.6.1","date-fns":"^2.28.0","docsearch.js":"^2.5.2","emoji-regex":"^9.2.2","front-matter":"^2.3.0","fs-extra":"^6.0.1","github-slugger":"^1.3.0","hotshot":"^1.0.5","lodash":"^4.17.20","next":"^11.1.4","nprogress":"0.2.0","path-browserify":"^1.0.1","prism-react-renderer":"1.0.2","prop-types":"15.7.2","react":"^17.0.2","react-diff-view":"^2.4.7","react-dom":"^17.0.2","react-feather":"^2.0.9","react-markdown":"^6.0.3","react-player":"^1.11.1","react-visibility-sensor":"^5.1.1","remark-gfm":"^1.0.0","tippy.js":"^6.3.1"},"devDependencies":{"@apidevtools/json-schema-ref-parser":"^9.0.9","@babel/core":"^7.13.14","@emotion/babel-preset-css-prop":"^11.2.0","@emotion/jest":"^11.7.1","@testing-library/jest-dom":"5.11.0","@testing-library/react":"10.4.3","@testing-library/react-hooks":"^7.0.2","@types/cacache":"^15.0.1","@types/fs-extra":"^9.0.11","@types/github-slugger":"^1.3.0","@types/google.analytics":"^0.0.41","@types/gtag.js":"^0.0.6","@types/lodash":"^4.14.161","@types/long":"^4.0.1","@types/mdx-js__react":"^1.5.3","@types/node":"^14.11.2","@types/nprogress":"^0.2.0","@types/react":"^17.0.11","axios":"^0.21.2","babel-plugin-module-resolver":"3.1.1","babel-plugin-preval":"^3.0.1","cross-env":"^5.2.0","danger":"^9.2.10","esbuild-loader":"^2.13.1","eslint":"^8.6.0","eslint-config-next":"^10.2.3","eslint-config-universe":"^10.0.0","eslint-plugin-lodash":"^7.3.0","http-server":"^0.12.3","jest":"^27.4.7","js-yaml":"^4.1.0","prettier":"^2.3.1","puppeteer":"^10.2.0","react-test-renderer":"^17.0.2","rehype-slug":"^4.0.1","remark-cli":"^9.0.0","remark-frontmatter":"^2.0.0","remark-validate-links":"^10.0.4","rimraf":"^3.0.2","semver":"^7.3.5","sitemap":"^6.3.0","typescript":"^4.5.4","unist-builder":"^2.0.0","unist-util-visit":"^2.0.3"}}')},ufKf:function(e,t,n){"use strict";n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return i}));var a="https://snack.expo.dev";function i(e){var t=e.templateId,n=e.code,a=e.files,i=e.baseURL,r={};return a&&Object.keys(a).forEach((function(e){var t=a[e],n=/\.(jsx?|tsx?|json|md)$/i.test(e);r[e]=n?{type:"CODE",url:t.match(/^https?:\/\//)?t:"".concat(i,"/").concat(t)}:{type:"ASSET",contents:t}})),t?r["App.js"]={type:"CODE",url:"".concat(i,"/").concat(t,".js")}:n&&(r["App.js"]={type:"CODE",contents:n}),r}},z7pX:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var a=n("6FTQ");var i=n("8rE2");function r(e){return function(e){if(Array.isArray(e))return Object(a.a)(e)}(e)||function(e){if("undefined"!==typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Object(i.a)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}}},[["Yvrn",1,0,2,3,4,5,6]]]);