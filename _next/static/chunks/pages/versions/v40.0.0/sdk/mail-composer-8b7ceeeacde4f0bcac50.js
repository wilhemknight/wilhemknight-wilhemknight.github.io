_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[679],{"8Snb":function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return p})),n.d(t,"headings",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n("HALo"),i=n("dhJC"),o=(n("q1tI"),n("7ljp")),r=n("HCau"),s=n("hykZ"),l=n("3iwL"),b=["components"],p={title:"MailComposer",sourceCodeUrl:"https://github.com/expo/expo/tree/sdk-40/packages/expo-mail-composer"},c=[{depth:2,type:"text",title:"Installation"},{depth:2,type:"text",title:"API"},{depth:2,type:"text",title:"Methods"},{depth:3,type:"inlineCode",title:"MailComposer.composeAsync(options)"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"MailComposer.isAvailableAsync()"},{depth:4,type:"text",title:"Returns"}],m={meta:p,headings:c};function d(e){var t=e.components,n=Object(i.a)(e,b);return Object(o.b)("wrapper",Object(a.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"expo-mail-composer"))," allows you to compose and send emails quickly and easily using the OS UI. This module can't be used on iOS Simulators since you can't sign into a mail account on them."),Object(o.b)(l.a,{file:"sdk/mailcomposer.mp4",loop:!1,mdxType:"Video"}),Object(o.b)(s.a,{android:!0,emulator:!0,ios:!0,web:!0,mdxType:"PlatformsSection"}),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)(r.b,{packageName:"expo-mail-composer",mdxType:"InstallSection"}),Object(o.b)("h2",{id:"api"},"API"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import * as MailComposer from 'expo-mail-composer';\n")),Object(o.b)("h2",{id:"methods"},"Methods"),Object(o.b)("h3",{id:"mailcomposercomposeasyncoptions"},Object(o.b)("inlineCode",{parentName:"h3"},"MailComposer.composeAsync(options)")),Object(o.b)("p",null,"Opens a mail modal for iOS and a mail app intent for Android and fills the fields with provided data. On iOS you will need to be signed into the Mail app."),Object(o.b)("h4",{id:"arguments"},"Arguments"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"saveOptions (",Object(o.b)("em",{parentName:"strong"},"object"),")")," -- A map defining the data to fill the mail:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"recipients (",Object(o.b)("em",{parentName:"strong"},"array"),")")," -- An array of e-mail addresses of the recipients."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"ccRecipients (",Object(o.b)("em",{parentName:"strong"},"array"),")")," -- An array of e-mail addresses of the CC recipients."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"bccRecipients (",Object(o.b)("em",{parentName:"strong"},"array"),")")," -- An array of e-mail addresses of the BCC recipients."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"subject (",Object(o.b)("em",{parentName:"strong"},"string"),")")," -- Subject of the mail."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"body (",Object(o.b)("em",{parentName:"strong"},"string"),")")," -- Body of the mail."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"isHtml (",Object(o.b)("em",{parentName:"strong"},"boolean"),")")," -- Whether the body contains HTML tags so it could be formatted properly. Not working perfectly on Android."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"attachments (",Object(o.b)("em",{parentName:"strong"},"array"),")")," -- An array of app's internal file uris to attach.")))),Object(o.b)("h4",{id:"returns"},"Returns"),Object(o.b)("p",null,"Resolves to a promise with object containing ",Object(o.b)("inlineCode",{parentName:"p"},"status")," field that could be either ",Object(o.b)("inlineCode",{parentName:"p"},"sent"),", ",Object(o.b)("inlineCode",{parentName:"p"},"saved")," or ",Object(o.b)("inlineCode",{parentName:"p"},"cancelled"),". Android does not provide such info so it always resolves to ",Object(o.b)("inlineCode",{parentName:"p"},"sent"),"."),Object(o.b)("h3",{id:"mailcomposerisavailableasync"},Object(o.b)("inlineCode",{parentName:"h3"},"MailComposer.isAvailableAsync()")),Object(o.b)("p",null,"Determine if the ",Object(o.b)("inlineCode",{parentName:"p"},"MailComposer")," API can be used in this app."),Object(o.b)("h4",{id:"returns-1"},"Returns"),Object(o.b)("p",null,"A promise resolves to ",Object(o.b)("inlineCode",{parentName:"p"},"true")," if the API can be used, and ",Object(o.b)("inlineCode",{parentName:"p"},"false")," otherwise."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Returns ",Object(o.b)("inlineCode",{parentName:"li"},"true")," on iOS when the device has a default email setup for sending mail."),Object(o.b)("li",{parentName:"ul"},"Can return ",Object(o.b)("inlineCode",{parentName:"li"},"false")," on iOS if an MDM profile is setup to block outgoing mail. If this is the case, you may want to use the Linking API instead."),Object(o.b)("li",{parentName:"ul"},"Always returns ",Object(o.b)("inlineCode",{parentName:"li"},"true")," in the browser and on Android")))}d.isMDXComponent=!0},C8RX:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/versions/v40.0.0/sdk/mail-composer",function(){return n("8Snb")}])}},[["C8RX",1,0,2,3,4,5,6,15]]]);