_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[684],{elPl:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return l})),n.d(t,"headings",(function(){return p})),n.d(t,"default",(function(){return d}));var a=n("HALo"),r=n("dhJC"),i=(n("q1tI"),n("7ljp")),o=n("HCau"),b=n("hykZ"),c=["components"],l={title:"Network",sourceCodeUrl:"https://github.com/expo/expo/tree/sdk-40/packages/expo-network"},p=[{depth:2,type:"text",title:"Installation"},{depth:2,type:"text",title:"Configuration"},{depth:2,type:"text",title:"API"},{depth:2,type:"text",title:"Methods"},{depth:3,type:"inlineCode",title:"Network.getNetworkStateAsync()"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"Network.getIpAddressAsync()"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"Network.getMacAddressAsync(interfaceName?)"},{depth:4,type:"text",title:"Arguments (Android Only)"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"Network.isAirplaneModeEnabledAsync()"},{depth:4,type:"text",title:"Returns"},{depth:2,type:"text",title:"Enums"},{depth:3,type:"inlineCode",title:"Network.NetworkStateType"},{depth:2,type:"text",title:"Error Codes"}],s={meta:l,headings:p};function d(e){var t=e.components,n=Object(r.a)(e,c);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"expo-network"))," provides useful information about the device's network such as its IP address, MAC address, and airplane mode status."),Object(i.b)(b.a,{android:!0,emulator:!0,ios:!0,simulator:!0,web:!0,mdxType:"PlatformsSection"}),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)(o.b,{packageName:"expo-network",mdxType:"InstallSection"}),Object(i.b)("h2",{id:"configuration"},"Configuration"),Object(i.b)("p",null,"On Android, this module requires permissions to access the network and Wi-Fi state. The permissions ",Object(i.b)("inlineCode",{parentName:"p"},"ACCESS_NETWORK_STATE")," and ",Object(i.b)("inlineCode",{parentName:"p"},"ACCESS_WIFI_STATE")," are added automatically."),Object(i.b)("h2",{id:"api"},"API"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import * as Network from 'expo-network';\n")),Object(i.b)("h2",{id:"methods"},"Methods"),Object(i.b)("h3",{id:"networkgetnetworkstateasync"},Object(i.b)("inlineCode",{parentName:"h3"},"Network.getNetworkStateAsync()")),Object(i.b)("p",null,"Gets the device's current network connection state."),Object(i.b)("p",null,"On web, ",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/connection"},Object(i.b)("inlineCode",{parentName:"a"},"navigator.connection.type"))," is not available on browsers. So if there is an active network connection, the field ",Object(i.b)("inlineCode",{parentName:"p"},"type")," returns ",Object(i.b)("inlineCode",{parentName:"p"},"NetworkStateType.UNKNOWN"),". Otherwise, it returns ",Object(i.b)("inlineCode",{parentName:"p"},"NetworkStateType.NONE"),"."),Object(i.b)("h4",{id:"returns"},"Returns"),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"Promise")," that resolves to an object with the following fields:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"type (",Object(i.b)("em",{parentName:"strong"},"NetworkStateType"),")")," -- a ",Object(i.b)("a",{parentName:"p",href:"/versions/v40.0.0/sdk/network/#networknetworkstatetype"},Object(i.b)("inlineCode",{parentName:"a"},"NetworkStateType"))," enum value that represents the current network connection type.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"isConnected (",Object(i.b)("em",{parentName:"strong"},"boolean"),")")," -- if there is an active network connection. Note that this does not mean that internet is reachable. This field is ",Object(i.b)("inlineCode",{parentName:"p"},"false")," if the ",Object(i.b)("inlineCode",{parentName:"p"},"type")," is either ",Object(i.b)("inlineCode",{parentName:"p"},"Network.NetworkStateType.NONE")," or ",Object(i.b)("inlineCode",{parentName:"p"},"Network.NetworkStateType.UNKNOWN"),", ",Object(i.b)("inlineCode",{parentName:"p"},"true")," otherwise.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"isInternetReachable (",Object(i.b)("em",{parentName:"strong"},"boolean"),")")," -- if the internet is reachable with the currently active network connection. On Android, this depends on ",Object(i.b)("inlineCode",{parentName:"p"},"NetInfo.isConnected()")," (API level < 29) or ",Object(i.b)("inlineCode",{parentName:"p"},"ConnectivityManager.getActiveNetwork()")," (API level >= 29). On iOS, this value will always be the same as ",Object(i.b)("inlineCode",{parentName:"p"},"isConnected"),"."))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Examples")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"await Network.getNetworkStateAsync();\n// {\n//   type: NetworkStateType.CELLULAR,\n//   isConnected: true,\n//   isInternetReachable: true,\n// }\n")),Object(i.b)("h3",{id:"networkgetipaddressasync"},Object(i.b)("inlineCode",{parentName:"h3"},"Network.getIpAddressAsync()")),Object(i.b)("p",null,"Gets the device's current IPv4 address."),Object(i.b)("p",null,"On web, this method uses ",Object(i.b)("a",{parentName:"p",href:"https://www.ipify.org/"},Object(i.b)("inlineCode",{parentName:"a"},"Ipify Api"))," to get public ip address of current device via http request."),Object(i.b)("h4",{id:"returns-1"},"Returns"),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"Promise")," that resolves to a ",Object(i.b)("inlineCode",{parentName:"p"},"string")," of the current IP address of the device's main network interface. Can only be IPv4 address."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Examples")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},'await Network.getIpAddressAsync();\n// "92.168.32.44"\n')),Object(i.b)("h3",{id:"networkgetmacaddressasyncinterfacename"},Object(i.b)("inlineCode",{parentName:"h3"},"Network.getMacAddressAsync(interfaceName?)")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"This method is deprecated and will be removed in a future SDK version.")," In Expo Go version 2.19.x and above, this method will always return the string ",Object(i.b)("inlineCode",{parentName:"p"},"'02:00:00:00:00:00'"),". Your standalone apps built with SDK 40 will continue to work as before.")),Object(i.b)("p",null,"Gets the specified network interface's Mac address. On Android, it requires ",Object(i.b)("a",{parentName:"p",href:"https://developer.android.com/reference/android/Manifest.permission#ACCESS_WIFI_STATE"},Object(i.b)("inlineCode",{parentName:"a"},"android.permission.ACCESS_WIFI_STATE"))," permission to access available network interfaces."),Object(i.b)("h4",{id:"arguments-android-only"},"Arguments (Android Only)"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"interfaceName (",Object(i.b)("em",{parentName:"strong"},"string | null"),")")," -- A string representing interface name (",Object(i.b)("inlineCode",{parentName:"li"},"eth0"),", ",Object(i.b)("inlineCode",{parentName:"li"},"wlan0"),") or ",Object(i.b)("inlineCode",{parentName:"li"},"null")," (default), meaning the method should fetch the MAC address of the first available interface. (On iOS this argument is ignored.)")),Object(i.b)("h4",{id:"returns-2"},"Returns"),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"Promise")," that resolves to a ",Object(i.b)("inlineCode",{parentName:"p"},"string")," of the network adapter MAC address or ",Object(i.b)("inlineCode",{parentName:"p"},"null")," if there's no such address matching the interface. On web, the ",Object(i.b)("inlineCode",{parentName:"p"},"Promise")," resolves to ",Object(i.b)("inlineCode",{parentName:"p"},"null"),"."),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html#//apple_ref/doc/uid/TP40013162-SW1"},"Note from Apple"),": In iOS 7 and later, if you ask for the MAC address of an iOS device, the system returns the value ",Object(i.b)("inlineCode",{parentName:"p"},'"02:00:00:00:00:00"'),"."),Object(i.b)("p",null,"If you need to identify the device, use the ",Object(i.b)("inlineCode",{parentName:"p"},"getIosIdForVendorAsync()")," method of the ",Object(i.b)("inlineCode",{parentName:"p"},"expo-application")," unimodule instead."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Examples")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},'await Network.getMacAddressAsync();\n// "E5:12:D8:E5:69:97"\n')),Object(i.b)("h3",{id:"networkisairplanemodeenabledasync"},Object(i.b)("inlineCode",{parentName:"h3"},"Network.isAirplaneModeEnabledAsync()")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Android only.")," Tells if the device is in airplane mode."),Object(i.b)("h4",{id:"returns-3"},"Returns"),Object(i.b)("p",null,"Returns a ",Object(i.b)("inlineCode",{parentName:"p"},"Promise")," that resolves to the ",Object(i.b)("inlineCode",{parentName:"p"},"boolean")," value for whether the device is in airplane mode or not."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Examples")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"await Network.isAirplaneModeEnabledAsync();\n// false\n")),Object(i.b)("h2",{id:"enums"},"Enums"),Object(i.b)("h3",{id:"networknetworkstatetype"},Object(i.b)("inlineCode",{parentName:"h3"},"Network.NetworkStateType")),Object(i.b)("p",null,"An enum of the different types of devices supported by Expo, with these values:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"NONE"))," -- no active network connection detected."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"UNKNOWN"))," -- the connection type could not be determined."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"CELLULAR"))," -- active network connection over mobile data or ",Object(i.b)("a",{parentName:"li",href:"https://developer.android.com/reference/android/net/ConnectivityManager#TYPE_MOBILE_DUN"},Object(i.b)("inlineCode",{parentName:"a"},"DUN-specific"))," mobile connection when setting an upstream connection for tethering."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"WIFI"))," -- active network connection over Wifi."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"BLUETOOTH"))," -- active network connection over Bluetooth."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"ETHERNET"))," -- active network connection over Ethernet."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"WIMAX"))," -- active network connection over Wimax."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"VPN"))," -- active network connection over VPN."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"OTHER"))," -- active network connection over other network connection types.")),Object(i.b)("h2",{id:"error-codes"},"Error Codes"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Code"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ERR_NETWORK_IP_ADDRESS"),Object(i.b)("td",{parentName:"tr",align:null},"On Android, there may be an unknown Wifi host when trying to access ",Object(i.b)("inlineCode",{parentName:"td"},"WifiManager")," in ",Object(i.b)("inlineCode",{parentName:"td"},"getIpAddressAsync"),". On iOS, no network interfaces could be retrieved.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ERR_NETWORK_UNDEFINED_INTERFACE"),Object(i.b)("td",{parentName:"tr",align:null},"An undefined ",Object(i.b)("inlineCode",{parentName:"td"},"interfaceName")," was passed as an argument in ",Object(i.b)("inlineCode",{parentName:"td"},"getMacAddressAsync"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ERR_NETWORK_SOCKET_EXCEPTION"),Object(i.b)("td",{parentName:"tr",align:null},"An error was encountered in creating or accessing the socket in ",Object(i.b)("inlineCode",{parentName:"td"},"getMacAddressAsync"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ERR_NETWORK_INVALID_PERMISSION_INTERNET"),Object(i.b)("td",{parentName:"tr",align:null},"There are invalid permissions for ",Object(i.b)("a",{parentName:"td",href:"https://developer.android.com/reference/android/Manifest.permission#ACCESS_WIFI_STATE"},Object(i.b)("inlineCode",{parentName:"a"},"android.permission.ACCESS_WIFI_STATE"))," in ",Object(i.b)("inlineCode",{parentName:"td"},"getMacAddressAsync"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"ERR_NETWORK_NO_ACCESS_NETWORKINFO"),Object(i.b)("td",{parentName:"tr",align:null},"Unable to access network information")))))}d.isMDXComponent=!0},yJ7o:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/versions/v40.0.0/sdk/network",function(){return n("elPl")}])}},[["yJ7o",1,0,2,3,4,5,6]]]);