_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[573],{"6vJj":function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return i})),n.d(t,"headings",(function(){return l})),n.d(t,"default",(function(){return b}));var r=n("HALo"),a=n("dhJC"),o=(n("q1tI"),n("7ljp")),c=["components"],i={id:"clipboard",title:"Clipboard",hideFromSearch:!0},l=[{depth:2,type:"text",title:"Example"},{depth:1,type:"text",title:"Reference"},{depth:2,type:"text",title:"Methods"},{depth:3,type:"inlineCode",title:"getString()"},{depth:3,type:"inlineCode",title:"setString()"}],p={meta:i,headings:l};function b(e){var t=e.components,n=Object(a.a)(e,c);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"This API is deprecated and will be removed from react-native in the next release. Use ",Object(o.b)("a",{parentName:"p",href:"/versions/v40.0.0/sdk/clipboard/"},"expo-clipboard")," instead.")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Clipboard")," gives you an interface for setting and getting content from Clipboard on both Android and iOS"),Object(o.b)("hr",null),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"\nimport React, { useState } from 'react'\nimport { SafeAreaView, View, Text, TouchableOpacity, Clipboard, StyleSheet } from 'react-native'\n\nconst App = () => {\n  const [copiedText, setCopiedText] = useState('')\n\n  const copyToClipboard = () => {\n    Clipboard.setString('hello world')\n  }\n\n  const fetchCopiedText = async () => {\n    const text = await Clipboard.getString()\n    setCopiedText(text)\n  }\n\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n      <View style={styles.container}>\n        <TouchableOpacity onPress={() => copyToClipboard()}>\n          <Text>Click here to copy to Clipboard</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={() => fetchCopiedText()}>\n          <Text>View copied text</Text>\n        </TouchableOpacity>\n\n        <Text style={styles.copiedText}>{copiedText}</Text>\n      </View>\n\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  copiedText: {\n    marginTop: 10,\n    color: 'red'\n  }\n})\n\nexport default App\n")),Object(o.b)("h1",{id:"reference"},"Reference"),Object(o.b)("h2",{id:"methods"},"Methods"),Object(o.b)("h3",{id:"getstring"},Object(o.b)("inlineCode",{parentName:"h3"},"getString()")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"static getString()\n")),Object(o.b)("p",null,"Get content of string type, this method returns a ",Object(o.b)("inlineCode",{parentName:"p"},"Promise"),", so you can use following code to get clipboard content"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"async _getContent() {\n  var content = await Clipboard.getString();\n}\n")),Object(o.b)("hr",null),Object(o.b)("h3",{id:"setstring"},Object(o.b)("inlineCode",{parentName:"h3"},"setString()")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"static setString(content)\n")),Object(o.b)("p",null,"Set content of string type. You can use following code to set clipboard content"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"_setContent() {\n  Clipboard.setString('hello world');\n}\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Parameters:")),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},"Name"),Object(o.b)("th",{parentName:"tr",align:null},"Type"),Object(o.b)("th",{parentName:"tr",align:null},"Required"),Object(o.b)("th",{parentName:"tr",align:null},"Description"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"content"),Object(o.b)("td",{parentName:"tr",align:null},"string"),Object(o.b)("td",{parentName:"tr",align:null},"Yes"),Object(o.b)("td",{parentName:"tr",align:null},"The content to be stored in the clipboard")))),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Notice")),Object(o.b)("p",null,"Be careful when you're trying to copy to clipboard any data except ",Object(o.b)("inlineCode",{parentName:"p"},"string")," and ",Object(o.b)("inlineCode",{parentName:"p"},"number"),", some data need additional stringification. For example, if you will try to copy array - Android will raise an exception, but iOS will not."))}b.isMDXComponent=!0},"7ljp":function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return O}));var r=n("q1tI"),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),b=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"===typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=b(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=b(n),d=r,O=s["".concat(c,".").concat(d)]||s[d]||u[d]||o;return n?a.a.createElement(O,i(i({ref:t},p),{},{components:n})):a.a.createElement(O,i({ref:t},p))}));function O(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var o=n.length,c=new Array(o);c[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"===typeof e?e:r,c[1]=i;for(var p=2;p<o;p++)c[p]=n[p];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},HALo:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},"J+KL":function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/versions/v40.0.0/react-native/clipboard",function(){return n("6vJj")}])},Qetd:function(e,t,n){"use strict";var r=Object.assign.bind(Object);e.exports=r,e.exports.default=e.exports},dhJC:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}n.d(t,"a",(function(){return r}))}},[["J+KL",1,0]]]);