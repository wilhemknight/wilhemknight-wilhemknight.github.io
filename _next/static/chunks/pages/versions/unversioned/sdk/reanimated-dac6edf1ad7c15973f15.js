_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[528],{opEm:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/versions/unversioned/sdk/reanimated",function(){return n("qEUk")}])},qEUk:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return c})),n.d(t,"headings",(function(){return u})),n.d(t,"default",(function(){return m}));var a=n("HALo"),o=n("dhJC"),i=(n("q1tI"),n("7ljp")),r=n("HCau"),s=n("hykZ"),l=["components"],c={title:"Reanimated",sourceCodeUrl:"https://github.com/software-mansion/react-native-reanimated",packageName:"react-native-reanimated"},u=[{depth:2,type:"text",title:"Installation"},{depth:2,type:"text",title:"API Usage"}],p={meta:c,headings:u};function m(e){var t=e.components,n=Object(o.a)(e,l);return Object(i.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"react-native-reanimated"))," provides an API that greatly simplifies the process of creating smooth, powerful, and maintainable animations."),Object(i.b)(s.a,{android:!0,emulator:!0,ios:!0,simulator:!0,web:!0,mdxType:"PlatformsSection"}),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)(r.a,{href:"https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/installation",mdxType:"APIInstallSection"}),Object(i.b)("p",null,"After the installation completed, add the Babel plugin to ",Object(i.b)("strong",{parentName:"p"},"babel.config.js"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"module.exports = function(api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: ['react-native-reanimated/plugin'],\n  };\n};\n")),Object(i.b)("p",null,"After you add the Babel plugin, restart your development server and clear the bundler cache: ",Object(i.b)("inlineCode",{parentName:"p"},"expo start --clear"),"."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Note: If you load other Babel plugins, the Reanimated plugin has to be the last item in the plugins array.")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"\ud83d\udea8 ",Object(i.b)("strong",{parentName:"p"},"The new APIs in ",Object(i.b)("inlineCode",{parentName:"strong"},"react-native-reanimated@2")," use React Native APIs that are incompatible with Remote JS Debugging"),". Consequently, you can only debug apps using these APIs using Flipper, which is not yet available in the Expo managed workflow. ",Object(i.b)("strong",{parentName:"p"},"You will be unable to use Remote JS Debugging if you use the new APIs from Reanimated 2"),". Remote JS Debugging will continue to work if you only use the APIs that were also available in Reanimated 1.")),Object(i.b)("h2",{id:"api-usage"},"API Usage"),Object(i.b)("p",null,"You should refer to the ",Object(i.b)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/docs/"},"react-native-reanimated docs")," for more information on the API and its usage. But the following example (courtesy of that repo) is a quick way to get started."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import Animated, {\n  useSharedValue,\n  withTiming,\n  useAnimatedStyle,\n  Easing,\n} from 'react-native-reanimated';\nimport { View, Button } from 'react-native';\nimport React from 'react';\n\nexport default function AnimatedStyleUpdateExample(props) {\n  const randomWidth = useSharedValue(10);\n\n  const config = {\n    duration: 500,\n    easing: Easing.bezier(0.5, 0.01, 0, 1),\n  };\n\n  const style = useAnimatedStyle(() => {\n    return {\n      width: withTiming(randomWidth.value, config),\n    };\n  });\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}>\n      <Animated.View\n        style={[{ width: 100, height: 80, backgroundColor: 'black', margin: 30 }, style]}\n      />\n      <Button\n        title=\"toggle\"\n        onPress={() => {\n          randomWidth.value = Math.random() * 350;\n        }}\n      />\n    </View>\n  );\n}\n")))}m.isMDXComponent=!0}},[["opEm",1,0,2,3,4,5,6]]]);