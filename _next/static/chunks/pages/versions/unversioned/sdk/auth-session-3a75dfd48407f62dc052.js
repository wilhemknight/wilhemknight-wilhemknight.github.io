_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[467],{I0q5:function(e,t,n){"use strict";n.d(t,"a",(function(){return g}));var a=n("z7pX"),i=n("H+61"),o=n("UlJF"),r=n("+Css"),s=n("7LId"),c=n("VIvw"),l=n("iHvq"),p=n("cpVT"),u=n("q1tI"),b=n("ufKf"),d=n("3zh3"),h=n("AeFk"),m=function(e){var t=e.size,n=void 0===t?24:t,a=e.stroke,i=void 0===a?d.palette.dark.white:a;return Object(h.c)("svg",{"aria-label":"check",width:n,height:n,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg"},Object(h.c)("path",{d:"M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6m4-3h6v6m-11 5L21 3",stroke:i,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"}))},j=n("5BX9");function O(e){var t=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,a=Object(l.a)(e);if(t){var i=Object(l.a)(this).constructor;n=Reflect.construct(a,arguments,i)}else n=a.apply(this,arguments);return Object(c.a)(this,n)}}var f="v".concat(n("kiQV").version),g=function(e){Object(s.a)(n,e);var t=O(n);function n(){var e;Object(i.a)(this,n);for(var o=arguments.length,s=new Array(o),c=0;c<o;c++)s[c]=arguments[c];return e=t.call.apply(t,[this].concat(s)),Object(p.a)(Object(r.a)(e),"contentRef",u.createRef()),Object(p.a)(Object(r.a)(e),"state",{ready:!1}),Object(p.a)(Object(r.a)(e),"getSelectedDocsVersion",(function(){var t=e.context.version;return"latest"===t?f:t})),Object(p.a)(Object(r.a)(e),"getSnackSdkVersion",(function(){var t=e.getSelectedDocsVersion();return"unversioned"===t&&(t=f),t.replace("v","")})),Object(p.a)(Object(r.a)(e),"getExamplesPath",(function(){return"".concat(document.location.origin,"/static/examples/").concat(e.getSelectedDocsVersion())})),Object(p.a)(Object(r.a)(e),"getDependencies",(function(){return Object(a.a)(e.props.dependencies).join(",")})),Object(p.a)(Object(r.a)(e),"getCode",(function(){return(e.contentRef.current&&e.contentRef.current.textContent||"").replace(/%%placeholder-start%%.*%%placeholder-end%%/g,"")})),e}return Object(o.a)(n,[{key:"componentDidMount",value:function(){this.setState({ready:!0})}},{key:"render",value:function(){return Object(h.c)("div",null,Object(h.c)("div",{ref:this.contentRef,style:this.props.contentHidden?{display:"none"}:void 0},this.props.children),Object(h.c)("form",{action:b.a,method:"POST",target:"_blank"},Object(h.c)("input",{type:"hidden",name:"platform",value:this.props.defaultPlatform||"android"}),Object(h.c)("input",{type:"hidden",name:"name",value:this.props.label||"Example"}),Object(h.c)("input",{type:"hidden",name:"dependencies",value:this.getDependencies()}),Object(h.c)("input",{type:"hidden",name:"sdkVersion",value:this.getSnackSdkVersion()}),this.props.platforms&&Object(h.c)("input",{type:"hidden",name:"supportedPlatforms",value:this.props.platforms.join(",")}),this.state.ready&&Object(h.c)("input",{type:"hidden",name:"files",value:JSON.stringify(Object(b.b)({templateId:this.props.templateId,code:this.getCode(),files:this.props.files,baseURL:this.getExamplesPath()}))}),Object(h.c)("button",{className:"snack-inline-example-button",disabled:!this.state.ready},Object(h.c)(m,{size:16})," ",this.props.buttonTitle||"Try this example on Snack")))}}]),n}(u.Component);Object(p.a)(g,"contextType",j.a),Object(p.a)(g,"defaultProps",{dependencies:[]})},K6fk:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return c})),n.d(t,"c",(function(){return l}));var a=n("3zh3"),i=(n("q1tI"),n("AeFk"));var o={name:"16147hq",styles:"text-decoration:none;transition:box-shadow 0.15s ease 0s,transform 0.15s ease 0s,-webkit-box-shadow 0.15s ease 0s,-webkit-transform 0.15s ease 0s;box-shadow:rgba(2, 8, 20, 0.1) 0px 0.175em 0.5em,rgba(2, 8, 20, 0.08) 0px 0.085em 0.175em;.protocol{opacity:0;transform:translateY(4px);}:hover{box-shadow:rgba(2, 8, 20, 0.1) 0px 0.35em 1.175em,rgba(2, 8, 20, 0.08) 0px 0.175em 0.5em;transform:scale(1.05);.protocol{opacity:0.6;transform:translateY(0px);}}"},r={name:"1lv1yo7",styles:"display:inline-flex"},s=function(e){var t=e.href,n=e.name;return Object(i.c)("a",{css:r,className:"snack-inline-example-button",href:t,target:"_blank",rel:"noreferrer"},"Create ",n," App")},c=function(e){var t=e.children;return Object(i.c)("div",{style:{gridTemplateColumns:"repeat(auto-fit, minmax(200px, 1fr))",gridTemplateRows:"1fr",display:"grid",gap:"1.35rem"}},t)},l=function(e){var t=e.title,n=e.protocol,r=void 0===n?[]:n,s=e.image,c=e.href;return Object(i.c)("a",{href:c,css:o,style:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center",padding:"1.65em 2em",gap:"1.35rem",textDecoration:"none",background:a.theme.background.secondary,borderRadius:4}},Object(i.c)("img",{style:{width:56,height:56,marginBottom:"1.2em"},alt:t,src:s}),Object(i.c)("p",{style:{color:a.theme.text.default,fontSize:"1.2em",fontWeight:900,textAlign:"center"}},t),(r||[]).length&&Object(i.c)("p",{className:"protocol",style:{transitionProperty:"all",transitionDuration:"0.15s",marginTop:"0.4em",color:a.theme.text.default,fontSize:"0.9em",fontWeight:400,textAlign:"center"}},r.join(" | ")))}},mPvx:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return u})),n.d(t,"headings",(function(){return b})),n.d(t,"default",(function(){return h}));var a=n("HALo"),i=n("dhJC"),o=(n("q1tI"),n("7ljp")),r=n("3Ukx"),s=n("hykZ"),c=n("HCau"),l=(n("K6fk"),n("FhZx")),p=(n("I0q5"),n("3WCi"),["components"]),u={title:"AuthSession",sourceCodeUrl:"https://github.com/expo/expo/tree/main/packages/expo-auth-session",packageName:"expo-auth-session"},b=[{depth:2,type:"text",title:"Installation"},{depth:3,type:"text",title:"Usage in standalone apps"},{depth:2,type:"text",title:"Guides"},{depth:2,type:"text",title:"How web browser based authentication flows work"},{depth:2,type:"inlineCode",title:"What  auth.expo.io  does for you"},{depth:3,type:"text",title:"It reduces boilerplate"},{depth:3,type:"text",title:"It makes redirect URL allowlists easier to manage for development and working in teams"},{depth:2,type:"text",title:"Security considerations"},{depth:1,type:"text",title:"API"},{depth:2,type:"text",title:"Providers"},{depth:2,type:"text",title:"Google"},{depth:3,type:"inlineCode",title:"useAuthRequest()"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"discovery"},{depth:2,type:"text",title:"Facebook"},{depth:3,type:"inlineCode",title:"useAuthRequest()"},{depth:4,type:"text",title:"Arguments"},{depth:4,type:"text",title:"Returns"},{depth:3,type:"inlineCode",title:"discovery"},{depth:2,type:"text",title:"Usage in the bare React Native app"},{depth:3,type:"text",title:"Proxy Service"},{depth:2,type:"text",title:"Advanced usage"},{depth:3,type:"text",title:"Filtering out AuthSession events in Linking handlers"},{depth:4,type:"text",title:"With React Navigation v5"}],d={meta:u,headings:b};function h(e){var t=e.components,n=Object(i.a)(e,p);return Object(o.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"AuthSession")," is the easiest way to add web browser based authentication (for example, browser-based OAuth flows) to your app, built on top of ",Object(o.b)("a",{parentName:"p",href:"/versions/unversioned/sdk/webbrowser/"},"WebBrowser"),", ",Object(o.b)("a",{parentName:"p",href:"/versions/unversioned/sdk/crypto/"},"Crypto"),", and ",Object(o.b)("a",{parentName:"p",href:"/versions/unversioned/sdk/random/"},"Random"),". If you would like to understand how it does this, read this document from top to bottom. If you just want to use it, jump to the ",Object(o.b)("a",{parentName:"p",href:"/guides/authentication/"},"Authentication Guide"),"."),Object(o.b)(s.a,{android:!0,emulator:!0,ios:!0,simulator:!0,web:!0,mdxType:"PlatformsSection"}),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("inlineCode",{parentName:"p"},"expo-random")," is a peer dependency and must be installed alongside ",Object(o.b)("inlineCode",{parentName:"p"},"expo-auth-session"),".")),Object(o.b)(c.a,{packageName:"expo-auth-session expo-random",mdxType:"APIInstallSection"}),Object(o.b)("p",null,"In ",Object(o.b)("strong",{parentName:"p"},"bare-workflow")," you can use the ",Object(o.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/uri-scheme"},Object(o.b)("inlineCode",{parentName:"a"},"uri-scheme")," package")," to easily add, remove, list, and open your URIs."),Object(o.b)("p",null,"To make your native app handle ",Object(o.b)("inlineCode",{parentName:"p"},"mycoolredirect://")," simply run:"),Object(o.b)(l.a,{cmd:["npx uri-scheme add mycoolredirect"],mdxType:"TerminalBlock"}),Object(o.b)("br",null),Object(o.b)("p",null,"You should now be able to see a list of all your project's schemes by running:"),Object(o.b)(l.a,{cmd:["npx uri-scheme list"],mdxType:"TerminalBlock"}),Object(o.b)("br",null),Object(o.b)("p",null,"You can test it to ensure it works like this:"),Object(o.b)(l.a,{cmd:["# Rebuild the native apps, be sure to use an emulator","yarn ios","yarn android","","# Open a URI scheme","npx uri-scheme open mycoolredirect://some/redirect"],mdxType:"TerminalBlock"}),Object(o.b)("h3",{id:"usage-in-standalone-apps"},"Usage in standalone apps"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"app.json")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'{\n  "expo": {\n    "scheme": "mycoolredirect"\n  }\n}\n')),Object(o.b)("p",null,"In order to be able to deep link back into your app, you will need to set a ",Object(o.b)("inlineCode",{parentName:"p"},"scheme")," in your project ",Object(o.b)("strong",{parentName:"p"},"app.config.js"),", or ",Object(o.b)("strong",{parentName:"p"},"app.json"),", and then build your standalone app (it can't be updated with an update). If you do not include a scheme, the authentication flow will complete but it will be unable to pass the information back into your application and the user will have to manually exit the authentication modal (resulting in a cancelled event)."),Object(o.b)("h2",{id:"guides"},"Guides"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The guides have moved: ",Object(o.b)("a",{parentName:"p",href:"/../../../../../../guides/authentication/"},"Authentication Guide"),".")),Object(o.b)("h2",{id:"how-web-browser-based-authentication-flows-work"},"How web browser based authentication flows work"),Object(o.b)("p",null,"The typical flow for browser-based authentication in mobile apps is as follows:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Initiation"),": the user presses a sign in button"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Open web browser"),": the app opens up a web browser to the authentication provider sign in page. The url that is opened for the sign in page usually includes information to identify the app, and a URL to redirect to on success. ",Object(o.b)("em",{parentName:"li"},"Note: the web browser should share cookies with your system web browser so that users do not need to sign in again if they are already authenticated on the system browser -- Expo's ",Object(o.b)("a",{parentName:"em",href:"/versions/unversioned/sdk/webbrowser/"},"WebBrowser")," API takes care of this.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Authentication provider redirects"),": upon successful authentication, the authentication provider should redirect back to the application by redirecting to URL provided by the app in the query parameters on the sign in page (",Object(o.b)("a",{parentName:"li",href:"/guides/linking/"},"read more about how linking works in mobile apps"),"), ",Object(o.b)("em",{parentName:"li"},"provided that the URL is in the allowlist of allowed redirect URLs"),". Allowlisting redirect URLs is important to prevent malicious actors from pretending to be your application. The redirect includes data in the URL (such as user id and token), either in the location hash, query parameters, or both."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"App handles redirect"),": the redirect is handled by the app and data is parsed from the redirect URL.")),Object(o.b)("h2",{id:"what-authexpoio-does-for-you"},"What ",Object(o.b)("inlineCode",{parentName:"h2"},"auth.expo.io")," does for you"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The ",Object(o.b)("inlineCode",{parentName:"p"},"auth.expo.io")," proxy is only used when ",Object(o.b)("inlineCode",{parentName:"p"},"startAsync")," is called, or when ",Object(o.b)("inlineCode",{parentName:"p"},"useProxy: true")," is passed to the ",Object(o.b)("inlineCode",{parentName:"p"},"promptAsync()")," method of an ",Object(o.b)("inlineCode",{parentName:"p"},"AuthRequest"),".")),Object(o.b)("h3",{id:"it-reduces-boilerplate"},"It reduces boilerplate"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"AuthSession")," handles most of the app-side responsibilities for you:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"It opens the sign in URL for your authentication provider (",Object(o.b)("inlineCode",{parentName:"li"},"authUrl"),", you must provide it) in a web browser that shares cookies with your system browser."),Object(o.b)("li",{parentName:"ul"},"It handles success redirects and extracts all of the data encoded in the URL."),Object(o.b)("li",{parentName:"ul"},"It handles failures and provides information to you about what went wrong.")),Object(o.b)("h3",{id:"it-makes-redirect-url-allowlists-easier-to-manage-for-development-and-working-in-teams"},"It makes redirect URL allowlists easier to manage for development and working in teams"),Object(o.b)("p",null,"Additionally, ",Object(o.b)("inlineCode",{parentName:"p"},"AuthSession")," ",Object(o.b)("strong",{parentName:"p"},"simplifies setting up authorized redirect URLs")," by using an Expo service that sits between you and your authentication provider (",Object(o.b)("a",{parentName:"p",href:"/versions/unversioned/sdk/auth-session/#security-considerations"},"read Security considerations for caveats"),"). This is particularly valuable with Expo because your app can live at various URLs. In development, you can have a tunnel URL, a lan URL, and a localhost URL. The tunnel URL on your machine for the same app will be different from a co-worker's machine. When you publish your app, that will be another URL that you need to allowlist. If you have multiple environments that you publish to, each of those will also need to be allowlisted. ",Object(o.b)("inlineCode",{parentName:"p"},"AuthSession")," gets around this by only having you allowlist one URL with your authentication provider: ",Object(o.b)("inlineCode",{parentName:"p"},"https://auth.expo.io/@your-username/your-app-slug"),". When authentication is successful, your authentication provider will redirect to that Expo Auth URL, and then the Expo Auth service will redirect back to your application. If the URL that the auth service is redirecting back to does not match the published URL for the app or the standalone app scheme (eg: ",Object(o.b)("inlineCode",{parentName:"p"},"exp://expo.dev/@your-username/your-app-slug"),", or ",Object(o.b)("inlineCode",{parentName:"p"},"yourscheme://"),"), then it will show a warning page before asking the user to sign in. This means that in development you will see this warning page when you sign in, a small price to pay for the convenience."),Object(o.b)("p",null,"How does this work? When you open an authentication session with ",Object(o.b)("inlineCode",{parentName:"p"},"AuthSession"),", it first visits ",Object(o.b)("inlineCode",{parentName:"p"},"https://auth.expo.io/@your-username/your-app-slug/start")," and passes in the ",Object(o.b)("inlineCode",{parentName:"p"},"authUrl")," and ",Object(o.b)("inlineCode",{parentName:"p"},"returnUrl")," (the URL to redirect back to your application) in the query parameters. The Expo Auth service saves away the ",Object(o.b)("inlineCode",{parentName:"p"},"returnUrl")," (and if it is not a published URL or your registered custom theme, shows a warning page) and then sends the user off to the ",Object(o.b)("inlineCode",{parentName:"p"},"authUrl"),". When the authentication provider redirects back to ",Object(o.b)("inlineCode",{parentName:"p"},"https://auth.expo.io/@your-username/your-app-slug")," on success, the Expo Auth services redirects back to the ",Object(o.b)("inlineCode",{parentName:"p"},"returnUrl")," that was provided on initiating the authentication flow."),Object(o.b)("h2",{id:"security-considerations"},"Security considerations"),Object(o.b)("p",null,"If you are authenticating with a popular social provider, when you are ready to ship to production you should be sure that you do not directly request the access token for the user. Instead, most providers give an option to request a one-time code that can be combined with a secret key to request an access token. For an example of this flow, ",Object(o.b)("a",{parentName:"p",href:"https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow/#confirm"},"see the ",Object(o.b)("em",{parentName:"a"},"Confirming Identity")," section in the Facebook Login documentation"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Never put any secret keys inside of your app, there is no secure way to do this!")," Instead, you should store your secret key(s) on a server and expose an endpoint that makes API calls for your client and passes the data back."),Object(o.b)("h1",{id:"api"},"API"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import * as AuthSession from 'expo-auth-session';\n")),Object(o.b)(r.a,{packageName:"expo-auth-session",apiName:"AuthSession",mdxType:"APISection"}),Object(o.b)("h2",{id:"providers"},"Providers"),Object(o.b)("p",null,"AuthSession has built-in support for some popular providers to make usage as easy as possible. These allow you to skip repetitive things like defining endpoints and abstract common features like ",Object(o.b)("inlineCode",{parentName:"p"},"language"),"."),Object(o.b)("h2",{id:"google"},"Google"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},"import * as Google from 'expo-auth-session/providers/google';\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"See the guide for more info on usage: ",Object(o.b)("a",{parentName:"li",href:"/../../../../../../guides/authentication/#google"},"Google Authentication"),"."),Object(o.b)("li",{parentName:"ul"},"Provides an extra ",Object(o.b)("inlineCode",{parentName:"li"},"loginHint")," parameter. If the user's email address is known ahead of time, it can be supplied to be the default option."),Object(o.b)("li",{parentName:"ul"},"Enforces minimum scopes to ",Object(o.b)("inlineCode",{parentName:"li"},"['openid', 'https://www.googleapis.com/auth/userinfo.profile', 'https://www.googleapis.com/auth/userinfo.email']")," for optimal usage with services like Firebase and Auth0."),Object(o.b)("li",{parentName:"ul"},"By default, the authorization ",Object(o.b)("inlineCode",{parentName:"li"},"code")," will be automatically exchanged for an access token. This can be overridden with ",Object(o.b)("inlineCode",{parentName:"li"},"shouldAutoExchangeCode"),"."),Object(o.b)("li",{parentName:"ul"},"Automatically uses the proxy in Expo Go because native auth is not supported due to custom build time configuration. This can be overridden with ",Object(o.b)("inlineCode",{parentName:"li"},"redirectUriOptions.useProxy"),"."),Object(o.b)("li",{parentName:"ul"},"Defaults to using the bundle ID and package name for the native URI redirect instead of the reverse client ID."),Object(o.b)("li",{parentName:"ul"},"Disables PKCE for implicit and id-token based auth responses."),Object(o.b)("li",{parentName:"ul"},"On web, the popup is presented with the dimensions that are optimized for the Google login UI (",Object(o.b)("inlineCode",{parentName:"li"},"{ width: 515, height: 680 }"),").")),Object(o.b)("h3",{id:"useauthrequest"},Object(o.b)("inlineCode",{parentName:"h3"},"useAuthRequest()")),Object(o.b)("p",null,"A hook used for opinionated Google authentication that works across platforms."),Object(o.b)("h4",{id:"arguments"},"Arguments"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"config (",Object(o.b)("inlineCode",{parentName:"strong"},"GoogleAuthRequestConfig"),")")," - A ",Object(o.b)("a",{parentName:"li",href:"/versions/unversioned/sdk/auth-session/#googleauthrequestconfig"},Object(o.b)("inlineCode",{parentName:"a"},"GoogleAuthRequestConfig"))," object with client IDs for each platform that should be supported."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"redirectUriOptions (",Object(o.b)("inlineCode",{parentName:"strong"},"AuthSessionRedirectUriOptions"),")")," - Optional properties used to construct the redirect URI (passed to ",Object(o.b)("inlineCode",{parentName:"li"},"makeRedirectUriAsync()"),").")),Object(o.b)("h4",{id:"returns"},"Returns"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"request (",Object(o.b)("inlineCode",{parentName:"strong"},"GoogleAuthRequest | null"),")")," - An instance of ",Object(o.b)("a",{parentName:"li",href:"/versions/unversioned/sdk/auth-session/#googleauthrequest"},Object(o.b)("inlineCode",{parentName:"a"},"GoogleAuthRequest"))," that can be used to prompt the user for authorization. This will be ",Object(o.b)("inlineCode",{parentName:"li"},"null")," until the auth request has finished loading."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"response (",Object(o.b)("inlineCode",{parentName:"strong"},"AuthSessionResult | null"),")")," - This is ",Object(o.b)("inlineCode",{parentName:"li"},"null")," until ",Object(o.b)("inlineCode",{parentName:"li"},"promptAsync")," has been invoked. Once fulfilled it will return information about the authorization."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"promptAsync (",Object(o.b)("inlineCode",{parentName:"strong"},"function"),")")," - When invoked, a web browser will open up and prompt the user for authentication. Accepts an ",Object(o.b)("a",{parentName:"li",href:"/versions/unversioned/sdk/auth-session/#authrequestpromptoptions"},Object(o.b)("inlineCode",{parentName:"a"},"AuthRequestPromptOptions"))," object with options about how the prompt will execute. This ",Object(o.b)("strong",{parentName:"li"},"should not")," be used to enable the Expo proxy service ",Object(o.b)("inlineCode",{parentName:"li"},"auth.expo.io"),", as the proxy will be automatically enabled based on the platform.")),Object(o.b)("h3",{id:"discovery"},Object(o.b)("inlineCode",{parentName:"h3"},"discovery")),Object(o.b)("p",null,"A ",Object(o.b)("a",{parentName:"p",href:"/versions/unversioned/sdk/auth-session/#discoverydocument"},Object(o.b)("inlineCode",{parentName:"a"},"DiscoveryDocument"))," object containing the discovery URLs used for Google auth."),Object(o.b)("h2",{id:"facebook"},"Facebook"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},"import * as Facebook from 'expo-auth-session/providers/facebook';\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Uses implicit auth (",Object(o.b)("inlineCode",{parentName:"li"},"ResponseType.Token"),") by default."),Object(o.b)("li",{parentName:"ul"},"See the guide for more info on usage: ",Object(o.b)("a",{parentName:"li",href:"/../../../../../../guides/authentication/#facebook"},"Facebook Authentication"),"."),Object(o.b)("li",{parentName:"ul"},"Enforces minimum scopes to ",Object(o.b)("inlineCode",{parentName:"li"},"['public_profile', 'email']")," for optimal usage with services like Firebase and Auth0."),Object(o.b)("li",{parentName:"ul"},"Uses ",Object(o.b)("inlineCode",{parentName:"li"},"display=popup")," for better UI results."),Object(o.b)("li",{parentName:"ul"},"Automatically uses the proxy in Expo Go because native auth is not supported due to custom build time configuration."),Object(o.b)("li",{parentName:"ul"},"The URI redirect must be added to your ",Object(o.b)("strong",{parentName:"li"},"app.config.js")," or ",Object(o.b)("strong",{parentName:"li"},"app.json")," as ",Object(o.b)("inlineCode",{parentName:"li"},"facebookScheme: 'fb<YOUR FBID>'"),"."),Object(o.b)("li",{parentName:"ul"},"Disables PKCE for implicit auth response."),Object(o.b)("li",{parentName:"ul"},"On web, the popup is presented with the dimensions ",Object(o.b)("inlineCode",{parentName:"li"},"{ width: 700, height: 600 }"))),Object(o.b)("h3",{id:"useauthrequest-1"},Object(o.b)("inlineCode",{parentName:"h3"},"useAuthRequest()")),Object(o.b)("p",null,"A hook used for opinionated Facebook authentication that works across platforms."),Object(o.b)("h4",{id:"arguments-1"},"Arguments"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"config (",Object(o.b)("inlineCode",{parentName:"strong"},"FacebookAuthRequestConfig"),")")," - A ",Object(o.b)("a",{parentName:"li",href:"/versions/unversioned/sdk/auth-session/#facebookauthrequestconfig"},Object(o.b)("inlineCode",{parentName:"a"},"FacebookAuthRequestConfig"))," object with client IDs for each platform that should be supported."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"redirectUriOptions (",Object(o.b)("inlineCode",{parentName:"strong"},"AuthSessionRedirectUriOptions"),")")," - Optional properties used to construct the redirect URI (passed to ",Object(o.b)("inlineCode",{parentName:"li"},"makeRedirectUriAsync()"),").")),Object(o.b)("h4",{id:"returns-1"},"Returns"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"request (",Object(o.b)("inlineCode",{parentName:"strong"},"FacebookAuthRequest | null"),")")," - An instance of ",Object(o.b)("a",{parentName:"li",href:"/versions/unversioned/sdk/auth-session/#facebookauthrequest"},Object(o.b)("inlineCode",{parentName:"a"},"FacebookAuthRequest"))," that can be used to prompt the user for authorization. This will be ",Object(o.b)("inlineCode",{parentName:"li"},"null")," until the auth request has finished loading."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"response (",Object(o.b)("inlineCode",{parentName:"strong"},"AuthSessionResult | null"),")")," - This is ",Object(o.b)("inlineCode",{parentName:"li"},"null")," until ",Object(o.b)("inlineCode",{parentName:"li"},"promptAsync")," has been invoked. Once fulfilled it will return information about the authorization."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"promptAsync (",Object(o.b)("inlineCode",{parentName:"strong"},"function"),")")," - When invoked, a web browser will open up and prompt the user for authentication. Accepts an ",Object(o.b)("a",{parentName:"li",href:"/versions/unversioned/sdk/auth-session/#authrequestpromptoptions"},Object(o.b)("inlineCode",{parentName:"a"},"AuthRequestPromptOptions"))," object with options about how the prompt will execute.")),Object(o.b)("h3",{id:"discovery-1"},Object(o.b)("inlineCode",{parentName:"h3"},"discovery")),Object(o.b)("p",null,"A ",Object(o.b)("a",{parentName:"p",href:"/versions/unversioned/sdk/auth-session/#discoverydocument"},Object(o.b)("inlineCode",{parentName:"a"},"DiscoveryDocument"))," object containing the discovery URLs used for Facebook auth."),Object(o.b)("h2",{id:"usage-in-the-bare-react-native-app"},"Usage in the bare React Native app"),Object(o.b)("p",null,"In managed apps, ",Object(o.b)("inlineCode",{parentName:"p"},"AuthSession")," uses Expo servers to create a proxy between your application and the auth provider. If you'd like, you can also create your own proxy service."),Object(o.b)("h3",{id:"proxy-service"},"Proxy Service"),Object(o.b)("p",null,"This service is responsible for:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"redirecting traffic from your application to the authentication service"),Object(o.b)("li",{parentName:"ul"},"redirecting response from the auth service to your application using a deep link")),Object(o.b)("p",null,"To better understand how it works, check out this implementation in Node.js:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const http = require('http');\nconst url = require('url');\n\nconst PORT = PORT;\nconst DEEP_LINK = DEEP_LINK_TO_YOUR_APPLICATION;\n\nconst redirect = (response, url) => {\n  response.writeHead(302, {\n    Location: url,\n  });\n  response.end();\n}\n\nhttp\n  .createServer((request, response) => {\n    // get parameters from request\n    const parameters = url.parse(request.url, true).query;\n\n    // if parameters contain authServiceUrl, this request comes from the application\n    if (parameters.authServiceUrl) {\n      // redirect user to the authUrl\n      redirect(response, decodeURIComponent(parameters.authServiceUrl));\n      return;\n    }\n\n    // redirect response from the auth service to your application\n    redirect(response, DEEP_LINK);\n  })\n  .listen(PORT);\n")),Object(o.b)("p",null,"Client code which works with this service:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const authServiceUrl = encodeURIComponent(YOUR_AUTH_URL); // we encode this, because it will be send as a query parameter\nconst authServiceUrlParameter = `authServiceUrl=${authServiceUrl}`;\nconst authUrl = `YOUR_PROXY_SERVICE_URL?${authServiceUrlParameter}`;\nconst result = await AuthSession.startAsync({\n  authUrl,\n  returnUrl: YOUR_DEEP_LINK,\n});\n")),Object(o.b)("h2",{id:"advanced-usage"},"Advanced usage"),Object(o.b)("h3",{id:"filtering-out-authsession-events-in-linking-handlers"},"Filtering out AuthSession events in Linking handlers"),Object(o.b)("p",null,"There are many reasons why you might want to handle inbound links into your app, such as push notifications or just regular deep linking (you can read more about this in the ",Object(o.b)("a",{parentName:"p",href:"/guides/linking/"},"Linking guide"),"); authentication redirects are only one type of deep link, and ",Object(o.b)("inlineCode",{parentName:"p"},"AuthSession")," handles these particular links for you. In your own ",Object(o.b)("inlineCode",{parentName:"p"},"Linking.addEventListener")," handlers, you can filter out deep links that are handled by ",Object(o.b)("inlineCode",{parentName:"p"},"AuthSession")," by checking if the URL includes the ",Object(o.b)("inlineCode",{parentName:"p"},"+expo-auth-session")," string -- if it does, you can ignore it. This works because ",Object(o.b)("inlineCode",{parentName:"p"},"AuthSession")," adds ",Object(o.b)("inlineCode",{parentName:"p"},"+expo-auth-session")," to the default ",Object(o.b)("inlineCode",{parentName:"p"},"returnUrl"),"; however, if you provide your own ",Object(o.b)("inlineCode",{parentName:"p"},"returnUrl"),", you may want to consider adding a similar identifier to enable you to filter out ",Object(o.b)("inlineCode",{parentName:"p"},"AuthSession")," events from other handlers."),Object(o.b)("h4",{id:"with-react-navigation-v5"},"With React Navigation v5"),Object(o.b)("p",null,"If you are using deep linking with React Navigation v5, filtering through ",Object(o.b)("inlineCode",{parentName:"p"},"Linking.addEventListener")," will not be sufficient, because deep linking is ",Object(o.b)("a",{parentName:"p",href:"https://reactnavigation.org/docs/configuring-links/#advanced-cases"},"handled differently"),". Instead, to filter these events you can add a custom ",Object(o.b)("inlineCode",{parentName:"p"},"getStateFromPath")," function to your linking configuration, and then filter by URL in the same way as described above."))}h.isMDXComponent=!0},ufKf:function(e,t,n){"use strict";n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return i}));var a="https://snack.expo.dev";function i(e){var t=e.templateId,n=e.code,a=e.files,i=e.baseURL,o={};return a&&Object.keys(a).forEach((function(e){var t=a[e],n=/\.(jsx?|tsx?|json|md)$/i.test(e);o[e]=n?{type:"CODE",url:t.match(/^https?:\/\//)?t:"".concat(i,"/").concat(t)}:{type:"ASSET",contents:t}})),t?o["App.js"]={type:"CODE",url:"".concat(i,"/").concat(t,".js")}:n&&(o["App.js"]={type:"CODE",contents:n}),o}},zGAt:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/versions/unversioned/sdk/auth-session",function(){return n("mPvx")}])}},[["zGAt",1,0,2,3,4,5,6,7,8,9,10,11,12,13,14]]]);